name: Deploy to Production
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: self-hosted
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${{ secrets.AIRFLOW__WEBSERVER__SECRET_KEY }}
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${{ secrets.AIRFLOW__CORE__SQL_ALCHEMY_CONN }}
      AIRFLOW__CORE__EXECUTOR: ${{ secrets.AIRFLOW__CORE__EXECUTOR }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      VECTOR_STORE_ID: ${{ secrets.VECTOR_STORE_ID }}
      COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
      BASE_URL: ${{ secrets.BASE_URL }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
      PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD:  ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      NGROK_DOMAIN: ${{ secrets.NGROK_DOMAIN }} 
    steps:
    - uses: actions/checkout@v4
    - name: Trigger deployment
      run: |
        echo "Starting deployment to Production environment..."
        # Ensure we're in the correct directory
        cd $GITHUB_WORKSPACE || exit 1
        echo "Fetching the latest changes..."
        git fetch origin
        echo "Checking out the main branch..."
        git checkout main
        echo "Pulling the latest changes from the main branch..."
        PREVIOUS_COMMIT=$(git rev-parse HEAD)
        git pull origin main
        # Function to start containers
        start_containers() {
          docker-compose -f docker-compose.yml -p data-pipeline up -d --build
          return $?
        }
        # Function to stop containers
        stop_containers() {
          docker-compose -f docker-compose.yml -p data-pipeline down
        }
        # Function to perform health check
        health_check() {
          for i in {1..2}; do
            if curl -f http://localhost:8080/health; then
              return 0
            fi
            echo "Health check attempt $i failed. Retrying in 5 seconds..."
            sleep 5
          done
          return 1
        }
        # Function to rollback
        rollback() {
          echo "Rolling back to previous commit..."
          git reset --hard $PREVIOUS_COMMIT
          stop_containers
          start_containers
          if health_check; then
            echo "Rollback successful"
          else
            echo "Rollback failed. Manual intervention required."
            exit 1
          fi
        }
        # Main deployment logic
        echo "Stopping containers..."
        stop_containers
        echo "Starting containers..."
        if start_containers; then
          echo "Waiting for services to start..."
          sleep 20
          echo "Performing health check..."
          if health_check; then
            echo "Deployment successful. Health check passed."
          else
            echo "Health check failed. Rolling back..."
            rollback
          fi
        else
          echo "Failed to start containers. Rolling back..."
          rollback
        fi
    - name: Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment to Production completed successfully!"
        else
          echo "Deployment to Production failed. Please check the logs for details."
        fi
    - name: Debug Information
      if: failure()
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of directory:"
        ls -la
        echo "Git status:"
        git status
        echo "Docker version:"
        docker --version
        echo "Docker Compose version:"
        docker-compose --version
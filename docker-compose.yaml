services:

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow  # Database name
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data  # Persistent volume for PostgreSQL data
    ports:
      - "5432:5432"  # Expose port 5432 for connections from outside Docker (like DBeaver)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]  # Check if PostgreSQL is ready
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - airflow  # Attach to the airflow network

  airflow-init:
    build:
      context: ./  # Use the current directory as the build context
      dockerfile: Dockerfile  # Use the Dockerfile to build this service
    depends_on:
      - postgres  # Ensure Postgres is up before running this service
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow  # Set the database connection string
      AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Use LocalExecutor for task execution
    entrypoint: /bin/bash -c "airflow db init"  # Initialize the Airflow database
    networks:
      - airflow  # Attach to the airflow network

  webserver:
    build:
      context: ./  # Use the current directory as the build context
      dockerfile: Dockerfile  # Use the Dockerfile to build this service
    depends_on:
      - airflow-init  # Wait for the Airflow database to be initialized
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow  # Database connection string
      AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Use LocalExecutor for task execution
      AIRFLOW__WEBSERVER__RBAC: "True"  # Enable RBAC (role-based access control)
      AIRFLOW__WEBSERVER__SECRET_KEY: "0506"  # Webserver secret key
    ports:
      - "8080:8080"  # Expose port 8080 for the web interface
    command: "airflow webserver"  # Command to start the webserver
    networks:
      - airflow  # Attach to the airflow network
    volumes:
      - /home/lourdes22/data-pipeline/dags:/opt/airflow/dags  # Mount the DAGs directory
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]  # Check if the webserver is running
      interval: 10s
      retries: 5
      timeout: 5s

  scheduler:
    build:
      context: ./ 
Consolidated News
================================================================================

Title: Cantor was Wrong: debunking the infinite set hierarchy | by Vitalik Buterin | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in Vitalik Buterin Follow -- 27 Listen Share By Vitalik Buterin, PhD at University of Basel A common strand of mathematics argues that, rather than being one single kind of infinity, there are actually an infinite hierarchy of different levels of infinity. Whereas the size of the set of integers is just plain infinite, and the set of rational numbers is just as big as the integers (because you can map every rational number to an integer by interleaving the digits of its numerator and denominator, eg. 0.456456456…. = 456/999 = 152/333 -> 135323), the size of the set of real numbers is some kind of even bigger infinity, because there is no way to make a similar mapping from real numbers to the integers. First of all, I should note that it’s relatively easy to see that the claim that there is no mapping is false. Here’s a simple mapping. For a given real number, give me a (deterministic) python program that will print out digits of it (eg. for π, that might be a program that calculates better and better approximations using the infinite series π = 4 — 4/3 + 4/5 — 4/7 + ...). I can convert the program into a number (using n = int.from_bytes(open('program.py').read(), 'big')) and then output the number. Done. There’s the mapping from real numbers to integers. Now let’s take a look at the most common argument used to claim that no such mapping can exist, namely Cantor’s diagonal argument. Here’s an exposition from UC Denver; it’s short so I’ll just screenshot the whole thing: Now, here’s the fundamental flaw in this argument: decimal expansions of real numbers are not unique. To provide a counterexample in the exact format that the “proof” requires, consider the set (numbers written in binary), with diagonal digits bolded: The diagonal gives: 01111….. If we flip every digit, we get the number: y = 0.10000…… And here lies the problem: just as in decimal, 0.9999…. equals 1, in binary 0.01111….. equals 0.10000….. And so even though the new decimal expansion is not in the original list, the number y is exactly the same as the number x[2]. Note that this directly implies that the halting problem is in fact solvable. To see why, imagine a computer program that someone claims will not halt. Let c[1] be the state of the program after one step, c[2] after two steps, etc. Let x[1], x[2], x[3]…. be a full enumeration of all real numbers (which exists, as we proved above), expressed in base 2^D where D is the size of the program’s memory, so a program state can always be represented as a single “digit”. Let y = 0.c[1]c[2]c[3]…….. This number is by assumption part of the list, so it is one of the x[i] values, and hence it can be computed in some finite amount of time. This has implications in a number of industries, particularly in proving that “Turing-complete” blockchains are in fact secure. Patent on this research is pending. -- -- 27 Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title: The Meaning of Decentralization. “Decentralization” is one of the words… | by Vitalik Buterin | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in Vitalik Buterin Follow -- 91 Listen Share “Decentralization” is one of the words that is used in the cryptoeconomics space the most frequently, and is often even viewed as a blockchain’s entire raison d’être, but it is also one of the words that is perhaps defined the most poorly. Thousands of hours of research, and billions of dollars of hashpower, have been spent for the sole purpose of attempting to achieve decentralization, and to protect and improve it, and when discussions get rivalrous it is extremely common for proponents of one protocol (or protocol extension) to claim that the opposing proposals are “centralized” as the ultimate knockdown argument. But there is often a lot of confusion as to what this word actually means. Consider, for example, the following completely unhelpful, but unfortunately all too common, diagram: Now, consider the two answers on Quora for “what is the difference between distributed and decentralized”. The first essentially parrots the above diagram, whereas the second makes the entirely different claim that “distributed means not all the processing of the transactions is done in the same place”, whereas “decentralized means that not one single entity has control over all the processing”. Meanwhile, the top answer on the Ethereum stack exchange gives a very similar diagram, but with the words “decentralized” and “distributed” switched places! Clearly, a clarification is in order. When people talk about software decentralization, there are actually three separate axes of centralization/decentralization that they may be talking about. While in some cases it is difficult to see how you can have one without the other, in general they are quite independent of each other. The axes are as follows: We can try to put these three dimensions into a chart: Note that a lot of these placements are very rough and highly debatable. But let’s try going through any of them: Many times when people talk about the virtues of a blockchain, they describe the convenience benefits of having “one central database”; that centralization is logical centralization, and it’s a kind of centralization that is arguably in many cases good (though Juan Benet from IPFS would also push for logical decentralization wherever possible, because logically decentralized systems tend to be good at surviving network partitions, work well in regions of the world that have poor connectivity, etc; see also this article from Scuttlebot explicitly advocating logical decentralization). Architectural centralization often leads to political centralization, though not necessarily — in a formal democracy, politicians meet and hold votes in some physical governance chamber, but the maintainers of this chamber do not end up deriving any substantial amount of power over decision-making as a result. In computerized systems, architectural but not political decentralization might happen if there is an online community which uses a centralized forum for convenience, but where there is a widely agreed social contract that if the owners of the forum act maliciously then everyone will move to a different forum (communities that are formed around rebellion against what they see as censorship in another forum likely have this property in practice). Logical centralization makes architectural decentralization harder, but not impossible — see how decentralized consensus networks have already been proven to work, but are more difficult than maintaining BitTorrent. And logical centralization makes political decentralization harder — in logically centralized systems, it’s harder to resolve contention by simply agreeing to “live and let live”. The next question is, why is decentralization useful in the first place? There are generally several arguments raised: All three arguments are important and valid, but all three arguments lead to some interesting and different conclusions once you start thinking about protocol decisions with the three individual perspectives in mind. Let us try to expand out each of these arguments one by one. Regarding fault tolerance, the core argument is simple. What’s less likely to happen: one single computer failing, or five out of ten computers all failing at the same time? The principle is uncontroversial, and is used in real life in many situations, including jet engines, backup power generators particularly in places like hospitals, military infrastructure, financial portfolio diversification, and yes, computer networks. However, this kind of decentralization, while still effective and highly important, often turns out to be far less of a panacea than a naive mathematical model would sometimes predict. The reason is common mode failure. Sure, four jet engines are less likely to fail than one jet engine, but what if all four engines were made in the same factory, and a fault was introduced in all four by the same rogue employee? Do blockchains as they are today manage to protect against common mode failure? Not necessarily. Consider the following scenarios: A holistic view of fault tolerance decentralization would look at all of these aspects, and see how they can be minimized. Some natural conclusions that arise are fairly obvious: Note that the fault tolerance requirement in its naive form focuses on architectural decentralization, but once you start thinking about fault tolerance of the community that governs the protocol’s ongoing development, then political decentralization is important too. Now, let’s look at attack resistance. In some pure economic models, you sometimes get the result that decentralization does not even matter. If you create a protocol where the validators are guaranteed to lose $50 million if a 51% attack (ie. finality reversion) happens, then it doesn’t really matter if the validators are controlled by one company or 100 companies — $50 million economic security margin is $50 million economic security margin. In fact, there are deep game-theoretic reasons why centralization may even maximize this notion of economic security (the transaction selection model of existing blockchains reflects this insight, as transaction inclusion into blocks through miners/block proposers is actually a very rapidly rotating dictatorship). However, once you adopt a richer economic model, and particularly one that admits the possibility of coercion (or much milder things like targeted DoS attacks against nodes), decentralization becomes more important. If you threaten one person with death, suddenly $50 million will not matter to them as much anymore. But if the $50 million is spread between ten people, then you have to threaten ten times as many people, and do it all at the same time. In general, the modern world is in many cases characterized by an attack/defense asymmetry in favor of the attacker — a building that costs $10 million to build may cost less than $100,000 to destroy, but the attacker’s leverage is often sublinear: if a building that costs $10 million to build costs $100,000 to destroy, a building that costs $1 million to build may realistically cost perhaps $30,000 to destroy. Smaller gives better ratios. What does this reasoning lead to? First of all, it pushes strongly in favor of proof of stake over proof of work, as computer hardware is easy to detect, regulate, or attack, whereas coins can be much more easily hidden (proof of stake also has strong attack resistance for other reasons). Second, it is a point in favor of having widely distributed development teams, including geographic distribution. Third, it implies that both the economic model and the fault-tolerance model need to be looked at when designing consensus protocols. Finally, we can get to perhaps the most intricate argument of the three, collusion resistance. Collusion is difficult to define; perhaps the only truly valid way to put it is to simply say that collusion is “coordination that we don’t like”. There are many situations in real life where even though having perfect coordination between everyone would be ideal, one sub-group being able to coordinate while the others cannot is dangerous. One simple example is antitrust law — deliberate regulatory barriers that get placed in order to make it more difficult for participants on one side of the marketplace to come together and act like a monopolist and get outsided profits at the expense of both the other side of the marketplace and general social welfare. Another example is rules against active coordination between candidates and super-PACs in the United States, though those have proven difficult to enforce in practice. A much smaller example is a rule in some chess tournaments preventing two players from playing many games against each other to try to raise one player’s score. No matter where you look, attempts to prevent undesired coordination in sophisticated institutions are everywhere. In the case of blockchain protocols, the mathematical and economic reasoning behind the safety of the consensus often relies crucially on the uncoordinated choice model, or the assumption that the game consists of many small actors that make decisions independently. If any one actor gets more than 1/3 of the mining power in a proof of work system, they can gain outsized profits by selfish-mining. However, can we really say that the uncoordinated choice model is realistic when 90% of the Bitcoin network’s mining power is well-coordinated enough to show up together at the same conference? Blockchain advocates also make the point that blockchains are more secure to build on because they can’t just change their rules arbitrarily on a whim whenever they want to, but this case would be difficult to defend if the developers of the software and protocol were all working for one company, were part of one family and sat in one room. The whole point is that these systems should not act like self-interested unitary monopolies. Hence, you can certainly make a case that blockchains would be more secure if they were more discoordinated. However, this presents a fundamental paradox. Many communities, including Ethereum’s, are often praised for having a strong community spirit and being able to coordinate quickly on implementing, releasing and activating a hard fork to fix denial-of-service issues in the protocol within six days. But how can we foster and improve this good kind of coordination, but at the same time prevent “bad coordination” that consists of miners trying to screw everyone else over by repeatedly coordinating 51% attacks? There are three ways to answer this: The first approach makes up a large part of the Casper design philosophy. However, it by itself is insufficient, as relying on economics alone fails to deal with the other two categories of concerns about decentralization. The second is difficult to engineer explicitly, especially for the long term, but it does often happen accidentally. For example, the fact that bitcoin’s core developers generally speak English but miners generally speak Chinese can be viewed as a happy accident, as it creates a kind of “bicameral” governance that makes coordination more difficult, with the side benefit of reducing the risk of common mode failure, as the English and Chinese communities will reason at least somewhat separately due to distance and communication difficulties and are therefore less likely to both make the same mistake. The third is a social challenge more than anything else; solutions in this regard may include: This third kind of decentralization, decentralization as undesired-coordination-avoidance, is thus perhaps the most difficult to achieve, and tradeoffs are unavoidable. Perhaps the best solution may be to rely heavily on the one group that is guaranteed to be fairly decentralized: the protocol’s users. -- -- 91 Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title: x.com
Date: Date not available
Content:



x.com


































================================================================================
Title: Celer Network
Date: Date not available
Content:
Celer NetworkHOMEPRODUCTTECHNOLOGYBUILDBLOGCOMMUNITYCAREERBlockchains ConnectedEvery dApp, Every Asset, Every UserFastSecureLow costWhat is CelerCeler is a blockchain interoperability protocol enabling a one-click user experience accessing tokens, DeFi, GameFi, NFTs, governance, and more across multiple chains. Developers can build inter-chain-native dApps using the Celer Inter-chain Messaging SDK to gain access to efficient liquidity utilization, coherent application logic, and shared states. Users of Celer-enabled dApps will enjoy the benefits of a diverse multi-blockchain ecosystem with the simplicity of a single-transaction UX, all from a single chain.Learn More Use Celer Celer IMSimple, secure, and seamless multi-blockchain interoperabilityCeler IM (Inter-chain Messaging framework) fundamentally changes how multi-blockchain dApps are built and used. Instead of deploying multiple isolated copies of smart contracts on different blockchains, developers can build inter-chain-native dApps with efficient liquidity utilization, coherent application logic, and shared states. IM pairs Celer's Message Bus contracts deployed on different chains with the State Guardian Network, a Tendermint-based relayer blockchain, to send a message or invoke a smart contract function cross-chain.Learn more Use Cases  cBridgeFast, secure and low-cost multi-blockchain asset bridgeCeler cBridge is a decentralized and non-custodial asset bridge that supports token transfer across 40+ blockchains and layer-2 rollups. Built on top of the Celer Inter-chain Messaging Framework, cBridge has processed more than $14B cross-chain asset transfer volume for more than 540K unique users, and is quickly growing and expanding into more blockchains and layer-2s.Use APPLearn more List Token  PetiHigh liquidity efficiency, MEV protection, and zero slippagePeti is an omnichain liquidity protocol that provides the smoothest experiences for traders and the best liquidity efficiency for institutional market makers. For traders, it is often expensive, if not impossible, to execute large-size omnichain trades due to the high slippages of AMM pricing combined with limited depth of the liquidity pools of cross-chain bridges. Using Peti, traders now can utilize the “just-in-time” liquidity to execute omnichain trades with zero slippage.Learn more Build on CelerCeler IM SDKBuild exciting inter-chain dApps such as:Cross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceCross-chain yield farmingOne-click one-tx cross-chain swapsMetaverse games that use items from multiple chainsCross-chain state synchronizationCross-chain fee aggregationToken bridgingCross-chain liquidity provision and managementNFT bridgingCross-chain NFT bidding and purchasingCross-chain NFT collateralizationCross-chain governanceSDK Docs Talk to a Builder cBridge SDK Integrate cBridge as part of your application workflowIntegrate cBridge SDK for seamless asset bridging within your dAppEnable your protocol’s token for multi-chain expansionSDK Docs List your token  Chains Supported Tokens SupportedPRODUCTSCeler IMcBridgePetizhanweiBUILDCeler IM SDKcBridge SDKExploreTechnologyBlogCareerzhanweiBug BountyBug Bounty - ImmuneFiBug Bounty - SGN(To Be Launched Soon!)Contact UsProduct SupportcBridge PartnershipCeler IM PartnershipPress InquiriesBrand AssetsCommunityContact: info@celer.networkPrivacyTerms© Copyright 2018-2024 Celer Network.All Rights Reserved
================================================================================
Title: The Block-Chain Keynesian: Why Pushing to Scale bitcoin to be a Coffee Money is Keynesian Central Banking | by Juice | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in Juice Follow -- Listen Share It’s been said by someone, or some, that I don’t understand what the definition of Keynesian is. This is said in regard to the block-size debate and my claim that arbitrarily scaling bitcoin to serve the needs of a goal (p2p coffee money scalable to visa) is Keynesian in nature. This is laughable to ignorant people because they have an understanding of the word Keynesian, that is different than mine, and therefore different than Nash’s. For most people Keynesian refers to some form of monetary policy and inflation targeting. Although I can agree with this definition, I think it needs to be expanded and more specific. Once this is done we can then begin to put the word Keynesian in its proper place, so that I might be allowed to explain what is meant by Block-chain Keynesian. There can be Keynesians Neo-Keynesians New-Keynesians Post-Keynesians. Even the Post-Keynesians are still Keynesians~Lecture, Ideal Money Nash paints a picture for us to understand the future of monetary policy. 20 years ago and until his death he had to do it with existing metaphors and paradigms that people could hope to relate to. The concept of Keynesianism and what makes it up and where it is divided is different for many different people. Nash knows this and so he is very careful: The label “Keynesian” is convenient, but to be safe we should have a defined meaning for this as a party that can be criticized and contrasted with other parties. So let us define “Keynesian” to be descriptive of a “school of thought” that originated at the time of the devaluations of the pound and the dollar in the early 30’s of the 20th century. Then, more specifically, a “Keynesian” would favor the existence of a “manipulative” state establishment of central bank and treasury which would continuously seek to achieve “economics welfare” objectives with comparatively little regard for the long term reputation of the national currency…~Ideal Money Now I think we can begin to understand exactly what Nash wishes to discuss and refute. Nash does not describe a Keynesian as solely having intent to manipulate monetary supply. His definition is broader than this, and with great purpose. Nash’s keywords here are “manipulative” and “economic welfare” (objectives). The sentiments for his definition, arise out of the 30’s etc, but his definition has evolved with it, and we might evolve it further, to understand that one could: …favor the existence of a “manipulative” state establishment of [the block-chain ledger] which would continuously seek to achieve “economics welfare” objectives with comparatively little regard for the long term reputation of [bitcoin]…. I have not yet said this manipulation must be, or mustn’t be, only in relation to supply of the currency. What we must notice is the word “continuously”. To understand Nash’s intent here we can turn to Hayek’s “The Use of Knowledge in Society” and “The Fatal Conceit”. This is where the theme of the dangers central planning comes from, that pervades much of Szabo’s work as well as the bitcoin community’s discussions. Hayek explains: …the sort of knowledge with which I have been concerned is knowledge of the kind which by its nature cannot enter into statistics and therefore cannot be conveyed to any central authority in statistical form. The statistics which such a central authority would have to use would have to be arrived at precisely by abstracting from minor differences between the things, by lumping together, as resources of one kind, items which differ as regards location, quality, and other particulars, in a way which may be very significant for the specific decision. It follows from this that central planning based on statistical information by its nature cannot take direct account of these circumstances of time and place and that the central planner will have to find some way or other in which the decisions depending on them can be left to the “man on the spot.”~Hayek, The Use of Knowledge in Society That is to say for some systems, there can be no forward looking knowledge. The fatal conceit is to try and seek to optimize such a system, in which the knowledge to do so cannot be obtained: Many of the evolved rules which secured greater cooperation and prosperity for the extended order may have differed utterly from anything that could have been anticipated, and might even seem repugnant to someone or other, earlier or later in the evolution of that order. In the extended order, the circumstances determining what each must do to achieve his own ends include, conspicuously, unknown decisions of many other unknown people about what means to use for their own purposes. Hence, at no moment in the process could individuals have designed, according to their purposes, the functions of the rules that gradually did form the order; and only later, and imperfectly and retrospectively, have we been able to begin to explain these formations in principle (see Hayek, 1967, essays 1 and 2)~Hayek, The Fatal Conceit It is of course a lesson only in approaching our problems from the solvable perspectives. In other words to attempt to solve an problem from an unsolvable perspective is ultimately an act of irrationality. Hayek warns that to structure our society on this type irrationally is incredibly destructive-The Fatal Conceit. Subsequent to that time [1997], after consulting with some of the economics faculty at Princeton, I learned of the work and publications of Friedrich von Hayek. I must say that my thinking is apparently quite parallel to his thinking in relation to money and particularly with regard to the non-typical viewpoint in relation to the function of the authorities which in recent times have been the sources of currencies (earlier “coinage”).)~Ideal Money When we put Nash and Hayek’s view together we get a definition for Keynesian that represents players that are interested in a perspective that seeks to optimize a currency by use of foreword looking parameters that cannot be used to properly target the direction of optimization. This “targeting” we can understand also to be “continuous” which means that there is to be a constant readjustment of something in order to hit an arbitrary or non-sensical goal. This is what we mean by “Keynesian”, and now I wish to explain why those that are trying to scale bitcoin to be a coffee money are in fact hidden Keynesians (Block-chain Keynesians). There is a belief that bitcoin must be scaled to a certain transaction capacity in order to compete with, for example, visa. The idea is that bitcoin must achieve a certain wide scale adoption in order for it to be boot-strapped fully. The price must hit a certain level, and there must be enough transaction capacity to meet this demand. Here lies our irrationality: Does anyone claim to know what this demand is? Does anyone claim to know what this capacity NEEDS to be? What should bitcoin compete with in transactions per second in order to stay relevant in 1 year 2 years 5 years 10 years? Who can predict these things? What is the adoption rate and number of users that will satisfy the requirements for bitcoin to not fail? What level must the price hit? Must it continue to rise, or should we expect it to be stable vs….what? Stable vs the USD? Stable vs a basket of currencies? A basket of commodities? Which currencies? Which commodities? What should the block size be today tomorrow 1 month 6 months 1 year 5 years etc in order to maintain bitcoin as a coffee money… These are all questions that Block-chain Keynesians don’t understand show their true colors. Arbitrarily adjusting bitcoin to serve an arbitrary goal is damaging the value of bitcoin in the Gresham/Nashian sense (I explain this in another article). Nobody that read and understood Hayek and Nash is pushing for this. -- -- nononononono Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title: A rollup-centric ethereum roadmap - ethereum-roadmap - Fellowship of Ethereum Magicians
Date: 
                    October 2, 2020,  6:46am
                  
Content:
Last week the Optimism team announced the launch of the first stage of their testnet, and the roadmap to mainnet. They are not the only ones; Fuel is moving toward a testnet and Arbitrum has one. In the land of ZK rollups, Loopring, Zksync and the Starkware-tech-based Deversifi are already live and have users on mainnet. With OMG network’s mainnet beta, plasma is moving forward too. Meanwhile, gas prices on eth1 are climbing to new highs, to the point where some non-financial dapps are being forced to shut down and others are running on testnets. The eth2 roadmap offers scalability, and the earlier phases of eth2 are approaching quickly, but base-layer scalability for applications is only coming as the last major phase of eth2, which is still years away. In a further twist of irony, eth2’s usability as a data availability layer for rollups comes in phase 1, long before eth2 becomes usable for “traditional” layer-1 applications. These facts taken together lead to a particular conclusion: the Ethereum ecosystem is likely to be all-in on rollups (plus some plasma and channels) as a scaling strategy for the near and mid-term future. If we start from this premise, we can see that it leads to some particular conclusions about what the priorities of Ethereum core development and ecosystem development should be, conclusions that are in some cases different from the current path. But what are some of these conclusions? In the short term, one major outcome of this is that Ethereum base-layer scaling would primarily be focused on scaling how much data blocks can hold, and not efficiency of on-chain computation or IO operations. The only determinant of the scalability of a rollup is how much data the chain can hold, and any increase beyond the current ~60 kB/sec will help increase rollups’ scalability further. There are some things that would continue to matter at the base layer: Account abstraction is somewhat less important, because it can be implemented on L2 regardless of whether or not L1 supports it. Other “clever base layer features” also become relatively less important. Eth1 clients could be repurposed as optimistic rollup clients. Optimistic rollups still need to have full nodes, and if the rollup’s internal state transition rules are essentially ethereum-like with a few modifications (as is the goal of eg. Optimism), then existing code could be repurposed to run these full nodes. The work of separating out the consensus engine from the state transition engine is already being done in the context of the eth1+eth2 merge, which can also help with this goal. Note in particular that this implies that projects like TurboGeth are still very important, except it would be high-throughput rollup clients, rather than base-layer eth1 clients, that would benefit the most from them. Currently, users have accounts on L1, ENS names on L1, applications live entirely on L1, etc. All of this is going to have to change. We would need to adapt to a world where users have their primary accounts, balances, assets, etc entirely inside an L2. There are a few things that follow from this: It’s an inescapable fact that a crypto project must be financially sustainable, and in 2020 this means millions or even tens of millions of dollars of funding. Some of this can be covered by common public-good-funding entities such as Gitcoin Grants or the Ethereum Foundation, but the scale of these mechanisms is just not sufficient to cover this level of funding. However, layer 2 projects launching their own token is sufficient - provided, of course, that the token is backed by genuine economic value (ie. prediction of future fees captured by the L2). An important secondary benefit of a rollup-centric roadmap is that it leaves open space for L2 protocols, and these L2 protocols have the ability to collect fees/MEV that can fund development, either directly or indirectly (by backing a token that funds development). The Ethereum base layer has an important need to be credibly neutral, making in-protocol public goods funding difficult (imagine ACD calls trying to agree on who deserves how much money), but L2s having their own public goods funding mechanisms (and/or contributing to Gitcoin Grants) is much less contentious. Leaving open this space can thus be a good strategic move for the long-term economic sustainability of Ethereum as a whole. In addition to the funding issues, the most creative researchers and developers often want to be in a position of great influence on their own little island, and not in a position of little influence arguing with everyone else on the future of the Ethereum protocol as a whole. Furthermore, there are many already existing projects trying to create platforms of various kinds. A rollup-centric roadmap offers a clear opportunity for all of these projects to become part of the Ethereum ecosystem while still maintaining a high degree of local economic and technical autonomy. In addition to these short-term concerns, a rollup-centric roadmap could also imply a re-envisioning of eth2’s long-term future: as a single high-security execution shard that everyone processes, plus a scalable data availability layer. To see why this is the case, consider the following: It seems very plausible to me that when phase 2 finally comes, essentially no one will care about it. Everyone will have already adapted to a rollup-centric world whether we like it or not, and by that point it will be easier to continue down that path than to try to bring everyone back to the base chain for no clear benefit and a 20-100x reduction in scalability. This implies a “phase 1.5 and done” approach to eth2, where the base layer retrenches and focuses on doing a few things well - namely, consensus and data availability. This may actually be a better position for eth2 to be in, because sharding data availability is much safer than sharding EVM computation. While dishonest-majority-proof verification of sharded EVM computation requires fraud proofs, which require a strict and potentially risky two-epoch synchrony assumption, data availability sampling (if done with ZKPs or polynomial commitments) is safe under asynchrony. This will help Ethereum distinguish itself as having a stronger security model than other sharded L2 chains, which are all going in the direction of having sharded execution of some form; eth2 would be the base layer that’s just powerful enough to have functionality escape velocity, and no more powerful. If you are not convinced to go “all the way” on the “phase 1.5 and done” direction, there is a natural compromise path to take: having a small number of execution shards (eg. 4-8) and many more data shards. The goal would be that the number of execution shards would still be low enough that in exceptional situations, regular computers would be able to fully validate all of them, but there would still be considerably more base-layer space than there is today. Base-layer space cannot be minimized too much, as users and applications still need it to eg. move between rollups, submit fraud proofs, submit ZK proofs in ZK rollups, publish root ERC20 token contracts (sure, most users will live in rollups, but the base contract has to live somewhere…), etc. And it would still be a large UX loss if those things cost $140 per transaction. Hence, if necessary, having 4-8 execution shards instead of 1 could provide significant relief. And it would still be possible for one computer to verify all shards; today, verifying eth1 blocks on average takes ~200-500 ms every 13 seconds, so verifying eight threads of such execution for short periods of time is completely feasible. One can imagine clients have policies like “if network latency appears low or committees are >80% full, rely on fraud proofs and committees, under exceptional conditions verify all shards directly”. I’m optimistic about most of this plan, but have some worries. Most of it comes down to how to implement much of this Layer 2 future while still keeping it simple enough for users and beginner devs of the system to not: It’s already pretty complicated for an average person to use Ethereum in the first place, let alone use it consistently without falling for scams. Incorporating different layers with different security guarantees and different requirements will put a lot of pressure on multiple areas of the ecosystem, especially user adoption and usability. I’m not saying we shouldn’t innovate and move forward and change when needed, but we do need to keep some of the things I listed in mind and spend more resources ideating on solutions. Otherwise we are just building Ethereum for the niche tech. people and not for the world. I absolutely agree with this. I do think it’s important to note that at least in the short term, as far as I can tell we have no choice. The L1 is nearly unusable for many classes of applications, and there’s no non-L2 path that can get us to scalability in the short-to-medium term. The $17.76 in fees it took me to make a bet on Augur last week itself makes present-day Augur very much “for the niche people and not for the world”. That said, I think there are ways to minimize the tradeoffs! One major thing that I think we are already doing is to avoid (at least at first) trying to use layer 2s as an opportunity to try to “make a better VM”; instead, we should try to just keep things as close to the current EVM as possible. Also, we should maintain a hard commitment of what security properties a “legitimate layer 2” should have: if you have an asset inside the layer 2, you should be able to follow some procedure to unilaterally withdraw it, even if everyone else in the layer 2 system is trying to cheat you. We should put a lot of resources into security-auditing the major layer 2’s, and making sure they actually satisfy this requirement, and steer people toward the more solid and established solutions. Additionally (perhaps most importantly?), we should work with major wallets (metamask, status, imtoken?) to integrate support for the major L2s. L2s being inside the wallet and wallets being relatively trusted reduces the risk of people putting their coins into “fake L2s”. I expect that a lot of the work will be done by the major defi projects, who have a large incentive to economize on fees and to make sure that their systems continue to be easy to use; we can do a lot by leaning on them as highly motivated early adopters. Even Gitcoin has already helped the ecosystem ease quite a bit into seeing what an L2-centric world will look like. You mentioned a few rollup projects. Most of them are using fraud proofs as their security model (apart from Zksync and Deversifi). There seems to be a lot of excitement around these optimistic constructions, but don’t they suffer from the same drawbacks as Plasma? Shouldn’t ZK rollups be the preferred rollup system? The only drawback I see with ZKRs today is the proof generating complexity for arbitrary computation (or feasibility in the first place) but Matter labs’ Zinc and Starkware’s Cairo look promising. Would love to hear your thoughts on this. I definitely think that ZK rollups are better if possible for the reasons you mention! The challenge with ZK rollups is that at present they’re not capable of supporting general-purpose EVM computation (though that may soon change, see Starkware’s efforts!), so at present we have to work with the optimistic variety. And the optimistic constructions are not that bad IMO; they suffer from some of the drawbacks of plasma, but not all; in particular, unlike plasma, optimistic rollups are easily extensible to generic EVM applications, which makes them much more suited to “scaling ethereum” generally, whereas plasma is only effective for payments, DEX and a few other use cases. I wonder if in the future when ZKRs support general purpose computation, ORs (although less ‘elegant’) will still be the more popular variety. For these reasons: I guess RU centric contract design might be needed especially for minting including contract -  all contracts have to have their “primary” contract in the L1 and secondary (=scalable) contract on the RU. Eg, ERC-20 on the L1 and RU will have each own token issuance limit and those would run parallelly. How can those contract keep consistency when a mint function fired on RU? My hottake is RU-specific ERC-20 (eg, ruDAI) tokens and enabling 1:1 conversion with general ERC-20. Anyway, some investigation of secure RU contract design would be needed. Once ZKRs support full migration from Solidity, it’s game over. No single advantage left to ORs: ZKP generation can be much better decentralized due to its self-verifying nature than OR aggregation. Fraud proof markets are a solution to the problem, they cannot drive adoption once the problem is not relevant anymore. It’s like saying that people won’t stream movies over the Internet because the video rental shops will push against it  I am bullish on ZKRs too but want to see if I can make a case for OR’s relevance once ZKRs for general computation is a reality More explicitly standardize on Yul or something similar as an intermediate compiling language . Ethereum’s base-layer EVM and the OVM used in the Optimism rollup are slightly different compiling targets, but both can be compiled to from Solidity. To allow an ecosystem with different compiling targets, but at the same time avoid a Solidity monoculture and admit multiple languages, it may make sense to more explicitly standardize on something like Yul as an intermediate language that all HLLs would compile to, and which can be compiled into EVM or OVM. We could also consider a more explicitly formal-verification-friendly intermediate language that deals with concepts like variables and ensures basic invariants, making formal verification easier for any HLLs that compile to it. We (the Solidity team) had a discussion with the Optimisim team a few months ago, when they still had their Javascript/Typescript based transcompiler (which tried to identify functions based on the Solidity EVM output). We agreed that using Yul is a better direction,  and our estimate for “feature completeness” of the Solidity to Yul step (“Yul IR”) was the end of this year. The compiler progressed pretty well and a lot of well known contracts can be compiled to Yul now (such as Uniswap, Gnosis Safe, etc.) I did not know there was a deadline for launch though, and obviously the Yul IR work is planned to take longer. Besides that, we were lately talking about this exact topic you raise, to consider the requirements of layer 2 systems when designing the Solidity language. We are in the process of discussing a standard library and some ideas regarding dialects, which would definitely be helpful. When the gas prices were close to 1000 gwei and given how Eth1x/Eth2 is progressing, I was rather worried that contracts become more like “system contracts” and every “user contract” moves to layer 2 – which means a shrinking user base for Solidity if we don’t support layer 2 systems. Very interesting trade-offs! I have made a claim about this proposal on The Ether, which allows for signalling of if you are for the more roll-up centric road-map or against the more roll-up centric roadmap. Additionally, it will allow you to see the top arguments on the for and against side. I did my best to summarize the core points of @vbuterin and @souptacular discussion so far, but feel free to write your own arguments that are better than mine in order to flesh out the trade-offs Claim by MC Masher in Core Developer community; For 0, Against 1 How could you reach 100x advantage vs optimistic rollup? For optimistic zk rollup we need to publish 2 nullifiers and 2 new utxos per transaction and one proof (2 compressed g1 and one g2 point). This is 20*2+20*2+4*32=208 bytes per tx, published onchain. Also, to keep the rollup working we should publish anywhere encrypted messages from users. A simple note is (amount, owner, salt), we should publish at least one note and ephemeral public key per tx. So, it is about 100 bytes and this cost should be the same for both zk and optimistic constructions. I would like to throw EIP-726 in the mix of protocol changes that would really help facilitate ORUs  You are a product of your own inability to take action against ASICs for almost 3 years now. They have increased network security costs so high that none of the GPU community was healthy enough to voluntarily take a cut in fees due to them finally getting to break even. Very simple, remove ASICs from the network and you will have a very robust GPU mining community that has the ability to trim it’s belts in times of need to bolster the community. Remove ASICs and bring back solid GPU mining to Ethereum and you would be suprised what we will do in return as some of the largest HODLrs. A zk zk rollup can go down to just publishing the nullifiers and utxos, and you can get the nullifiers down to 10 bytes as you don’t need collision resistance, so that’s 60 bytes (assuming an 80 bit security margin as you appear to be). Besides: Of course, you could aggregate the proofs for many transactions in the block without checking them on-chain, but this construction would not be an optimistic rollup—it would be a ZK rollup with optimistic verification: combining the worst of both worlds. You compare optimistic rollup with proving system, developed for zk rollup (in proving single transactions case) with zk zk rollups. As you mentioned, the proof size will be some kilobytes. When for groth16 in optimistic rollup it’s 128 bytes per tx. Ok. Optimistic rollup is ~5x worse with Groth16, ~100x worse with anything without an app-specific trusted setup. We’ll let the reader make conclusions. Btw, is there any community approved methods to store off-chain data for private transactions (like encrypted utxo)? If both user and data storage forget the data, assets will be stuck. Also, if data storage forgets the data and the user could not send it directly to the receiver, assets will be stuck too. Ok. Optimistic rollup is ~5x worse with Groth16, ~100x worse with anything without an app-specific trusted setup. We’ll let the reader make conclusions. Wait, why 100x worse? PLONK proofs are only around 500 bytes, no? Powered by Discourse, best viewed with JavaScript enabled
================================================================================
Title:  Economics 
Date: Date not available
Content:





















Dark Mode Toggle








 Economics 

 Economics 

Blockchains
Cryptography
Economics
Fun
General
Gitcoin
Math
Philosophy
Translations




2024 Aug 21

Plurality philosophy in an incredibly oversized nutshell



2023 Aug 16

What do I think about Community Notes?



2022 Oct 28

The Revenue-Evil Curve: a different way to think about prioritizing public goods funding



2022 Sep 09

Should there be demand-based recurring fees on ENS domains?



2022 May 25

Two thought experiments to evaluate automated stablecoins



2021 Nov 16

Review of Optimism retro funding round 1



2021 Oct 31

Crypto Cities



2021 Sep 26

On Nathan Schneider on the limits of cryptoeconomics



2021 Aug 22

Alternatives to selling at below-market-clearing prices for achieving fairness (or community sentiment, or fun)



2021 Jul 29

Against overuse of the Gini coefficient



2021 Mar 23

The Most Important Scarce Resource is Legitimacy



2021 Feb 18

Prediction Markets: Tales from the Election



2020 Sep 11

Coordination, Good and Bad



2019 Dec 07

Quadratic Payments: A Primer



2019 Nov 22

Hard Problems in Cryptocurrency: Five Years Later



2019 Apr 03

On Collusion



2018 Apr 20

On Radical Markets



2018 Mar 28

Governance, Part 2: Plutocracy Is Still Bad



2017 Oct 17

On Medium-of-Exchange Token Valuations



2017 Jul 27

A Note on Metcalfe's Law, Externalities and Ecosystem Splits



2017 Jun 22

On Path Independence



2017 Jun 09

Analyzing Token Sale Models



2017 Mar 11

A Note On Charity Through Marginal Price Discrimination


 
================================================================================
Title: Coronavirus (COVID-19) Vaccinations - Our World in Data
Date: Date not available
Content:
Our vaccination dataset uses the most recent official numbers from governments and health ministries worldwide. Population estimates for per-capita metrics are based on the United Nations World Population Prospects. Income groups are based on the World Bank classification. A full list of our country-specific sources is available at the bottom of this page, and we also answer frequently-asked questions there. → Open the Data Explorer in a new tab. Select a group of countries at once: all European countries, 30 largest countries; European Union; Americas; OECD. To bring this pandemic to an end, a large share of the world needs to be immune to the virus. The safest way to achieve this is with a vaccine. Vaccines are a technology that humanity has often relied on in the past to bring down the death toll of infectious diseases. Within less than 12 months after the beginning of the pandemic, several research teams rose to the challenge and developed vaccines that protect from SARS-CoV-2. Now the challenge is to make these vaccines available to people around the world. It will be key that people in all countries — not just in rich countries — receive the required protection. To track this effort we at Our World in Data are building the international vaccination dataset that we make available on this page. It is updated each morning, with the most recent official numbers up to the previous day. This page has a number of charts on vaccination. In the box below you can select any country you are interested in — or several if you want to compare countries. All charts on this page will then show data for the countries that you selected. The following charts show the breakdown of people vaccinated, between those who have received only their first vaccine dose, and those who have completed the initial vaccination protocol (2 doses for most vaccines, 1 or 3 for a few manufacturers). The following map and chart show the number of vaccine doses administered per 100 people within a given population. All doses, including boosters, are counted individually. The following chart shows, for each date, the total number of vaccine doses administered in the 12 months preceding that date. This is given per 100 people in the population. All doses, including boosters, are counted individually. The following chart shows the share of the total population that has received at least one dose of vaccine. This may not equal the share with a complete initial protocol if the vaccine requires two doses. If a person receives the first dose of a 2-dose vaccine, this metric goes up by 1. If they receive the second dose, the metric stays the same. The following chart shows the total number of people that have received at least one dose of the COVID-19 vaccine. This may not equal the number with a complete initial protocol if the vaccine requires two doses. If a person receives the first dose of a 2-dose vaccine, this metric goes up by 1. If they receive the second dose, the metric stays the same. The following chart shows the share of the total population that has completed the initial vaccination protocol. If a person receives the first dose of a 2-dose vaccine, this metric stays the same. If they receive the second dose, the metric goes up by 1. The following chart shows the total number of people that have completed the initial vaccination protocol. If a person receives the first dose of a 2-dose vaccine, this metric stays the same. If they receive the second dose, the metric goes up by 1. The following charts show the number of booster doses administered. Booster doses are doses administered beyond those prescribed by the original vaccination protocol — for example, a third dose of Pfizer/BioNTech vaccine, or a second dose of Johnson & Johnson vaccine. The following charts provide data on the share of people that have been vaccinated against by age group. This is provided as three metrics: the share that has received at least one dose; the share that has completed the initial protocol; and the share that is only partially vaccinated. This data is only available for countries that report the breakdown of doses administered by first and second doses by age. The following chart shows the share of the population in each age group that has received at least one dose. This metric includes those that are partly vaccinated or have completed the initial protocol. The following chart shows the share of the population in each age group that has completed the initial protocol. The following chart shows the share of the population in each age group that has received a booster dose. The following chart shows the cumulative number of doses administered, broken down by vaccine manufacturer. This is only available for a select number of countries that report the necessary data. The following chart shows the daily number of doses administered per 100 people. This is shown as the rolling seven-day average. Note that this is counted as a single dose, and may not equal the total number of people vaccinated, depending on the specific dose regime (e.g. people receive multiple doses). How many vaccinations are administered each day (not population-adjusted)? These charts show the cumulative number of doses donated to the COVAX initiative by different countries, broken down by whether the donations have only been announced, actually donated, or delivered to the recipients. This is only available for a select number of countries for which the COVID-19 Task Force reports the necessary data. The first chart shows the number of doses donated, while the next three charts show that number adjusted for: COVAX is a worldwide initiative aimed at equitable access to COVID-19 vaccines directed by Gavi, the Vaccine Alliance, the Coalition for Epidemic Preparedness Innovations (CEPI), and the World Health Organization (WHO). COVAX coordinates international resources to enable low-to-middle-income countries equitable access to COVID-19 tests, therapies, and vaccines. This interactive chart maps government policies on COVID-19 vaccination. Note that only policies on the availability of vaccinations are tracked. It does not track the number of people who have been vaccinated. Countries are grouped into six categories: This data on vaccination policies is sourced from the Oxford Coronavirus Government Response Tracker (OxCGRT).  This resource is published by researchers at the Blavatnik School of Government at the University of Oxford: Thomas Hale, Anna Petherik, Beatriz Kira, Noam Angrist, Toby Phillips and Samuel Webster. The tracker presents data collected from public sources by a team of over one hundred Oxford University students and staff from every part of the world. The data presented here is taken directly from the OxCGRT project; we at Our World in Data don’t track policy responses ourselves and we don’t make additions to the tracker’s dataset. These charts are regularly updated based on the latest version of the response tracker. OxCGRT is an ongoing collation project of live data. If you see any inaccuracies in the underlying data, or for specific feedback on the analysis or another aspect of the project please contact OxCGRT team. See the tracker’s notes and guidance on data quality. The Imperial College London YouGov Covid-19 Behaviour Tracker Data Hub has gathered global insights on people’s behaviors in response to COVID-19 throughout the pandemic. This survey covers public behaviors and attitudes ranging from mask-wearing to self-isolation, social distancing, symptoms and testing. Their dataset on attitudes to vaccination extended from January 2021 until March 2022. You can explore the change in attitudes across countries over time here: In some cases, the vaccination figures on this page can look different from the ones reported by governments. Most often it is not because of the numerator (number of people vaccinated) but instead because of the denominator (number of people in the population). This usually happens for two main reasons: The population estimates we use come from the United Nations World Population Prospects. We use this data for its reliability, its consistent methods, and because it makes our work much easier. The exact values can be viewed in our GitHub repository. The United Nations estimates may not always reflect the latest censuses or national figures—but there are several reasons why we use this data over country-by-country national population estimates. For all these reasons, the UN data is the best solution to bring accurate per-capita metrics to our COVID data. In a few cases, we use other sources when the figures provided by the UN differ substantially from reliable and more recent national estimates. The population estimates we use to calculate per-capita metrics are all based on the last revision of the United Nations World Population Prospects. In a few cases, we use other sources when the figures provided by the UN differ substantially from reliable and more recent national estimates. Additionally, it’s important to bear in mind that in some territories, vaccination coverage may include non-residents (such as tourists and foreign workers). For these reasons, per-capita metrics may sometimes exceed 100%. In our data, people with a complete initial protocol are those who have received all doses prescribed by their vaccination regimen (e.g. 2 doses for Pfizer/BioNTech, Moderna, Oxford/AstraZeneca, etc. and 1 dose for Johnson & Johnson, CanSino, etc.). Some countries also allow for alternative definitions, such as having been infected with SARS-CoV-2 in the past and having received 1 dose of a two-dose regimen. We currently ignore these alternative definitions to preserve the common definition of a complete protocol, i.e. all doses required in the vaccine regimen. This allows for optimal comparability between countries. The income groups we use come from the World Bank income classification. The exact list of countries can be viewed in our GitHub repository. Due to the limited space on our charts and the number of countries in the world, unfortunately, we cannot show every country in the world by default. On each chart of this page, therefore we choose a default selection of countries based on a mix of criteria: mainly total population, but also the number of doses administered and share of the population vaccinated. These lists are updated about once a month. We do not include participants in the vaccine arm of clinical trials, as this data is not available for many of the hundreds of trials currently taking place. In our dataset and charts on COVID-19 vaccinations, we report vaccinations performed in Israel and Palestine separately. The vaccination data is needed to understand how the pandemic is evolving. For this, it is key to bring together the vaccination data with data on COVID-19 cases and COVID-19 deaths. Global health institutions that report on the pandemic are reporting these metrics separately:  Reporting the data for Palestine and Israel separately also allows us to show their respective reported vaccination levels. It makes clear what the respective vaccination levels are, as reported by the Government of Israel and the Palestinian Ministry of Health. Finally, our dataset on COVID-19 vaccinations is sourced from official data published by governments and ministries of health from countries around the world. This is also the case for Israel and Palestine. We show figures for Palestine and Israel separately, as they are reported separately by the Government of Israel and the Palestinian Ministry of Health.  The Populations Division of the United Nations reports population figures for countries around the world, and we are relying on their latest data (from their 2019 revision) for countries around the world of. They report a population of 8,655,541 people for Israel and a population of 5,101,416 people for Palestine. The resulting shares of people vaccinated in Israel and Palestine can be seen in our COVID-19 Data Explorer. You can download the full dataset alongside the detailed sources on GitHub. → If you want to keep up-to-date with our work on COVID-19, and the many other topics we cover you can sign up for our newsletter. Research and data: Hannah Ritchie, Esteban Ortiz-Ospina, Diana Beltekian, Edouard Mathieu, Joe Hasell, Bobbie Macdonald, Charlie Giattino, Cameron Appel, Lucas Rodés-Guirao and Max RoserWeb development: Ernst van Woerden, Daniel Gavrilov, Matthieu Bergel, Jason Crawford, and Marcel Gerber Our articles and data visualizations rely on work from many different people and organizations. When citing this topic page, please also cite the underlying data sources. This topic page can be cited as: BibTeX citation All visualizations, data, and code produced by Our World in Data are completely open access under the Creative Commons BY license. You have the permission to use, distribute, and reproduce these in any medium, provided the source and authors are credited. The data produced by third parties and made available by Our World in Data is subject to the license terms from the original third-party authors. We will always indicate the original source of the data in our documentation, so you should always check the license of any such third-party data before use and redistribution. All of our charts can be embedded in any site. Our World in Data is free and accessible for everyone. Help us do this work by making a donation. Licenses: All visualizations, data, and articles produced by Our World in Data are open access under the Creative Commons BY license. You have permission to use, distribute, and reproduce these in any medium, provided the source and authors are credited. All the software and code that we write is open source and made available via GitHub under the permissive MIT license. All other material, including data produced by third parties and made available by Our World in Data, is subject to the license terms from the original third-party authors. Please consult our full legal disclaimer. Our World In Data is a project of the Global Change Data Lab, a registered charity in England and Wales (Charity Number 1186433).
================================================================================
Title: GitHub - paradigmxyz/reth: Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust
Date: Date not available
Content:
We read every piece of feedback, and take your input very seriously. 
            To see all available qualifiers, see our documentation.
           
        Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust
       

 Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol  Install
| User Book
| Developer Docs
| Crate Docs Reth (short for Rust Ethereum, pronunciation) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the Engine API. It is originally built and driven forward by Paradigm, and is licensed under the Apache and MIT licenses. As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software. More concretely, our goals are: Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities. More historical context below: We do not have any breaking database changes since beta.1, and do not plan any in the near future. Reth v0.2.0-beta.1 includes
a set of breaking database changes that makes it impossible to use database files produced by earlier versions. If you had a database produced by alpha versions of Reth, you need to drop it with reth db drop
(using the same arguments such as --config or --datadir that you passed to reth node), and resync using the same reth node command you've used before. See the Reth Book for instructions on how to install and run Reth. You can use individual crates of reth in your project. The crate docs can be found here. For a general overview of the crates, see Project Layout. If you want to contribute, or follow along with contributor discussion, you can use our main telegram to chat with us about the development of Reth! The Minimum Supported Rust Version (MSRV) of this project is 1.81.0. See the book for detailed instructions on how to build from source. To fully test Reth, you will need to have Geth installed, but it is possible to run a subset of tests without Geth. First, clone the repository: Next, run the tests: We recommend using cargo nextest to speed up testing. With nextest installed, simply substitute cargo test with cargo nextest run. Note Some tests use random number generators to generate test data. If you want to use a deterministic seed, you can set the SEED environment variable. If you have any questions, first see if the answer to your question can be found in the book. If the answer is not there: See SECURITY.md. Reth is a new implementation of the Ethereum protocol. In the process of developing the node we investigated the design decisions other nodes have made to understand what is done well, what is not, and where we can improve the status quo. None of this would have been possible without them, so big shoutout to the teams below: The NippyJar and Compact encoding formats and their implementations are designed for storing and retrieving data internally. They are not hardened to safely read potentially malicious data. 
        Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol, in Rust
      
================================================================================
Title: Nodes and clients | ethereum.org
Date: Date not available
Content:
Last edit: @wackerow(opens in a new tab), September 29, 2024 Ethereum is a distributed network of computers (known as nodes) running software that can verify blocks and transaction data. The software must be run on your computer to turn it into an Ethereum node. There are two separate pieces of software (known as 'clients') required to form a node. You should understand the concept of a peer-to-peer network and the basics of the EVM before diving deeper and running your own instance of an Ethereum client. Take a look at our introduction to Ethereum. If you're new to the topic of nodes, we recommend first checking out our user-friendly introduction on running an Ethereum node. A "node" is any instance of Ethereum client software that is connected to other computers also running Ethereum software, forming a network. A client is an implementation of Ethereum that verifies data against the protocol rules and keeps the network secure. A node has to run two clients: a consensus client and an execution client. These clients work together to keep track of the head of the Ethereum chain and allow users to interact with the Ethereum network. The modular design with multiple pieces of software working together is called encapsulated complexity(opens in a new tab). This approach made it easier to execute The Merge seamlessly, makes client software easier to maintain and develop, and enables the reuse of individual clients, for example, in the layer 2 ecosystem. 
Simplified diagram of a coupled execution and consensus client. Both execution clients and consensus clients exist in a variety of programming languages developed by different teams. Multiple client implementations can make the network stronger by reducing its dependency on a single codebase. The ideal goal is to achieve diversity without any client dominating the network, thereby eliminating a potential single point of failure.
The variety of languages also invites a broader developer community and allows them to create integrations in their preferred language. Learn more about client diversity. What these implementations have in common is they all follow a single specification. Specifications dictate how the Ethereum network and blockchain functions. Every technical detail is defined and specifications can be found as: Multiple trackers offer a real-time overview of nodes in the Ethereum network. Note that due to the nature of decentralized networks, these crawlers can only provide a limited view of the network and might report different results. If you want to run your own node, you should understand that there are different types of node that consume data differently. In fact, clients can run three different types of nodes: light, full and archive. There are also options of different sync strategies which enable faster synchronization time. Synchronization refers to how quickly it can get the most up-to-date information on Ethereum's state. Full nodes do a block-by-block validation of the blockchain, including downloading and verifying the block body and state data for each block. There are different classes of full node - some start from the genesis block and verify every single block in the entire history of the blockchain. Others start their verification at a more recent block that they trust to be valid (e.g. Geth's 'snap sync'). Regardless of where the verification starts, full nodes only keep a local copy of relatively recent data (typically the most recent 128 blocks), allowing older data to be deleted to save disk space. Older data can be regenerated when it is needed. Archive nodes are full nodes that verify every block from genesis and never delete any of the downloaded data. Syncing clients in any mode other than archive will result in pruned blockchain data. This means, there is no archive of all historical states but the full node is able to build them on demand. Learn more about Archive nodes. Instead of downloading every block, light nodes only download block headers. These headers contain summary information about the contents of the blocks. Any other information the light node requires gets requested from a full node. The light node can then independently verify the data they receive against the state roots in the block headers. Light nodes enable users to participate in the Ethereum network without the powerful hardware or high bandwidth required to run full nodes. Eventually, light nodes might run on mobile phones or embedded devices. The light nodes do not participate in consensus (i.e. they cannot be miners/validators), but they can access the Ethereum blockchain with the same functionality and security guarantees as a full node. Light clients are an area of active development for Ethereum and we expect to see new light clients for the consensus layer and execution layer soon.
There are also potential routes to providing light client data over the gossip network(opens in a new tab). This is advantageous because the gossip network could support a network of light nodes without requiring full nodes to serve requests. Ethereum does not support a large population of light nodes yet, but light node support is an area expected to develop rapidly in the near future. In particular, clients like Nimbus(opens in a new tab), Helios(opens in a new tab), and LodeStar(opens in a new tab) are currently heavily focused on light nodes. Running a node allows you to directly, trustlessly and privately use Ethereum while supporting the network by keeping it more robust and decentralized. Running your own node enables you to use Ethereum in a private, self-sufficient and trustless manner. You don't need to trust the network because you can verify the data yourself with your client. "Don't trust, verify" is a popular blockchain mantra.  A diverse set of nodes is important for Ethereum’s health, security and operational resiliency. If you run a full node, the whole Ethereum network benefits from it, even if you don't run a validator. Interested in running your own Ethereum client? For a beginner-friendly introduction visit our run a node page to learn more. If you're more of a technical user, dive into more details and options on how to spin up your own node. Setting up your own node can cost you time and resources but you don’t always need to run your own instance. In this case, you can use a third party API provider. For an overview of using these services, check out nodes as a service. If somebody runs an Ethereum node with a public API in your community, you can point your wallets to a community node via Custom RPC and gain more privacy than with some random trusted third party. On the other hand, if you run a client, you can share it with your friends who might need it. The Ethereum community maintains multiple open-source execution clients (previously known as 'Eth1 clients', or just 'Ethereum clients'), developed by different teams using different programming languages. This makes the network stronger and more diverse. The ideal goal is to achieve diversity without any client dominating to reduce any single points of failure. This table summarizes the different clients. All of them pass client tests(opens in a new tab) and are actively maintained to stay updated with network upgrades. For more on supported networks, read up on Ethereum networks. Each client has unique use cases and advantages, so you should choose one based on your own preferences. Diversity allows implementations to be focused on different features and user audiences. You may want to choose a client based on features, support, programming language, or licences. Hyperledger Besu is an enterprise-grade Ethereum client for public and permissioned networks. It runs all of the Ethereum Mainnet features, from tracing to GraphQL, has extensive monitoring and is supported by ConsenSys, both in open community channels and through commercial SLAs for enterprises. It is written in Java and is Apache 2.0 licensed. Besu's extensive documentation(opens in a new tab) will guide you through all details on its features and setups. Erigon, formerly known as Turbo‐Geth, started as a fork of Go Ethereum oriented toward speed and disk‐space efficiency. Erigon is a completely re-architected implementation of Ethereum, currently written in Go but with implementations in other languages under development. Erigon's goal is to provide a faster, more modular, and more optimized implementation of Ethereum. It can perform a full archive node sync using around 2TB of disk space, in under 3 days. Go Ethereum (Geth for short) is one of the original implementations of the Ethereum protocol. Currently, it is the most widespread client with the biggest user base and variety of tooling for users and developers. It is written in Go, fully open source and licensed under the GNU LGPL v3. Learn more about Geth in its documentation(opens in a new tab). Nethermind is an Ethereum implementation created with the C# .NET tech stack, licensed with LGPL-3.0, running on all major platforms including ARM. It offers great performance with: Nethermind also has detailed documentation(opens in a new tab), strong dev support, an online community and 24/7 support available for premium users. Reth (short for Rust Ethereum) is an Ethereum full node implementation that is focused on being user-friendly, highly modular, fast and efficient. Reth was originally built and driven forward by Paradigm, and is licensed under the Apache and MIT licenses. Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. Performs well in use cases where high performance with great margins is required such as RPC, MEV, indexing, simulations, and P2P activities. Learn more by checking out the Reth Book(opens in a new tab), or the Reth GitHub repo(opens in a new tab). These clients are still in earlier stages of development and are not yet recommended for production use. The EthereumJS Execution Client (EthereumJS) is written in TypeScript and composed of a number of packages, including core Ethereum primitives represented by the Block, Transaction, and Merkle-Patricia Trie classes and core client components including an implementation of the Ethereum Virtual Machine (EVM), a blockchain class, and the DevP2P networking stack. Learn more about it by reading its documentation(opens in a new tab) There are multiple consensus clients (previously known as 'Eth2' clients) to support the consensus upgrades. They are responsible for all consensus-related logic including the fork-choice algorithm, processing attestations and managing proof-of-stake rewards and penalties. Lighthouse is a consensus client implementation written in Rust under the Apache-2.0 license. It is maintained by Sigma Prime and has been stable and production-ready since Beacon Chain genesis. It is relied upon by various enterprises, staking pools and individuals. It aims to be secure, performant and interoperable in a wide range of environments, from desktop PCs to sophisticated automated deployments. Documentation can be found in Lighthouse Book(opens in a new tab) Lodestar is a production-ready consensus client implementation written in Typescript under the LGPL-3.0 license. It is maintained by ChainSafe Systems and is the newest of the consensus clients for solo-stakers, developers and researchers. Lodestar consists of a beacon node and validator client powered by JavaScript implementations of Ethereum protocols. Lodestar aims to improve Ethereum usability with light clients, expand accessibility to a larger group of developers and further contribute to ecosystem diversity. More information can be found on our Lodestar website(opens in a new tab) Nimbus is a consensus client implementation written in Nim under the Apache-2.0 license. It is a production-ready client in use by solo-stakers and staking pools. Nimbus is designed for resource efficiency, making it easy to run on resource-restricted devices and enterprise infrastructure with equal ease, without compromising stability or reward performance. A lighter resource footprint means the client has a greater margin of safety when the network is under stress. Learn more in Nimbus docs(opens in a new tab) Prysm is a full-featured, open source consensus client written in Go under the GPL-3.0 license. It features an optional webapp UI and prioritizes user experience, documentation, and configurability for both stake-at-home and institutional users. Visit Prysm docs(opens in a new tab) to learn more. Teku is one of the original Beacon Chain genesis clients. Alongside the usual goals (security, robustness, stability, usability, performance), Teku specifically aims to comply fully with all the various consensus client standards. Teku offers very flexible deployment options. The beacon node and validator client can be run together as a single process, which is extremely convenient for solo stakers, or nodes can be run separately for sophisticated staking operations. In addition, Teku is fully interoperable with Web3Signer(opens in a new tab) for signing key security and slashing protection. Teku is written in Java and is Apache 2.0 licensed. It is developed by the Protocols team at ConsenSys that is also responsible for Besu and Web3Signer. Learn more in Teku docs(opens in a new tab). Grandine is a consensus client implementation, written in Rust under the GPL-3.0 license. It is maintained by the Grandine Core Team and is fast, high-performance and lightweight. It fits a wide range of stakers from solo stakers running on low-resource devices such as Raspberry Pi to large institutional stakers running tens of thousands of validators. Documentation can be found in the Grandine Book(opens in a new tab) To follow and verify current data in the network, the Ethereum client needs to sync with the latest network state. This is done by downloading data from peers, cryptographically verifying their integrity, and building a local blockchain database. Synchronization modes represent different approaches to this process with various trade-offs. Clients also vary in their implementation of sync algorithms. Always refer to the official documentation of your chosen client for specifics on implementation. The execution layer may be run in different modes to suit different use cases, from re-executing the blockchain's world state to only syncing with the tip of the chain from a trusted checkpoint. A full sync downloads all blocks (including headers and block bodies) and regenerates the state of the blockchain incrementally by executing every block from genesis. Archive nodes perform a full sync to build (and retain) a complete history of the state changes made by every transaction in every block. Like a full sync, a fast sync downloads all blocks (including headers, transactions, and receipts). However, instead of re-processing the historical transactions, a fast sync relies on the receipts until it reaches a recent head, when it switches to importing and processing blocks to provide a full node. Snap syncs also verify the chain block-by-block. However, instead of starting at the genesis block, a snap sync starts at a more recent 'trusted' checkpoint that is known to be part of the true blockchain. The node saves periodic checkpoints while deleting data older than a certain age. These snapshots are used to regenerate state data as needed, rather than storing it forever. More on snap sync(opens in a new tab). Light client mode downloads all block headers, block data, and verifies some randomly. Only syncs tip of the chain from the trusted checkpoint. NB Light sync does not yet work with proof-of-stake Ethereum - new versions of light sync should ship soon! More on light clients Optimistic sync is a post-merge synchronization strategy designed to be opt-in and backwards compatible, allowing execution nodes to sync via established methods. The execution engine can optimistically import beacon blocks without fully verifying them, find the latest head, and then start syncing the chain with the above methods. Then, after the execution client has caught up, it will inform the consensus client of the validity of the transactions in the Beacon Chain. More on optimistic sync(opens in a new tab) A checkpoint sync, also known as weak subjectivity sync, creates a superior user experience for syncing a Beacon Node. It's based on assumptions of weak subjectivity which enables syncing the Beacon Chain from a recent weak subjectivity checkpoint instead of genesis. Checkpoint syncs make the initial sync time significantly faster with similar trust assumptions as syncing from . In practice, this means your node connects to a remote service to download recent finalized states and continues verifying data from that point. The third party providing the data is trusted and should be picked carefully. More on checkpoint sync(opens in a new tab) Previous Next Website last updated: October 2, 2024
================================================================================
Title: Finance worker pays out $25 million after video call with deepfake ‘chief financial officer’ | CNN
Date: Date not available
Content:

            A finance worker at a multinational firm was tricked into paying out $25 million to fraudsters using deepfake technology to pose as the company’s chief financial officer in a video conference call, according to Hong Kong police.
     
            The elaborate scam saw the worker duped into attending a video call with what he thought were several other members of staff, but all of whom were in fact deepfake recreations, Hong Kong police said at a briefing on Friday.
     
            “(In the) multi-person video conference, it turns out that everyone [he saw] was fake,”  senior superintendent Baron Chan Shun-ching told the city’s public broadcaster RTHK.
     
            Chan said the worker had grown suspicious after he received a message that was purportedly from the company’s UK-based chief financial officer. Initially, the worker suspected it was a phishing email, as it talked of the need for a secret transaction to be carried out.
     
            However, the worker put aside his early doubts after the video call because other people in attendance had looked and sounded just like colleagues he recognized, Chan said.
     
            Believing everyone else on the call was real, the worker agreed to remit a total of $200 million Hong Kong dollars – about $25.6 million, the police officer added.
     
            The case is one of several recent episodes in which fraudsters are believed to have used deepfake technology to modify publicly available video and other footage to cheat people out of money.
     
            At the press briefing Friday, Hong Kong police said they had made six arrests in connection with such scams.
     
            Chan said that eight stolen Hong Kong identity cards – all of which had been reported as lost by their owners – were used to make 90 loan applications and 54 bank account registrations between July and September last year.
     
            On at least 20 occasions, AI deepfakes had been used to trick facial recognition programs by imitating the people pictured on the identity cards, according to police.
     
            The scam involving the fake CFO was only discovered when the employee later checked with the corporation’s head office.
     
Related article
The deepfake era of US politics is upon us
 
            Hong Kong police did not reveal the name or details of the company or the worker.
     
            Authorities across the world are growing increasingly concerned at the sophistication of deepfake technology and the nefarious uses it can be put to.
     
            At the end of January, pornographic, AI-generated images of the American pop star Taylor Swift spread across social media, underscoring the damaging potential posed by artificial intelligence technology.
     
            The photos - which show the singer in sexually suggestive and explicit positions - were viewed tens of millions of times before being removed from social platforms.
     © 2024 Cable News Network. A Warner Bros. Discovery Company. All Rights Reserved.  CNN Sans ™ & © 2016 Cable News Network.
================================================================================
Title: Arbitrum — The Future of Ethereum
Date: Date not available
Content:
Designed with you in mind, Arbitrum is the leading Layer 2 technology that empowers you to explore and build in the largest Layer 1 ecosystem, Ethereum. Arbitrum Nitro Stack Take it to the next layer with Nitro. Making Ethereum more inclusive and sustainable, Nitro is the most advanced blockchain scaling technology in the industry. The Arbitrum Nitro Stack is designed to boost throughput, lower transaction costs, and achieve compatibility with Ethereum, all while upholding Arbitrum’s security standards. Nitro exists in two different variants, Arbitrum Rollup and Arbitrum AnyTrust. The technical stack powering all Arbitrum products. Launch your own chain into Arbitrum Orbit — an interconnected universe of customizable chains that settle to Arbitrum One or Nova. Scale your decentralized applications with a fraction of the fees, while still leveraging Ethereum's security. Power the next generation of apps with an AnyTrust chain — the high-security solution for gaming and social projects that call for ultra-low transaction fees. Arbitrum News The latest news coverage, podcast episodes, upcoming events, and more. Coinspeaker - Arbitrum One Outshines Other L2 after Exceeding 1B Transactions Cointelegraph - Arbitrum Stylus mainnet launch opens Web3 for traditional coders Venturebeat - Ubisoft teams up with Web3’s Arbitrum and Sequence on Captain Laserhawk: the G.A.M.E. The Block - Arbitrum Foundation funds crypto-related film for Oscar-winning producer Cryptopolitan – The Long Road to Crypto Glory: Arbitrum’s Untold Story Forbes - Crypto CEO Says That Competing With Ethereum Is A Bad Idea TechCrunch - Arbitrum co-founders see opportunity for continued layer 2 growth through DeFi, gaming Our Products With a powerful suite of Layer 2 scaling solutions,  Arbitrum is shaping the future of Ethereum. Arbitrum technology makes it possible for projects to leverage Ethereum's security to build next-gen apps. Arbitrum's market-leading rollup technology uses  fraud proofs to leverage Ethereum's security and  reduce transaction fees by an order of magnitude,  making scalability possible. Designed for apps that require low transaction  costs, AnyTrust chains rely on a Data Availability Committee that settles on Ethereum, making  secure web3 gaming and social finally possible. Orbit chains are fully permissionless, with dedicated throughput, increased gas fee reliability, and more. Launch your own Orbit chain now. Deploy apps to Arbitrum chains using your favorite programming languages including Rust, C, and C++, while staying fully interoperable with the Ethereum Virtual Machine. Community Values By the Numbers The numbers don't lie — Arbitrum chains lead the industry thanks to the talented and passionate community. 3.19M ETH Saved UpdatedOctober 3, 2024 1.32M Active Wallets UpdatedOctober 3, 2024 $12.96B Total Value Locked UpdatedOctober 3, 2024 37.36% L2 Market Share UpdatedOctober 3, 2024 1.3B Total Transactions UpdatedOctober 3, 2024 Be the first to know about the latest updates and launches. The Most Decentralized L2 Technology
================================================================================
Title: Voter suppression - Wikipedia
Date: Date not available
Content:
Voter suppression is a strategy used to influence the outcome of an election by discouraging or preventing specific groups of people from voting. It is distinguished from political campaigning in that campaigning attempts to change likely voting behavior by changing the opinions of potential voters through persuasion and organization, activating otherwise inactive voters, or registering new supporters. Voter suppression, instead, attempts to gain an advantage by reducing the turnout of certain voters. Suppression is an anti-democratic tactic associated with authoritarianism. 
 The tactics of voter suppression range from changes that increase voter fatigue, to intimidating or harming prospective voters.
 Some argue the term 'voter suppression' downplays the harm done when voices are not reflected in an election, calling for terms like 'vote destruction' that accounts for the permanence of each vote not being cast.[1] Making it harder to vote for people who have been given the right, can lead to voter fatigue. Skewing the electorate jeopardizes the wisdom of the crowd, and the decision-making benefits it brings. Suppression does not require intent. Analyzing the turnout of eligible voters provides a partial way to study cumulative voter suppression impacts under specific conditions, though other avenues such as election subversion, gerrymandering, and corruption, cannot always be captured by voter turnout metrics. Additionally, some of the rules that end up suppressing votes can also be used as a pretext for throwing out votes, even when voter fraud is extremely rare.[2]
 A half-million Americans had their votes disqualified in 2008 and 2010 due to ballot design issues, including confusing instructions.[1] The order of politicians on the ballot can also give one candidate an edge,[1] while the length of a ballot can overwhelm voters, pushing them from the electorate for some or all races and increasing the wait times in lines for in-person voters.[3]
 Requiring people to travel long distances and/or wait in long lines, for example suppresses voter turnout. Some parties in Europe that have less support among expats have made it much more difficult for them to cast ballots by removing vote by mail options, forcing some to travel hundreds of kilometers.[4]
 Weekend (such as Saturday voting in Australia), also contributes to higher turnout than weekday voting, maybe even more than having Election Day as a recognized holiday.[1] A study in the UK found that when the sun sets later in the day, turnout tends to improve.[5]
 The Cost of Voting Index estimates how much more difficult the voting experience is on average in states around the U.S.[6] 78% of respondents in one preferred vote-by-mail to voting in-person.[2]
 The disenfranchisement of voters due to age, residence, citizenship, or criminal record are among the more recent examples of ways that elections can be subverted by changing who is allowed to vote. Most countries set their voting age to 18, thus disenfranchising citizens below that age. In many countries, like Germany, disenfrachisement is an additional penalty to certain crimes, such as treason or electoral fraud. In others such as India, all prisoners lose the right to vote during the duration of their imprisonment. Some jurisdictions may disenfranchise felons for life, including some (but not all) states of the United States of America.
 Frequent elections increase the amount of time and attention required of voters, typically leading to lower turnout among certain types of voters.[7] Two-round elections (including primary elections), recall elections, and off-year elections are some examples of elections that contribute to voter fatigue. For example, Japan, Switzerland and the United States have the lowest voter turnout rates among developed countries due to holding frequent elections.[8]
 Photo identification requirements to vote can disenfranchise many voters especially the young, elderly, lower-income people, recently transitioned individuals, people of color, recently married women and people with disabilities. Additionally, the implementation of signature-matching processes, especially for mail-in ballots, can also be done so strictly as to suppress orders of magnitude more votes than the actual fraud that it prevents.[9]
A Brennan Center estimate that 11% of Americans did not have the type of photo id recently required by many states.[2] A solution implemented in a number of countries is to automatically send ID cards to all its citizens for free.[2]
 Less-regulated campaign spending reduces the influence of every vote by giving more power to wealthy people, special interests and lobbyists.[10][11] Corruption presents a more widely-recognized form of election subversion or electoral fraud where votes or positions are acquired illegally using money.
 Misinformation, disinformation, and the platforms that incentivized to boost half-truths and lies are forms of information warfare that can be used to confuse, intimidate, or deceive voters.[12] When misinformation and disinformation is amplified by the laundering of foreign money through domestic nonprofit organizations or other allied domestic actors, charges of treason can be brought against these actors for colluding with a foreign power.[13]
 Common examples include undermining journalism, academia, political speech and other fundamental exchanges of ideas and information. Free or low-cost sources of information, such as through libraries, schools, nonprofits, public media, or open-source projects (like Wikipedia), have historically supported this key democratic prerequisite. For example, two-thirds of U.S. college students in one study cited a lack of information as a reason for why they did not vote.[2]
 Intimidation can result from the presence of cameras or guns at polling places to ballots that may not be secret.[14] Following-through on threats by physically harming or killing people can severely deter voter participation.[15]
 The lack of intergenerational equity in policy undermines the ability of voters to pursue self-determination through their democratic processes. For example, the lifetime appointments of judges, or constitutions that are so difficult to change that they do not reflect the values of current voters, show how power allocated in the past can thwart voter power in the present. This kind of lock-in is only helpful if the present is less democratic than the past, which can become a self-fulfilling prophecy by simultaneously hampering the democratic innovations and evolutions that could prevent those threats by bolstering ancient architecture with the latest best-practices. Past actions can also create other kinds of path dependence, where power to shape democratic institutions can be slowed down or subverted by decisions made by those who wielded power in the past, regardless of how fairly (democratically) those setting the rules came to power and regardless of the values held by or information available to voters in the present. A relatively tangible example could be a country allowing itself to run up a large national debt that present-day voters did not consent to, shrinking discretionary spending to a fraction of what previous voters were able to spend.
 Voter registration (or enrollment) is an extra step in the election process creates extra work for voters, especially those who move often and are new to the system, thereby suppressing their votes. Registration has been the number one reason why citizens in the U.S. do not vote, which is why most democracies automatically enroll their citizens.[2] Same-day registration is another tool to make registration less of a barrier. In addition, the existence of the process itself opens up more opportunities to make the process intentionally difficult or impossible, including aggressive voter roll purges.[16] The Cost of Voting Index quantifies some of the differences in voter registration experiences in U.S. states.[17]
 Another example where registration can suppress votes is requiring a declared party preference, which is required in closed primaries in the United States for example, dissuading voters who do not want to declare a party preference in order to weigh-in on who represents them.[18] Open primaries allow anyone to vote regardless of party preference or affiliation. In some more authoritarian states, loyal party membership may be required to have a say, or even basic rights and privileges.
 Voters may be discouraged from voting by weak cultural norms around voting. Countries without universal voting signal that voting is unimportant. A voting culture can be developed by reinforcing how voting is valued, expected and a centerpiece of a place's culture,[19] as peer pressure and a sense of belonging are powerful incentives to do something collectively.
 Some proposals for reform include requiring that every selection have a 'none of the above' option, allow a wide range of valid excuses for not voting for conscientious objectors, and charging a low, non-compounding, non-criminal fee for those who do not vote or select a valid reason.[19]
 Winner-take-all systems (unlike in systems with proportional representation), are especially vulnerable to weakening and wasting certain votes year after year.[20] This phenomenon also suppresses turnout for that and other elections help simultaneously in states that are not competitive, suppressing the popular vote for president in the U.S., for example, while lowering turnout in a host of other contests.[2] In contrast, a parliamentary system typically significantly reduces wasted (suppressed) votes, helping to ensure more vote equality and encouraging greater overall participation.[8]
 Ballot referendum can also be a powerful avenue for changing political systems, for example, that are not as responsive to voters due to gerrymandering or other anti-democratic actions and policies.[21]
 Australian citizens are expected to enroll to vote, and it is their responsibility to update their enrollment when they change their address. Even so, an estimated 6% of eligible Australian voters are not enrolled or are enrolled incorrectly. They are disproportionately younger voters, many of whom might neglect to enroll when they attain voting age.
 In 2006, the Howard government legislated to close the electoral roll much earlier once an election was called than before. Previously, voters had been allowed seven days of grace after an election had been called to arrange or update their enrollment, but new voters were now allowed only until 8:00 p.m. on the day that the electoral writ was issued to lodge their enrollment form, and those who needed to update their addresses were allowed three days. In Australia, the Prime Minister effectively has the right to determine the date of the election as long as constitutional rules regarding the maximum term of the parliament are adhered to. That measure was therefore likely to result in many newer voters being precluded from voting in the first election for which they were eligible because the time to arrange their enrollment once an election is called had been greatly reduced.
 The measure was widely seen as an attempt at voter suppression aimed at younger voters[22] since surveys had shown that younger voters are more likely than the general population to vote for the Australian Labor Party or the Greens than Howard's Liberal Party.[23] The government denied that it was trying to suppress some voters and insisted that the purposes of the reform were a smoother administration of the elections and the reduction of the possibility of electoral fraud. However, the Australian Electoral Commission had requested no such reform, there had been no evidence of significant electoral fraud, and the Australian Electoral Commission had been dealing with hundreds of thousands of late enrollments without significant problems for decades.
 In July 2010, the left-wing lobby group GetUp! launched a challenge to the law. The High Court of Australia expedited the hearing so that a ruling could be made in time for the 2010 federal election. The majority ruling struck down early closing of the roll and reinstated the old rule allowing voters seven days grace to arrange or update their enrollment.
 In the 2022 Brazilian general election, there were attempts by police and political sympathisers to make it more difficult for lower-income people to attend polling stations. Some public transport services were temporary reduced,[24][25] spot inspections of vehicles and public transport were increased in poorer areas of the country,[26][27] and roadblocks set up to disrupt and delay traffic.[28][29]
 Shortly before the 2011 Canadian federal election, voter suppression tactics were exercised by issuing robocalls and live calls, which falsely advised voters that their polling station had been changed. The locations offered by those messages were intentionally false, often led voters several hours from the correct stations, and often identified themselves illegally as coming from Elections Canada.[30] In litigation brought by the Council of Canadians, a federal court found that such fraud had occurred and had probably been perpetrated by someone with access to the Conservative Party's voter database, including its information about voter preferences.[31] The court stated that the evidence did not prove that the Conservative Party or that its successful candidates had been directly involved,[31] but it criticized the Conservative Party for making "little effort to assist with the investigation."[31] The court did not annul the result in any of six ridings where the fraud had occurred because it concluded that the number of votes affected had been too small to change the outcome.[31]
 In France, as in some other countries with Voter Registration, requirements and processes to update your address suppress voter turnout disproportionately against people who move more often, who tend to be younger, for example.[32]
 In April 2019, during Israel's general elections for the 21st Knesset, Likud activists installed hidden cameras in polling stations in Arab communities.[33] Election observers were seen wearing such cameras.[34] Hanan Melcer, the Head of the General Elections Committee, called the cameras illegal.[35] The following day, the public relations agency Kaizler Inbar took credit for the operation and said it had been planned in collaboration with Likud. It claimed that voter turnout in Arab communities had fallen under 50% by the presence of the agency's observers in the polling stations,[36] though some of this decrease is likely due to a boycott that was planned for the vote.[37]
 Lutfur Rahman was the directly-elected mayor of Tower Hamlets for the British Labour Party. He was removed from office after being convicted of breaches of electoral law when his supporters intimidated voters at polling stations.[38][39]
 In the United States, elections are administered locally (though with many election rules set by states and the federal government), and forms of voter suppression vary among jurisdictions. When the country was founded, the right to vote in most states was limited to property-owning white males.[40] Over time, the right to vote was granted to racial minorities, women, and youth.[41][42][43]
 In the late 19th and the early 20th centuries, Southern states passed Jim Crow laws to suppress poor and racial minority voters that involved poll taxes, literacy tests, and grandfather clauses.[44][45][46] Most of those voter suppression tactics were made illegal after the enactment of the Voting Rights Act of 1965. Even after the repeal of those statutes, there have been repetited incidents of racial discrimination against voters, especially in the South. For example, 87,000 people in Georgia were unable to vote in 2018 because of late registration. Many of the strictest voting regulations are in swing states and have been enacted primarily by U.S. Republican Party politicians.[47] According to AMP Reports, many people who were predicted to be in favor of voting for the U.S. Democratic Party had their ballot dismissed. The study's analysis noted, "A disproportionate number of those potential voters were people of color or young voters, groups that typically favor Democrats."[47] The history of the previous Jim Crow regulations in the Southern states affects the voter suppression today because minorities often have their vote dismissed by the manipulation of voting regulations.[48]
 One analysis of a Florida election in 2012 found that 200,000+ people did not vote because of long lines.[49] Some Floridians were forced to wait 6–7 hours to vote.[1]
 In 2013, after the U.S. Supreme Court struck down Section 4 of the Voting Rights Act, several states enacted voter ID laws. Some argue that such laws amount to voter suppression against African-Americans.[50][51]
 In Texas, a voter ID law requiring a driver's license, passport, military identification, or gun permit was repeatedly found to be intentionally discriminatory. The state's election laws could be put back under the control of the U.S. Department of Justice. Under Attorney General Jeff Sessions, however, the DOJ expressed support for Texas's ID law.[52] Sessions was accused by Coretta Scott King in 1986 of trying to suppress the black vote.[53] A similar ID law in North Dakota, which would have disenfranchised many Native Americans, was also overturned.[54]
 In Wisconsin, a federal judge found that the state's restrictive voter ID law had led to "real incidents of disenfranchisement, which undermine rather than enhance confidence in elections, particularly in minority communities."[55] Since there was no evidence of widespread voter impersonation in Wisconsin, it found that the law was "a cure worse than the disease." In addition to imposing strict voter ID requirements, the law reduced early voting, required people to live in a ward for at least 28 days before voting, and prohibited emailing absentee ballots to voters.[54]
 Other controversial measures include shutting down Department of Motor Vehicles (DMV) offices in minority neighborhoods, which makes it more difficult for residents to obtain voter IDs;[56][57] shutting down polling places in minority neighborhoods;[58] systematically depriving precincts in minority neighborhoods of the resources needed to operate efficiently, such as poll workers and voting machines;[59] and purging voters from the rolls shortly before an election.[60]
 Often, voter fraud is cited as a justification for such laws even if the incidence is low. In Iowa, lawmakers passed a strict voter ID law with the potential to disenfranchise 260,000 voters. Out of 1.6 million votes cast in Iowa in 2016, there were only 10 allegations of voter fraud, none of which being cases of impersonation that a voter ID law could have prevented. Iowa Secretary of State Paul Pate, the architect of the bill, admitted, "We've not experienced widespread voter fraud in Iowa."[61]
 In May 2017, U.S. President Donald Trump established the Presidential Advisory Commission on Election Integrity for the purpose of preventing voter fraud. Critics have suggested its true purpose is voter suppression. The commission was led by Kansas Secretary of State Kris Kobach, a staunch advocate of strict voter ID laws and a proponent of the Crosscheck system. Crosscheck is a national database, which is designed to check for voters who are registered in more than one state by comparing names and dates of birth. Researchers at Stanford University, the University of Pennsylvania, Harvard University, and Microsoft found that for every legitimate instance of double registration it finds, Crosscheck's algorithm returns approximately 200 false positives.[62] Kobach has been repeatedly sued by the American Civil Liberties Union (ACLU) for trying to restrict voting rights in Kansas.[63][64]

================================================================================
Title: Eth.xyz | View the ENS profile & NFTs of any .eth name
Date: Date not available
Content:
The universal shortlink for your web3 username, now available for .eth names. TL;DR we secured this domain to help you share what you want to the world. This was our first shot, let us know what you think. Eth.xyz is a service that showcases the public ENS profile and NFT collection of any .eth name on a simple, secure, and easily shareable URL. Just add .xyz to the end of any .eth name in any browser and visit the URL. Every .eth name has been granted automatic access to the eth.xyz feature. Simply add “.xyz” to the end of any .eth name in any web browser and the ENS profile will display. For example: the ENS profile for maaria.eth is accessible in any browser at maaria.eth.xyz. The profile content is automatically generated from publicly available information provided through ENS and is ultimately controlled by the relevant ENS user. Yes! Like this: https://eth.xyz/thingelstad.xyz or https://eth.xyz/d.mirror.xyz Profile pages for all .xyz and other TLDs are available as subpages of eth.xyz. To view the profile page for any other TLD, just add your domain to the end of https://eth.xyz/. This subpage method supports subdomains as well. Yes! Please see the instructions here. Using your eth.xyz profile as your Bluesky username can help consolidate your online presence. Eth.xyz profiles are essentially free landing pages for decentralized identities, acting as a central hub of personally curated information. Connecting your digital identity across platforms can increase the visibility of your online presence to a broader audience. If your Bluesky validation isn't working, there are a couple of things to check: You can visit your .eth subdomain profile using the subpage method: https://eth.xyz/sub.domain.eth. At the moment, subdomains do not work in the shortlink (i.e. sub.domain.eth.xyz). We’d like to have a feature that can help people explore .eth profiles. For now, here are a few .eth profiles to test out. You can also visit https://ethleaderboard.xyz to check out some of the most
        popular .eth holders on Twitter. Eth.xyz was created for the ENS community with love by the XYZ Registry, the company behind .xyz domain names. The project is open for contribution or feedback on GitHub. Send us a message @xyz on Twitter! Connect to the ENS Manager to update your .eth name’s information, such as your content, addresses, and text records. For each .eth name, the NFTs displayed are pulled via API from OpenSea. .XYZ is the generic top-level domain name (“gTLD” or “TLD”) that originally helped to pioneer the ENS and DNS integration in 2018. Since 2014, .xyz has disrupted the status quo by offering domain name choice and accessibility to internet users, becoming the most popular new domain ending worldwide. The XYZ Registry supports the blockchain technology community and shares their passion for pushing the envelope of the internet. We are enthusiastic about our continued collaboration with ENS. .XYZ is honored to be the domain of choice for many cutting edge technology initiatives, from Mirror.xyz, Login.xyz, and Proof.xyz, to Universe.xyz and many more. We support web3 and the expansion of naming opportunities, and we are committed to continue exploring opportunities to harmonize with the adoption of web3. We believe that we belong together in the metaverse. As small business owners, the founders of .xyz know the importance of being able to secure a memorable domain at a reasonable price. That’s why .xyz’s mission has always been to help entrepreneurs and innovators get online. Since 2014, .xyz has built a passionate community of individuals, small businesses, and organizations. .XYZ partners with more than 230 registrars, is the #1 new gTLD in usage1, and leads the industry with a successful anti‑abuse program. We have also stood strong through anti‑competitive legal actions, showing that innovation and choice prevails. Today, you can find a .xyz domain in practically every country and territory, and we hope to foster further innovation by supporting the evolution of naming. WAGMI 1Namestat.org We would like to hear your feedback on eth.xyz. We have published eth.xyz on GitHub and invite you to open issues or submit pull requests. You can also email us at . Nothing on this page implies any endorsement or affiliation between XYZ or ENS. Privacy Policy
================================================================================
Title: Caulk: Lookup Arguments in Sublinear Time
Date: Date not available
Content:
We present position-hiding linkability for vector commitment schemes: one can prove in zero knowledge that one or $m$  values that comprise commitment cm all belong to the vector of size $N$ committed to in C. Our construction Caulk can be used for membership proofs and lookup arguments and outperforms all existing alternatives in prover time by orders of magnitude.

For both single- and multi-membership proofs Caulk beats SNARKed Merkle proofs by the factor of 100 even if the latter instantiated with Poseidon hash. Asymptotically our prover needs $O(m^2 + m\log N)$ time to prove a batch of $m$ openings, whereas proof size is $O(1)$ and verifier time is $O(\log(\log N))$.

As a lookup argument, Caulk is the first scheme with prover time sublinear in the table size, assuming $O(N\log N)$ preprocessing time and $O(N)$ storage. It can be used as a subprimitive in verifiable computation schemes in order to drastically decrease the lookup overhead.

Our scheme comes with a reference implementation and benchmarks. BibTeX 
Copy to clipboard
================================================================================
Title: transactions - What is a Finney attack? - Bitcoin Stack Exchange
Date: 12 years ago
Content:

						Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers.
					 
Now available on Stack Overflow for Teams! AI features where you work: search, IDE, and chat.
         
            Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
            Explore Teams
 Teams Q&A for work Connect and share knowledge within a single location that is structured and easy to search. What is a Finney attack? Extra points for explaining its purpose, the prerequisites for it to be possible, how the attack can be performed and the origin of the name "Finney attack". The Finney attack is named after Hal Finney, who suggested it in this comment. (Hal happens to be the first recipient of a Bitcoin transaction, and the first person to comment on the release of the Bitcoin source code.) It is a double spending attack with the following features: It only works if the merchant accepts unconfirmed transactions. It still works, however, if the merchant waits a few seconds to
verify that everyone in the network agrees he was paid. It requires the attacker to be mining and controlling the content of
his blocks; however, he can in theory do this with any hashrate, in particular significantly less than 50% of the network hashrate. It proceeds as follows: The attacker mines blocks normally; in the block he is trying to find, he includes a transaction which sends some of his coins back to himself, without broadcasting this transaction. When he finds a block, he does not broadcast it; instead, he sends the same coins to a merchant for some goods or service. After the merchants accepts the payment and irreversibly provides the service, the attacker broadcasts his block; the transaction that sends the coins to himself, included in this block, will override the unconfirmed payment to the merchant. If the time from finding the block until the attacker sends payment and the merchant accepts it is t, and the average time to find a block is T, there is a probability of t/T that another block will be found on the network in this time; in this case the attack will fail, and the attacker will lose the block reward of B. This means that the average cost of attempting the attack is about (t/T) * B; as a rule of thumb the merchant should wait at least t=V*T/B (V is the value of the transaction), to make sure that trying to carry out this attack against him isn't profitable; this may not be sufficient though, as a nimble attacker can use the same block for multiple attacks, potentially gaining the total of their value. Clearly, the lower the attacker's hashrate, the less opportunities he has to carry out the attack. If the attack is for obtaining some illiquid good, it is difficult to make the need for this good coincide with finding a block. If the attack is for obtaining something liquid (e.g. exchanging bitcoins for other money), an opportunity is ever-present but the merchant is likely to require a few confirmations. This makes the attack difficult to use in practice. The Finney attack is a variation of a double-spend attack. The attacker creates two transactions - one crediting the victim and one crediting themselves. They keep the first transaction for now and proceed to try mining the second one into a block. When they succeed (this may take awhile), they quickly make a purchase with the first transaction, get the goods they purchased, and then release the pre-mined block. This way the first transaction will become invalidated, even if it is propagated through the whole network. This variant of double-spend attack is harder to execute (mining a block by oneself hasn't been easy for a long while), but is undetectable until it has been fully executed. The only way to protect oneself against such an attack is to require at least one confirmation for transaction before giving out purchased goods, and requiring more confirmations for transactions worth more. Thanks for contributing an answer to Bitcoin Stack Exchange! But avoid … To learn more, see our tips on writing great answers. Required, but never shown Required, but never shown 
                                                By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
 To subscribe to this RSS feed, copy and paste this URL into your RSS reader. 
Site design / logo © 2024 Stack Exchange Inc; 
user contributions licensed under 
CC BY-SA
. 
rev 2024.10.11.16783

================================================================================
Title: Markets in Crypto-Assets Regulation (MiCA)
Date: Date not available
Content:
Breadcrumb The Markets in Crypto-Assets Regulation (MiCA) institutes uniform EU market rules for crypto-assets. The regulation covers crypto-assets that are not currently regulated by existing financial services legislation. Key provisions for those issuing and trading crypto-assets (including asset-reference tokens and e-money tokens) cover transparency, disclosure, authorisation and supervision of transactions. The new legal framework will support market integrity and financial stability by regulating public offers of crypto-assets and by ensuring consumers are better informed about their associated risks. The Markets in Crypto Assets Regulation (MiCA) entered into force in June 2023. The regulation includes a substantial number of Level 2 and Level 3 measures that must be developed before the entry into application of the new regime (within a 12-to-18-month deadline depending on the mandate). During the implementation phase of MiCA, ESMA (in close cooperation with EBA, EIOPA, and the ECB) is consulting with the public on a range of technical standards that will be published sequentially in three packages. The aim is to deliver draft level 2 and 3 measures that incorporate feedback from the public as soon as possible. The date for the entry into application of the measures is subject to their adoption by the European Commission and approval by the European Parliament and the Council of the EU. ESMA is releasing the MiCA consultation packages in sequence starting with the Level 2 and Level 3 measures with the shortest deadlines. These include those related to authorisation, governance, conflicts of interest, and complaint handling procedures. The first package will be launched in July 2023. ESMA plans to publish the second package by October 2023. The third and final consultation package, which includes the MiCA mandates with an 18-month deadline, will be published (tentatively) in Q1 2024. A sequential approach will allow for better use of available resources (for ESMA, for NCAs, and for respondents). Details on the duration of each consultation will become available as they are published. The first consultation package will be published in July 2023. This package includes technical standards for the following mandates: The second consultation package is expected to be published by October 2023. This package will likely cover all those remaining mandates with a 12-month deadline, including: The third and final consultation package is expected to be published in Q1 2024. This package will likely cover all those remaining mandates with an 18-month deadline, including:     In parallel to the drafting of technical standards, ESMA is working with the national competent authorities (NCAs) on a convergent approach to authorisations of crypto-asset service providers (CASPs) during the transitional phase. The purpose of this supervisory convergence work is to ensure alignment on supervisory expectations related to entities offering crypto-asset services across EEA jurisdictions in the transitional period of MiCA and to promote, from the outset, consistent practices to be used after the entry into application of MiCA, starting with the authorisation regime. Member States will have the option of implementing ‘transitional measures’ (Article 143 of MiCA) that would allow entities or undertakings already providing crypto-asset services under applicable law in their jurisdictions to continue doing so during the transitional phase of MiCA (i.e., the period of 18-months after full application in December 2024). These transitional measures include:    During the transitional phase, a mix of regimes (e.g., MiCA or existing bespoke regimes) will coexist across Member States, which may result in disparate levels of protection for consumers of crypto-asset services. To overcome these challenges, ESMA is promoting supervisory convergence between Member States in three ways:
================================================================================
Title: Urban Development Overview
Date: Date not available
Content:
With 189 member countries, staff from more than 170 countries, and offices in over 130 locations, the World Bank Group is a unique global partnership: five institutions working for sustainable solutions that reduce poverty and build shared prosperity in developing countries.   The World Bank Group works in every major area of development.  We provide a wide array of financial products and technical assistance, and we help countries share and apply innovative knowledge and solutions to the challenges they face. We face big challenges to help the world’s poorest people and ensure that everyone sees benefits from economic growth. Data and research help us understand these challenges and set priorities, share knowledge of what works, and measure progress. As the world's largest multilateral financier of urban development, the World Bank works with national and local governments to build more livable, sustainable, and inclusive cities and communities.  Today, some 56% of the world’s population – 4.4 billion inhabitants – live in cities. This trend is expected to continue, with the urban population more than doubling its current size by 2050, at which point nearly 7 of 10 people will live in cities.   With more than 80% of global GDP generated in cities, urbanization can contribute to sustainable growth through increased productivity and innovation if managed well.   However, the speed and scale of urbanization brings challenges, such as meeting accelerated demand for affordable housing, viable infrastructure including transport systems, basic services, and jobs, particularly for the nearly 1 billion urban poor who live in informal settlements to be near opportunities. Rising conflicts contribute to pressure on cities as more than 50% of forcibly displaced people live in urban areas.   Once a city is built, its physical form and land use patterns can be locked in for generations, leading to unsustainable sprawl. The expansion of urban land consumption outpaces population growth by as much as 50%, which is expected to add 1.2 million km² of new urban built-up area to the world by 2030. Such sprawl puts pressure on land and natural resources, resulting in undesirable outcomes; cities represent two-thirds of global energy consumption and account for more than 70% of greenhouse gas emissions.   Cities play an increasingly important role in tackling climate change, because their exposure to climate and disaster risk increases as they grow. Since 1985, about 76,400 km2 of newly urbanized land was added in locations with inundation depths of over 0.5 meters during severe floods – this corresponds to about 50 times the area of Greater London. Globally, 1.81 billion people (that is 1 in 4 people) live in high-risk flood zones. Exposure is especially high in the densely populated and rapidly urbanizing river plains and coastlines in developing countries, where 89% of the world’s flood-exposed people live.    Cities are also in the frontline of combating epidemics. The COVID-19 pandemic was a massive challenge for cities and their citizens, rich and poor alike. Its impact and the measures taken to control the spread of the virus had disproportionate impacts on the poor, marginalized and vulnerable, revealing fault lines in cities’ economic structure, preparedness for such a crisis – especially the state of their public health and service delivery systems.   Building cities that “work” – green, resilient and inclusive– requires intensive policy coordination and investment choices. National and local governments have an important role to play to act now, to shape the future of their development, and to create opportunities for all.  Last Updated: Apr 03,2023 The World Bank’s work in urban development aims to build sustainable cities and communities through an urbanization process that is green, inclusive, competitive, and resilient, contributing to the Sustainable Development Goal (SDG) No.11, to the implementation of the New Urban Agenda, as well as to the World Bank’s goals to end extreme poverty and boost shared prosperity. The World Bank invests an average of $5 billion in planning and implementing lending projects on sustainable cities and communities every year to help cities meet the critical demands of urbanization. The active portfolio stands at 231 projects amounting to $33.9 billion, through a combination of instruments, including investment project financing, policy development loans, and Program-for-Results funding. Specifically, the Bank adopts integrated approaches to transform the fundamental systems of cities, focusing on five priorities, as follows:     1. Enhance Planning System and Local Capacity for cities The first key strategy is to help cities strengthen their planning systems and local capacities to better design, plan, and manage city assets and urban environments. In this context, the Bank provides cities with various diagnostic tools that enable informed planning decisions, as well as investments in urban infrastructure and service delivery.     2. Strengthen Fiscal and Financing Systems  The second strategy aims to maximize multiple financial resources for cities through enhancing fiscal and financial systems, to enable them to meet their infrastructure and service delivery financing and investment needs. Driven by sustained city growth and the need to adapt to and mitigate climate change, financing needs for urban infrastructure at a global level are estimated to be $4.5-5.4 trillion per year, including a 9-27% premium to make this infrastructure low-emission and resilient to climate change impacts. While most of this financing need is likely to be concentrated in developing countries, where historical infrastructure deficits are most pronounced, only a small fraction of the needed financing can be supplied by existing fiscal resources and development partners. Many cities face critical financial constraints to address their infrastructure challenges and make the needed investments. The Bank is well-positioned to help cities expand access to finance from multiple sources, including private finance, but also to strengthen their fiscal capacities and systems that can be sustained in the long run. In addition to providing financing to cities and local governments, the Bank also works with them and national governments to strengthen the basic building blocks of sound city financing by strengthening institutional, fiscal, and regulatory systems. These include: own source revenue generation, including diversifying revenue sources; inter-governmental fiscal transfer systems, especially to regional and local governments in lagging regions which need more financing; improving financial management performance of municipalities and service delivery agencies; and creating an enabling environment for private sector participation and financing through appropriate regulatory frameworks.     3. Promote Territorial and Spatial Development The third key element is to promote territorial development in developing countries and cities. Economic activities are concentrated in only a few places – only 1.5% of the world’s land is home to half of its production. This concentration is inevitable, and it is also desirable. The evidence suggests that prosperous and peaceful countries have been successful by bringing people and businesses closer to each other in cities, harnessing agglomeration economies to boost productivity, job creation, and economic growth. The Bank’s work on territorial development looks at cities not only as individual entities, but also at the coordination between them at different scales: identifying priorities of lagging regions; connecting urban and rural spaces, and addressing spatial inequalities within cities, aiming to allow faster economic growth and linking people to better jobs.     4. Build Climate Smart and Urban resilience With increasingly concentrated people and assets in cities, a complex range of growing shocks and stress imposes tremendous costs on the globe. Disasters disproportionately impact developing countries, which lose an average of 1% of GDP a year to disasters, compared to 0.1-0.3% in developed countries.  Poorer segments of the population are particularly vulnerable, since they tend to live in more hazardous settlements and lack the necessary safety nets to recover from economic or environmental shocks. Without inclusive and climate-informed urban development, climate change can push more than 100 million urban residents back into poverty by 2030.   The Bank focuses on improving cities’ capacity to adapt to a greater variety of changing conditions and to mitigate the impact of climate change through building infrastructure resilience, mobilizing capital, and financing at upstream climate strategy and analysis.     5. Invest in low-income, marginalized urban communities The last key element is fostering more inclusive cities and addressing issues related to urban poverty, slums, and safe and resilient housing solutions for existing and new residents including those relocating due to forced displacement.  For decades, the World Bank has invested in upgrading informal settlement and neighborhoods with improved access to urban infrastructure and services. Targeted analytical work on the urban poor and comprehensive diagnostics mapping out physical, socio-economic and risk profiles of informal settlements have strengthened the World Bank’s advisory role and lending quality in the sector. To address the root causes of informal settlements, the World Bank pursues an integrated approach to the housing sector, operating along the entire value chain, including planning and building regulations, access to land, infrastructure, subsidies and financing, to build safe and inclusive cities.  Capacity building and technical assistance to promote and implement participatory and community-focused development approaches have proven to play a powerful role in addressing acute poverty, inequality and exclusions in cities while also contributing to the process of democratization and empowerment. In particular, the World Bank has mainstreamed and deepened gender inclusion in its urban operations and has promoted disability inclusion in line with leaving no one behind and building accessible cities for all. Given that housing represents about 50-65% of all tangible assets in cities and the construction industry is an important part of many developing countries’ GDP and source of jobs, improving and retrofitting existing housing, building new housing and promoting rental markets in developing countries is critical to activate economic activities and boost economic growth. The Global Program for Resilient Housing was established to respond to the urgency for investments in the identification and improvement of poor-quality housing; and investments in service delivery for at risk urban populations. The five priorities are translated into six business lines and the climate change platform: City management, governance, and finance Land and geospatial Resilience and disaster risk management Sustainable city infrastructure and services Territorial and spatial development Urban poverty, inclusive cities, and housing Cities and climate change Last Updated: Oct 06,2022 Understanding urbanization at different scales: The World Bank is conducting a rich set of research on sustainable urban development. At the regional and country scales, the Urbanization Reviews offer a framework for city leaders to identify policy distortions and analyze investment priorities. A series of prototypes have been piloted to build a body of knowledge on urbanization challenges and public policy implications in a variety of country settings, including Colombia, India, Indonesia, and Vietnam.  Other recent analytical work and tools to help cities manage urbanization and support sustainable, inclusive growth include:   A Review of Integrated Urban Planning Tools for Greenhouse Gas Mitigation : Linking Land Use, Infrastructure Transition, Technology, and Behavioral Change (2020)    Cities, Culture, Creativity : Leveraging Culture and Creativity for Sustainable Urban Development and Inclusive Growth (2021)  Demographic Trends and Urbanization (2021)   Handbook for Gender-Inclusive Urban Planning and Design (2020)   Pancakes to Pyramids : City Form to Promote Sustainable Growth (2021)   Reconsidering Sites and Services : A Global Review, 2022;  Silver Hues : Building Age-Ready Cities (2022)   Transit-Oriented Development Implementation Resources and Tools, 2nd Edition (2021)   Impact of the COVID-19 Pandemic on Municipal Finance (2021)    Subnational Competitiveness Grants Guidebook: A Tool to Promote Jobs and Economic Transformation in Cities and Regions by Leveraging Performance-based Financing (2022)    For decades, the World Bank and the Global Facility for Disaster Reduction and Recovery (GFDRR) have been helping national and local governments to prepare for and mitigate the impacts of naturally occurring events – floods, droughts, cyclones, earthquakes, tsunamis, and more – investing around $5 billion in disaster risk management, on average, every year.  Large systemic shocks — like pandemics or natural hazards — highlight the urgent need for resilient health systems for mitigating the loss of lives and prolonged impacts on people’s livelihoods. The effective response depends not only on the health care system itself, but also on its supporting lifeline infrastructure. GFDRR is contributing to strengthening the resilience of health systems and their enabling environment to a wide range of emergencies, through knowledge such as the Frontline report, tools, and operational analytics.     The World Bank helps cities and national governments put in place the financial framework to attract investment and grow in a sustainable manner. The Bank is helping countries establish and strengthen urban institutions to deliver improved infrastructure and services, for example:   We support cities and local governments across the world to improve their institutional and service delivery performance through performance-based fiscal transfers. In addition to financing, we provide substantial technical assistance and advisory support to cities to improve their ability to design and develop investable projects, improve their creditworthiness, and raise financing for climate and disaster resilience.   Through the capital raising strategy of its City Resilience Program (CRP), the World Bank is pushing the boundaries in this area with its Capital Mobilization Strategy, which works with city leaders to consider the Bank a catalyst to development financial solutions beyond World Bank loans.   The City Creditworthiness Initiative (CCI) aims to strengthen the financial performance of local governments and prepare them to tap domestic / regional capital markets without a sovereign guarantee. The initiative has trained over 630 municipal officials from 250 cities in 26 countries.    In recent years, the World Bank has worked in cities and towns across over 140 countries, investing around $4 billion in FY21 in disaster risk management, to improve their urban infrastructure and systems especially focused on climate and disaster resilience.   In Niger, the Bank is supporting cities build resilience to climate shocks, address flood risk and develop better urban and disaster risk management systems, through a $250 million project.   Building on lessons from previous typhoons such as Typhoon Haiyan (2013), the Philippines together with the World Bank designed a capacity building program Ready to Rebuild (R2R) for governors, mayors, disaster risk management officers, planners, and budget officers. Funded by GFDRR and the Japan-World Bank Program for Mainstreaming Disaster Risk Management in Developing Countries, The R2R Program provides the “how” — how to prepare people, communities, and local governments to be more resilient and ready to respond and recover from disasters better and faster. It provides tools, ready templates, and practical solutions to address disaster recovery issues and bottlenecks.   Urban resilience goes hand-in-hand with environmental sustainability. The World Bank’s Global Platform for Sustainable Cities (GPSC) is a partnership and knowledge platform that promotes integrated solutions and cutting-edge support for cities seeking to improve urban sustainability, build resilience and tackle two global crises: climate change and biodiversity loss.    The City Climate Finance Gap Fund (Gap Fund) is a multi-donor initiative that aims to help cities in developing and emerging countries realize their climate ambitions by turning low-carbon, climate-resilient ideas into strategies and finance-ready projects. The Gap Fund also strengthens knowledge generation for city climate action through its analytical work (Primer on global urban carbon emissions – data sources and trends, The Analysis of Climate Action Plans in Latin America and the Caribbean, etc.) and organizing knowledge exchange.    Last Updated: Apr 03,2023 Find out what the Bank Group's branches are doing on urban development.
 Find out what the Bank Group's branches are doing on urban development. 
                                SURGE is a World Bank global umbrella program that supports developing countries to foster green, resilient and inclusive urban and regional development.
                             
                                TDLC is a partnership between the World Bank and the Government of Japan that maximizes the impact of urban development projects by leveraging Japanese and global knowledge, insights, and technical expertise.
                             
                                The Gap Fund, operationalized by the World Bank and European Investment Bank, helps cities in developing and emerging countries to turn low-carbon, climate-resilient ideas into strategies and finance-ready projects.
                             
                                Led by the World Bank, the Global Platform for Sustainable Cities is a forum for knowledge sharing and partnership to achieve urban sustainability.
                             
                                GSCP supports World Bank teams and cities to integrate data and technology into urban infrastructure and service delivery and provide solutions to achieve a citizen-centric approach.
                             
                                The World Bank's City Creditworthiness Initiative supports local government leaders in building access to long-term financing for investment.
                             
                                City Planning Labs is a World Bank technical assistance program which aims to enhance the capacity of municipal governments to produce, share, and utilize geospatial data for evidence-led urban planning.
                             This site uses cookies to optimize functionality and give you the best possible experience. If you continue to navigate this website beyond this page, cookies will be placed on your browser. To learn more about cookies, click here. 
================================================================================
Title: KZG polynomial commitments | Dankrad Feist
Date: Jun 16, 2020
      
Content:

Jun 16, 2020
       中文版本: KZG多项式承诺 I want to try and give an introduction to the commitment scheme introduced by Kate, Zaverucha and Goldberg 1. This post does not aim to be mathematically or cryptographically rigorous or complete – it is meant to be an introduction. This scheme is often also called Kate polynomial commitment scheme (pronounced kah-tay). As a polynomial commitment scheme, it allows a prover to compute a commitment to a polynomial, with the properties that this commitment can later be opened at any position: The prover shows that the value of the polynomial at a certain position is equal to a claimed value. It is called a commitment, because having sent the commitment value (an elliptic curve point) to someone (the verifier), the prover cannot change the polynomial they are working with. They will only be able to provide valid proofs for one polynomial, and if they are trying to cheat, they will either fail to produce a proof or the proof will be rejected by the verifier. I highly recommend reading Vitalik Buterin’s post on elliptic curve pairings, if you aren’t familiar with finite fields, elliptic curves, and pairings. If you’re familiar with Merkle trees, I want to try to give a bit more of an intuition on the difference between those and Kate commitments. A Merkle tree is what cryptographers call a vector commitment: Using a Merkle tree of depth , you can compute a commitment to a vector (that is, a list of elements of fixed length) . Using the familiar Merkle proofs, you can provide a proof that an element  is a member of this vector at position  using  hashes. We can actually make a polynomial commitment out of Merkle trees: Recall that a polynomial  of degree  is nothing other than a function

where the  are the coefficient of the polynomial. We can easily commit to a polynomial of degree  by setting  and computing the Merkle root of its coefficients. Proving an evaluation means that the prover wants to show to the verifier that  for some . The prover can do this by sending the verifier all the  and the verifier computing that  is indeed . This is of course an extremely stupid polynomial commitment, but it will help us understand what the advantages of real polynomial commitments are. Let’s hase a look at the properties: Now let’s look at what the Kate scheme achieves on these metrics: Additionally, it is actually possible to combine the proof for any number evaluations in one group element. These properties make the Kate scheme very attractive for zero knowledge proof systems, such as PLONK and SONIC. But they also make it very interesting for a more mundane purpose and use it as a vector commitment, which we will come to below. As mentioned in the prerequisites, I strongly recommend Vitalik Buterin’s post on elliptic curve pairings, it includes all the basics needed to understand this post – in particular finite fields, elliptic curves, and pairings. Let  and  be two elliptic curves with a pairing . Let  be the order of  and , and  and  be generators of  and . We will use a very useful shorthand notation for any . Let’s assume we have a trusted setup, so that for some secret , the elements  and  are available to both prover and verifier for . One way to get this secret setup is to have an airgapped computer compute a random number , compute all the group elements , and only send those elements (and not ) over a wire, and then burn that computer. Of course this is not a great solution because you would have to trust whoever operated that computer that they didn’t build a secret communication channel that tells them the secret . In practice this is usually implemented via a secure multiparty computation (MPC), which allows creating these group elements by a group of computers in a way such that no single computer will know the secret , and all of them would have to collude (or be compromised) in order to reveal it. Note one thing that is not possible: You can’t do this by just selecting a random group element  (for which  is unknown) and compute the other group elements from it. It is impossible to compute  without knowing . Now, elliptic curve cryptography basically tells us that it’s impossible to find out what  actually is from the trusted setup group elements. It’s a number in , but the prover cannot find the actual number. They can only do certain computations with the elements that they are given. So for example, they can easily compute things like  by elliptic curve multiplication, and since they can add elliptic curve points, they can also compute something like . In fact, if  is a polynomial, the prover can compute This is interesting – using this trusted setup, everyone can basically evaluate a polynomial at some secret point  that nobody knows. Except they don’t get the output as a natural number, they only get the elliptic curve point , but it turns out that this is already really powerful. In the Kate commitment scheme, the element  is the commitment to the polynomial . Now you may ask the question: Could the prover (without knowing ) find another polynomial  that has the same commitment, i.e. such that ? Let’s assume that this were the case. Then it would mean that , implying . Now,  is itself a polynomial. We know that it’s not constant because . It is a well-known fact that any non-constant polynomial of degree  can have at most  zeroes: This is because if , then  is divisible by the linear factor ; since we can divide by one linear factor for each zero, and each division reduces the degree by one, so there can’t be more than .2 Since the prover doesn’t know , the only way they could achieve that  is by making  in as many places as possible. But since they can do that in at most  places, as we’ve just proved, they are very unlikely to succeed: since  is much smaller than the degree of the curve , the probability that  will be one of the points they chose to make  will be vanishingly tiny. To get a feeling for this probability, suppose we use the largest trusted setups currently in existense, where , and compare it to the curve order : The probability that any given polynomial  that the attacker has crafted to agree with  in as many points as possible –  points – results in the same commitment () will only be . That is an incredibly low probability and in practice means the attacker cannot pull this off. So far we have seen that we can evaluate a polynomial at a secret point , and that gives us a way to commit to one unique polynomial – in the sense that while there are many polynomials with the same commitment , they are impossible to actually compute in practice (cryptographers call this computationally binding). However, we are still missing the ability to “open” this commitment without actually sending the whole polynomial over to the verifier. In order to do this, we need to use the pairing. Above, we noticed that we can do some linear operations with the secret elements; for example, we can compute  as a commitment to , and we could also add two commitments for  and  to make a combined commitment for : . What we’re missing is an ability to multiply two polynomials. If we can do that, we can use some cool properties of polynomials to achieve what we want. While elliptic curves themselves don’t allow this, luckily we can do it with pairings: We have that where we introduce the new notation . So while we unfortunately can’t just multiply two field  elements inside an elliptic curve and get their product as an elliptic curve element (this would be a property of so-called Fully Homomorphic Encryption or FHE; elliptic curves are only additively homomorphic), we can multiply two field elements if we commited to them in different curves (one in  and one in ), and the output is a  element. This gets us to the core of the Kate proof: Remember what we said about linear factors earlier: A polynomial is divisible by  if it has a zero at . It is easy to see that the converse is also true – if it is divisible by , then it clearly has a zero at : Being divisible by  means that we can write  for some polynomial , and this is clearly zero at . Now let’s say we want to prove that . We will use the polynomial  – this polynomial is clearly zero at , so we can use the knowledge about linear factors. Let  be the polynomial  divided by the linear factor , i.e. which is equivalent to saying that . Now a Kate proof for the evaluation  is defined as . Remember the commitment to the polynomial  is defined as . The verifier checks this proof using the following equation: Note that the verifier can compute , because it is just a combination of the element  from the trusted setup and  is the point at which the polynomial is evaluated. Equally they know  as the claimed value , thus they can compute  as well. Now why should this check convince the verifier that , or more precisely, that the polynomial committed to by  evaluated at  is ? We need to evaluate two properties: Correctness and soundness. Correctness means that, if the prover followed the steps as we defined, they can produce a proof that will check out. This is usually the easy part. Soundness is the property that they cannot produce an “incorrect” proof – they cannot trick the verifier into believing that  for some . Let’s start by writing out the equation in the pairing group: Correctness should now be immediately apparent – this is just the equation  evaluated at the random point  that nobody knows. Now, how do we know it’s sound and the prover cannot create fake proofs? Let’s think of it in terms of polynomials. If the prover wants to follow the way we sketched out to construct a proof, they have to somehow divide  by . But  is not zero, so they cannot perform the polynomial division, as there will always be a remainder. So this clearly doesn’t work. So then they can try to work directly in the elliptic group: What if, for some commitment , they could compute the elliptic group element If they could do this, they could obviously just prove anything they want. Intuitively, this is hard because you have to multiply by something that involves , but you don’t know anything about . To prove it rigorously, you need a cryptographic assumption about proofs with pairings, the so-called -strong SDH assumption 3. So far we have shown how to prove an evaluation of a polynomial at a single point. Note that this is already pretty amazing: You can show that some polynomial that could be any degree – say  – at some point takes a certain value, by only sending a single group element (that could be  bytes, for example in BLS12_381). The toy example of using Merkle trees as polynomial commitments would have needed to send  elements – all the coefficients of the polynomial. Now we will go one step further and show that you can evaluate a polynomial at any number of points and prove this, still using only one group element. In order to do this, we need to introduce another concept: The Interpolation polynomial. Let’s say we have a list of  points : Then we can always find a polynomial of degree less than  that goes through all of these points. One way to see this is to use Lagrange interpolation, which give an explicit formula for this polynomial : Now let’s assume that we know  goes through all these points. Then the polynomial  will clearly be zero at each . This means that it is divisible by all the linear factors . We combine them all together in the so-called zero polynomial Now, we can compute the quotient Note that this is possible because  is divisible by all the linear factors in , so it is divisible by the whole of . We can now define the Kate multiproof for the evaluations :  – note that this is still only one group element. Now, to check this, the verifier will also have to compute the interpolation polynomial  and the zero polynomial . Using this, they can compute  and , and thus verify the pairing equation By writing out the equation in the pairing group, we can easily verify it checks out the same way the single point Kate proof does: This is actually really cool: You can prove any number of evaluation – even a million – by providing just one group element! That’s only 48 bytes to prove all these evaluations! While the Kate commitment scheme is designed as a polynomial commitment, it actually also makes a really nice vector commitment. Remember that a vector commitment commits to a vector  and lets you prove that you committed to  for some . We can reproduce this using the Kate commitment scheme: Let  be the polynomial that for all  evaluates as . We know there is such a polynomial, and we can for example compute it using Lagrange interpolation:
 Now using this polynomial, we can prove any number of elements in the vector using just a single group element! Note how much more efficient (in terms of proof size) this is compared to Merkle trees: A Merkle proof would cost  hashes to even just prove one element! We are currently exploring the use of Kate commitments in order to achieve a stateless version of Ethereum. As such, I highly recomment searching for Kate in the ethresearch forums to find interesting topics of current research. Another great read from here is Vitalik’s introduction to PLONK, which makes heavy use of polynomial commitments and the Kate scheme is the primary way this is instantiated. https://www.iacr.org/archive/asiacrypt2010/6477178/6477178.pdf ↩ This result is often mis-quoted as fundamental theorem of algebra. But the fundamental theorem of algebra is actually the inverse result (only valid in algebraically closed fields), that over the complex numbers, every polynomial of degree  has  linear factors. The simpler result here unfortunately doesn’t come with a short catchy name, despite arguable being more fundamental to Algebra. ↩ https://www.cs.cmu.edu/~goyal/ibe.pdf ↩ Researcher at Ethereum Foundation
================================================================================
Title: Home
Date: Date not available
Content:
Build a world that benefits all, owned by all. The Superchain is a vision of a composable, unified network of blockchains that can support internet-level activity, powered by the MIT-licensed open source OP Stack. Deploy your own chain to accrue sequencer revenue and own the user experience. Join one of the fastest growing EVM ecosystems by deploying your app on an OP chain. Help build the open internet by contributing to its underlying infrastructure, the OP Stack. A protocol for building decentralized social apps. Synthetix is a system designed to let users hold and trade synthetic asset... Experience crypto in color. Fun, powerful, and secure wallets for eve... A crypto wallet & gateway to blockchain apps. Start exploring blo... The most human-centric, non-plutocratic governance model in crypto. A two-house system, enabling a democracy that sets a new industry standard for digital governance. Members of the Collective decide how Optimism’s economy, technology, and governance develop. Voting is onchain, enabling trust through visibility into the decision-making process.  Societal progression goes hand in hand with economic prosperity. Retroactive Public Goods Funding rewards people and projects that create positive impact for the Optimism Collective.
================================================================================
Title: The First 'Bitcoin 2.0' Crowd Sale Was A Wildly Successful $7 Million Disaster
Date: Oct 6, 2024,
Content:
In April, a start-up in Scotland raised $7 million dollars in just 5 hours via a crypto-coin crowdsale managed by another Bitcoin-based start-up loosely based in Seattle. It was hailed as remarkable: a way for a company to raise funds without going through traditional institutions. The Wall Street Journal called it "manic," highlighting a "hot bitcoin 2.0" even if the sale was "unorthodox" and had "wrinkles." In fact, the wrinkles were Shar-Pei level (but far less cute). The start-up wound up with less than half that amount in usable money because the majority of its take was in an illiquid alternative crypto-coin, Mastercoin, with a trading market so anemic it can't be cashed out. The value of that coin spiked before the sale and crashed afterwards leading to allegations of a pump-and-dump, and causing the start-up to revise its definition of the crowdsale as raising $5.5 million. Two weeks after the sale closed, the SEC published an investor alert warning people in the cryptocoin community to beware of "fraudsters and promoters of high-risk investment schemes," saying investments that involve Bitcoin have a "heightened risk of fraud." The appeal of Bitcoin and crypto-based investment schemes is that they slough off regulators and third party intermediaries to make financial markets operate more easily and efficiently. But there are downsides that come from going walking with big bags of crypto-value in a lawless area. The company that raised the millions is called MaidSafe; it is a promising Internet start-up out of Scotland, headed by an earnest engineer named David Irvine who has been working on the decentralized storage system for eight years. He had funded it with $5 million in investments from family and friends, and by leasing out his skipper services: flying to France for example to pick up a wealthy person's new yacht and delivering it to a dock in the UK. He was never sure exactly how he was going to monetize his service which would allow users to rent out storage space on their hard drives for other users to store encrypted files, like a digital Airbnb or a crowdsourced Dropbox. In January, David Johnston of BitAngels, a group of investors who put money into Bitcoin-related projects, flew to Scotland to meet with Irvine and his employees. "They were still thinking about a 1% user fee," says Johnston, who is tall with a buzzed head and lives in Austin, Texas. "I told them they should think about a digital token. We introduced them to the core devs at the Mastercoin Foundation." Mastercoin is the brainchild of J.R. Willett, a developer in Seattle. He raised 4,000 BTC (worth a half-million dollars at the time) in his own fundraiser last summer based on a white paper he wrote about developing a protocol built on top of Bitcoin, that would use the Bitcoin blockchain to store digital contracts. You could use it for example to store car titles, extending the principles of Bitcoin -- one person owns a certain value and is the only one who can unlock and transfer it -- to lots of other kinds of property. Those who invested got the company's own currency, also called Mastercoin, in return. "We’re a protocol layer on top of Bitcoin adding extra features," says Willett, "We use Bitcoin like email uses the underlying layer of TCP/IP." Willett wanted to quit his job, but with a wife and small kids, throwing his lot into Mastercoin full-time was not an option, so he hired employees and created a board of directors, including David Johnston of Bit Angels, who had invested in Mastercoin and was very excited about 'crypto-ownership' projects. "I helped [J.R. Willett] think through how to structure the organization," says Johnston. Johnston implies that most of the Bitcoin that Willett got was from his group of Bit Angel investors. Mastercoin has been very open about how it's spent its Bitcoin funds with a public spreadsheet of its expenditures. It offers "bounties" to develop a Mastercoin ecosystem in order to make the coin valuable, paying a group out of France, for example, to set up MasterXchange to allow people to trade Bitcoin for Mastercoin. Despite that Mastercoin is notorious as being illiquid among cryptocoin traders. Yes, there are cryptocoin traders. Bitcoin is open source and easily copied, leading to the release of hundreds of imitators from Dogecoin to Sexcoin. Some coins actually have innovative features that set them apart from Bitcoin, such as Darkcoin and Zerocoin, which have enhanced anonymity features, but others are, essentially, jokes that have taken on actual trading value. Some cryptocoin investors make bets on a particular coin to succeed while others have discovered they can arbitrage with altcoins, doing quick trades that take advantage of price differences in the exchange rate. So for example, if you trade Bitcoin for Dogecoin, then convert Dogecoin to Litecoin, and then convert Litecoin to Bitcoin again, you can come out with more Bitcoin if the market's imperfect. (An altcoin contraction may be coming though; another early cryptocoin Ripple has been wobbling after a co-founder announced plans to dump his holdings, a sizeable amount, with no explanation why.) Mastercoin's market cap has been as high as $50 million, making it one of the most valuable altcoins, but its cap is less important than its trading volume when it comes to actually realizing that value. And its trading volume has been one of the lowest of the altcoins. It's hard to sell it. "With $23,000, the price of a Honda Civic, you could crash the Mastercoin market to $0," says Dan Held, founder of Bitcoin market information app ZeroBlock, and director of product for Blockchain, a Bitcoin wallet service. "Owners of Mastercoin are stuck holding an absolutely illiquid currency." Mastercoin's primary business model now is to issue business-specific cryptocoins to allow any entity to create its own cryptocurrency for its platform. Upon Johnston's advice, Irvine decided this was the answer to funding MaidSafe. He planned to use Mastercoin to issue 400 million Safecoin to sell for $8 million. Like Bitcoin itself, Safecoin would be both a store of value and a payment mechanism. Safecoin is the virtual currency for MaidSafe's crowdsourced Dropbox service, the currency people will use to pay for storage space and be paid. It was implied that Safecoin would increase in value if the company's services took off, though everyone involved avoided calling it "stock" in the company. MaidSafe like Mastercoin registered its foundation -- which was accepting the cryptofunds -- as a nonprofit. Other start-ups approached by David Johnston to do start-ups on the Mastercoin protocol say he encourages the non-profit model as a better way of doing business. "We took advice from the US lawyers via BitAngels and also local lawyers in Scotland," says Irvine by email. Kathleen Moriarty, a partner at Katten Muchin, who is assisting the Winklevoss brothers in their application to the SEC to create a Bitcoin exchange traded fund looked over articles associated with MaidSafe and Mastercoin and wasn't able to deliver a concrete opinion on how securities laws do or don't apply. "When I see a discussion about an alt coin 'securities exchange', I usually can’t tell exactly what the structure is and whether securities laws might be implicated," she said by email. "I think until things begin to shake out, leaving but a few competitors, that the landscape will be very murky and hard to keep up with." A spokesperson from the S.E.C. "decline[d] to comment beyond what we said in this recent investor alert." On Tuesday, the SEC announced that it charged Erik Voorhees, an early Bitcoin entrepreneur, for selling shares of Bitcoin gambling site Satoshidice and FeedZeBirds for Bitcoin without registering the offerings with the SEC. He paid a $50,000 penalty. “All issuers selling securities to the public must comply with the registration provisions of the securities laws, including issuers who seek to raise funds using Bitcoin,” said Andrew J. Ceresney, the SEC's enforcement director in a press release.  “We will continue to focus on enforcing our rules and regulations as they apply to digital currencies.” The Mastercoin and MaidSafe crew don't see the sale of a limited supply of digital tokens that will function as a currency on their platforms as a "security." "We try to be really conscious of the language we use. There’s no promise of dividend or equity. You’re just buying a password to access this software and you should do that if you think that software is valuable," said David Johnston by phone last month. "There's been no calls from the SEC yet." The crowdsale was complicated, but provided incentives for investing early and investing with Mastercoin instead of Bitcoin. If you invested one Bitcoin worth $450, you got 17,000 Safecoin, but if you invested one Bitcoin into Mastercoin at its then value, you could get 34,000 Safecoin. Irvine and the MaidSafe team were happy to do this to help support Mastercoin, but they were told that those Mastercoin investments would be stopped at 25% of the total sale and that the rest of the Safecoin would be bought with Bitcoin. But the way the Mastercoin protocol worked at the time, all Safecoin had to be bought with Mastercoin, so Irvine's team had to have Mastercoin in order to purchase of their own Safecoin on behalf of their investors. Bit Angels made a temporary loan of Mastercoin to allow MaidSafe to do that, which MaidSafe paid back with Mastercoin that they received from investors. I forgive you if you find that all confusing; so did most of the investment experts I spoke with. But people who trade in altcoins understood what was going on. The MaidSafe sale valued Mastercoin at twice its worth which predictably sent Mastercoin's worth soaring, and actually created some trading volume in an otherwise quiet market. It was the most trading volume Mastercoin had seen since it was first introduced. Thanks to the surge around the MaidSafe sale, some Mastercoin holders were able to cash out their coins. In a retrospective about the sale,  Jacob Farber of Perkins Coie who advises Bit Angels wrote, "It seems pretty clear that there was no intentional market manipulation. The question is whether there was an 'appearance of market manipulation', or an 'unintended market manipulation'." Valuing Mastercoin as it was valued definitely brought trading hawks out. At least one person interested in the MaidSafe project tried to sound an alarm bell on a company forum before the sale. John Kypri, who is based in Thailand, warned that it was a huge business mistake, given Mastercoin the currency's lack of liquidity and Mastercoin the company's struggles as competitors like Ethereum enter the space. His criticisms were dismissed; MaidSafe employees said the majority of the sale would be for Bitcoin and David Johnston chimed in to defend Mastercoin and assured Kypri that trading volume would be increasing. Irvine thought it would take 30 days to sell all the Safecoin, but when the crowdsale kicked off on the morning of April 22, Scotland time, the Safecoin flew off the digital shelf. And it was going terribly wrong. There was a flood of orders placed in Mastercoin, and they did not stop at the promised 25% mark. They had to abruptly end the sale within 5 hours. When people woke up in other time zones, they saw that the sale was already over, and they were stuck holding Mastercoin they'd hoped to turn into Safecoin. Irvine's company meanwhile was stuck holding millions of dollars of Mastercoin, a completely illiquid, worthless currency instead of the $6 million in Bitcoin they'd hoped for. Irvine was very upset and asked Johnston and Mastercoin how they were going to fix it. Johnston says his Bit Angels group had traded a bunch of Mastercoin for Safecoin. He convinced some of those investors -- who he declined to name -- to sell Safecoin they’d bought back to MaidSafe to sell to Bitcoin investors. "We didn’t make any money," claims Johnston. But the sale did allow a bunch of people holding Mastercoin to exit their positions. I reached out to other investors that Bit Angels touts in press releases as being part of the group, such as Roger Ver, an early Bitcoin investor; Vinny Lingham, founder of Gyft; and Jered Kenna of Tradehill. All indicated little to no involvement. Lingham and Kenna both expressed dismay that their names were included on press releases. They thought of it as an email list, and were dismayed that the group takes credit for investments they made on their own, prior to the group's formation in 2013 at the San Jose Bitcoin conference. BitAngels has publicly retracted taking credit for investing in Dan Held's Zeroblock. ""I highly doubt BitAngels made anywhere close to $7M worth of investments. David Johnston knowingly told individuals that BitAngels funded ZeroBlock, which was a completely false statement," says Held. "He later claimed this was done in error, however there was no room for miscommunication as ZeroBlock never sought to raise external capital." When asked to name active investors in Bit Angels, Johnston said the fund made $7 million worth of investments in Bitcoin start-ups last year, and said 21 investors were active "who replied in a survey to confirm their participation" and that another 29 investors had been involved in the "popular" Mastercoin crowdsale -- the group's largest investment by far. Johnston is a serial entrepreneur; he says he has built 6 companies, including an online publishing company when he was 16, an online bank inside SecondLife when he was 18, and a "biodiesel investment firm that did algae research for Conoco Phillips." He got into Bitcoin a couple of years back. "I’ve been dealing with investors for 12 years," he says. "I only want people to invest what they’re comfortable investing, and I want people with knowledge to really understand what they’re investing in. Crowd sales are a natural filter because those who get involved already understand Bitcoin or Mastercoin and smart property contracts." When I spoke to Irvine via Skype a few days after the April 22 crowd sale, he looked exhausted. He said he hadn't slept in a few nights. In addition to the Mastercoin sale allotment going wrong, a troll popped up claiming that Bitcoin stolen from Mt. Gox had gone into the crowdsale, though it turned out that it was just an incorrect tagging of an account on the blockchain -- notations anyone can enter. MaidSafe wound up with $3 million in Bitcoin thanks to the Safecoin loan from BitAngels. That's funding for three years at the start-up's current monthly price tag of $100,000 for operations. MaidSafe is now one of the largest holders of a rapidly depreciating Mastercoin, sitting on around $2.5 million of it, the majority of which came from just 10 Mastercoin holders. There were 2,000 people total who appeared to participate in the crowdsale, 1,900 of them buying Safecoin with Bitcoin, which is actually valuable and liquid. Irvine has no idea who most of the 2,000 people are who sent cryptocoin to his company. "They are just addresses on the blockchain to us," he says by email. He doesn't know their motives: whether they invested in Safecoin because they believe in Maidsafe's promise, or because they were desperate to get out of Mastercoin, or because they hope to turn a buck in the complex backwater of cryptostock trading. "We thought we’d have $7 million but we just have $3 million. That’s tough, but we’re coping," he said by Skype. “This whole way of funding is new. It was like test driving a car, and we crashed into a few walls." Irvine wrote a long candid review of the process in a blog post on "surviving a crowdsale." To my great surprise, he says that if he were to do it again, he would still use Mastercoin. Many knowledgeable observers called the whole thing a success. Irvine's team wound up with three million in BTC after all. Ryan Galt, an investor who blogs as Two-Bit Idiot, noted the "pump-and-dump" that happened but said the number one takeaway was to make sure to get in early when a "hot new coin-related startup announces a crowdsale." "You better be ready to buy the second it goes live," he wrote. Economist Daniel Krawisz has a very different take on the appcoin/altcoin phenomenon. In a post last month, he argued that appcoins are fraudulent, because, to overly simplify, it's always going to be more painless to use Bitcoin, rather than elaborate schemes built on top of Bitcoin. "Appcoins are pump-and-dump scams disguised as Rube Goldberg machines, so don't get fooled," he writes. Like a Rube Goldberg machine, these are some really complicated structures. I felt ridiculous trying to explain the crowdsale to experts: a cryptocoin fundraiser in which a non-profit in Scotland issues cryptocoins through a coin protocol built on top of the Bitcoin protocol developed by a decentralized company loosely based in Seattle, which issues its own cryptocoins that can only be traded through an exchange in France. Though some would certainly argue that there are equally complicated schemes cooked up on Wall Street. And many called Bitcoin itself a scam in its early years, until its value surged into the hundreds and heavyweights like Peter Thiel, Marc Andreessen and Jim Breyer started investing in Bitcoin start-ups. "Appcoins are just copies of Bitcoin and make things more inconvenient because to use them, there are more transaction costs. You have to go through more barriers to be able to spend them," says Krawisz by phone. "I can't tell if the altcoin people are trying to deliberately scam people or just not thinking ahead to the logical conclusions of these schemes. They're trying to hit another bubble. They regret not buying Bitcoin when they could have. So they want to replay it. It's like replaying a childhood trauma to overcome it but you just make it worse." Mastercoin has nine more crowd sales planned in coming months. Caveat crypto-emptor. Follow @kashhill 
================================================================================
Title: Zk-SNARKs: Under the Hood. This is the third part of a series of… | by Vitalik Buterin | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in Vitalik Buterin Follow -- 16 Listen Share This is the third part of a series of articles explaining how the technology behind zk-SNARKs works; the previous articles on quadratic arithmetic programs and elliptic curve pairings are required reading, and this article will assume knowledge of both concepts. Basic knowledge of what zk-SNARKs are and what they do is also assumed. See also Christian Reitwiessner’s article here for another technical introduction. In the previous articles, we introduced the quadratic arithmetic program, a way of representing any computational problem with a polynomial equation that is much more amenable to various forms of mathematical trickery. We also introduced elliptic curve pairings, which allow a very limited form of one-way homomorphic encryption that lets you do equality checking. Now, we are going to start from where we left off, and use elliptic curve pairings, together with a few other mathematical tricks, in order to allow a prover to prove that they know a solution for a particular QAP without revealing anything else about the actual solution. This article will focus on the Pinocchio protocol by Parno, Gentry, Howell and Raykova from 2013 (often called PGHR13); there are a few variations on the basic mechanism, so a zk-SNARK scheme implemented in practice may work slightly differently, but the basic principles will in general remain the same. To start off, let us go into the key cryptographic assumption underlying the security of the mechanism that we are going to use: the knowledge-of-exponent assumption. Basically, if you get a pair of points P and Q, where P * k = Q, and you get a point C, then it is not possible to come up with C * k unless C is “derived” from P in some way that you know. This may seem intuitively obvious, but this assumption actually cannot be derived from any other assumption (eg. discrete log hardness) that we usually use when proving security of elliptic curve-based protocols, and so zk-SNARKs do in fact rest on a somewhat shakier foundation than elliptic curve cryptography more generally — although it’s still sturdy enough that most cryptographers are okay with it. Now, let’s go into how this can be used. Supposed that a pair of points (P, Q) falls from the sky, where P * k = Q, but nobody knows what the value of k is. Now, suppose that I come up with a pair of points (R, S) where R * k = S. Then, the KoE assumption implies that the only way I could have made that pair of points was by taking P and Q, and multiplying both by some factor r that I personally know. Note also that thanks to the magic of elliptic curve pairings, checking that R = k * S doesn’t actually require knowing k - instead, you can simply check whether or not e(R, Q) = e(P, S). Let’s do something more interesting. Suppose that we have ten pairs of points fall from the sky: (P_1, Q_1), (P_2, Q_2)… (P_10, Q_10). In all cases, P_i * k = Q_i. Suppose that I then provide you with a pair of points (R, S) where R * k = S. What do you know now? You know that R is some linear combination P_1 * i_1 + P_2 * i_2 + … + P_10 * i_10, where I know the coefficients i_1, i_2 … i_10. That is, the only way to arrive at such a pair of points (R, S) is to take some multiples of P_1, P_2 … P_10 and add them together, and make the same calculation with Q_1, Q_2 … Q_10. Note that, given any specific set of P_1…P_10 points that you might want to check linear combinations for, you can’t actually create the accompanying Q_1…Q_10 points without knowing what k is, and if you do know what k is then you can create a pair (R, S) where R * k = S for whatever R you want, without bothering to create a linear combination. Hence, for this to work it’s absolutely imperative that whoever creates those points is trustworthy and actually deletes k once they created the ten points. This is where the concept of a “trusted setup” comes from. Remember that the solution to a QAP is a set of polynomials (A, B, C) such that A(x) * B(x) - C(x) = H(x) * Z(x), where: The sets {A_1…A_m}, {B_1…B_m} and {C_1…C_m} and the polynomial Z are part of the problem statement. However, in most real-world cases, A, B and C are extremely large; for something with many thousands of circuit gates like a hash function, the polynomials (and the factors for the linear combinations) may have many thousands of terms. Hence, instead of having the prover provide the linear combinations directly, we are going to use the trick that we introduced above to have the prover prove that they are providing something which is a linear combination, but without revealing anything else. You might have noticed that the trick above works on elliptic curve points, not polynomials. Hence, what actually happens is that we add the following values to the trusted setup: You can think of t as a “secret point” at which the polynomial is evaluated. G is a “generator” (some random elliptic curve point that is specified as part of the protocol) and t, k_a, k_b and k_c are “toxic waste”, numbers that absolutely must be deleted at all costs, or else whoever has them will be able to make fake proofs. Now, if someone gives you a pair of points P, Q such that P * k_a = Q (reminder: we don’t need k_a to check this, as we can do a pairing check), then you know that what they are giving you is a linear combination of A_i polynomials evaluated at t. Hence, so far the prover must give: Note that the prover doesn’t actually need to know (and shouldn’t know!) t, k_a, k_b or k_c to compute these values; rather, the prover should be able to compute these values just from the points that we’re adding to the trusted setup. The next step is to make sure that all three linear combinations have the same coefficients. This we can do by adding another set of values to the trusted setup: G * (A_i(t) + B_i(t) + C_i(t)) * b, where b is another number that should be considered “toxic waste” and discarded as soon as the trusted setup is completed. We can then have the prover create a linear combination with these values with the same coefficients, and use the same pairing trick as above to verify that this value matches up with the provided A + B + C. Finally, we need to prove that A * B - C = H * Z. We do this once again with a pairing check: e(π_a, π_b) / e(π_c, G) ?= e(π_h, G * Z(t)) Where π_h = G * H(t). If the connection between this equation and A * B - C = H * Z does not make sense to you, go back and read the article on pairings. We saw above how to convert A, B and C into elliptic curve points; G is just the generator (ie. the elliptic curve point equivalent of the number one). We can add G * Z(t) to the trusted setup. H is harder; H is just a polynomial, and we predict very little ahead of time about what its coefficients will be for each individual QAP solution. Hence, we need to add yet more data to the trusted setup; specifically the sequence: G, G * t, G * t², G * t³, G * t⁴ …. In the Zcash trusted setup, the sequence here goes up to about 2 million; this is how many powers of t you need to make sure that you will always be able to compute H(t), at least for the specific QAP instance that they care about. And with that, the prover can provide all of the information for the verifier to make the final check. There is one more detail that we need to discuss. Most of the time we don’t just want to prove in the abstract that some solution exists for some specific problem; rather, we want to prove either the correctness of some specific solution (eg. proving that if you take the word “cow” and SHA3 hash it a million times, the final result starts with 0x73064fe5), or that a solution exists if you restrict some of the parameters. For example, in a cryptocurrency instantiation where transaction amounts and account balances are encrypted, you want to prove that you know some decryption key k such that: The encrypted old_balance, tx_value and new_balance should be specified publicly, as those are the specific values that we are looking to verify at that particular time; only the decryption key should be hidden. Some slight modifications to the protocol are needed to create a “custom verification key” that corresponds to some specific restriction on the inputs. Now, let’s step back a bit. First of all, here’s the verification algorithm in its entirety, courtesy of ben Sasson, Tromer, Virza and Chiesa: The first line deals with parametrization; essentially, you can think of its function as being to create a “custom verification key” for the specific instance of the problem where some of the arguments are specified. The second line is the linear combination check for A, B and C; the third line is the check that the linear combinations have the same coefficients, and the fourth line is the product check A * B - C = H * Z. Altogether, the verification process is a few elliptic curve multiplications (one for each “public” input variable), and five pairing checks, one of which includes an additional pairing multiplication. The proof contains eight elliptic curve points: a pair of points each for A(t), B(t) and C(t), a point π_k for b * (A(t) + B(t) + C(t)), and a point π_h for H(t). Seven of these points are on the F_p curve (32 bytes each, as you can compress the y coordinate to a single bit), and in the Zcash implementation one point (π_b) is on the twisted curve in F_p² (64 bytes), so the total size of the proof is ~288 bytes. The two computationally hardest parts of creating a proof are: The basic reason why creating a proof is so hard is the fact that what was a single binary logic gate in the original computation turns into an operation that must be cryptographically processed through elliptic curve operations if we are making a zero-knowledge proof out of it. This fact, together with the superlinearity of fast Fourier transforms, means that proof creation takes ~20–40 seconds for a Zcash transaction. Another very important question is: can we try to make the trusted setup a little… less trust-demanding? Unfortunately we can’t make it completely trustless; the KoE assumption itself precludes making independent pairs (P_i, P_i * k) without knowing what k is. However, we can increase security greatly by using N-of-N multiparty computation - that is, constructing the trusted setup between N parties in such a way that as long as at least one of the participants deleted their toxic waste then you’re okay. To get a bit of a feel for how you would do this, here’s a simple algorithm for taking an existing set (G, G * t, G * t², G * t³…), and “adding in” your own secret so that you need both your secret and the previous secret (or previous set of secrets) to cheat. The output set is simply: G, (G * t) * s, (G * t²) * s², (G * t³) * s³… Note that you can produce this set knowing only the original set and s, and the new set functions in the same way as the old set, except now using t*s as the “toxic waste” instead of t. As long as you and the person (or people) who created the previous set do not both fail to delete your toxic waste and later collude, the set is “safe”. Doing this for the complete trusted setup is quite a bit harder, as there are several values involved, and the algorithm has to be done between the parties in several rounds. It’s an area of active research to see if the multi-party computation algorithm can be simplified further and made to require fewer rounds or made more parallelizable, as the more you can do that the more parties it becomes feasible to include into the trusted setup procedure. It’s reasonable to see why a trusted setup between six participants who all know and work with each other might make some people uncomfortable, but a trusted setup with thousands of participants would be nearly indistinguishable from no trust at all - and if you’re really paranoid, you can get in and participate in the setup procedure yourself, and be sure that you personally deleted your value. Another area of active research is the use of other approaches that do not use pairings and the same trusted setup paradigm to achieve the same goal; see Eli ben Sasson’s recent presentation for one alternative (though be warned, it’s at least as mathematically complicated as SNARKs are!) Special thanks to Ariel Gabizon and Christian Reitwiessner for reviewing. -- -- 16 Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title:  General 
Date: Date not available
Content:





















Dark Mode Toggle








 General 

 General 

Blockchains
Cryptography
Economics
Fun
General
Gitcoin
Math
Philosophy
Translations




2024 Sep 28

Making Ethereum alignment legible



2024 Sep 02

Glue and coprocessor architectures



2024 Aug 21

Plurality philosophy in an incredibly oversized nutshell



2024 Aug 03

Review: museums of the future, Dubai and Tokyo



2024 Jul 23

Exploring circle STARKs



2024 Jul 17

Against choosing your political allegiances based on who is "pro-crypto"



2024 Jun 30

Epochs and slots all the way down: ways to give Ethereum users faster transaction confirmation times



2024 May 31

Some reflections on the Bitcoin block size war



2024 May 29

Layer 2s as cultural extensions of Ethereum



2024 May 23

How do layer 2s really differ from execution sharding?



2024 May 17

The near and mid-term future of improving the Ethereum network's permissionlessness and decentralization



2024 May 09

Multidimensional gas pricing



2024 Apr 29

Binius: highly efficient proofs over binary fields



2024 Apr 01

Degen communism: the only correct political ideology



2024 Mar 29

What else could memecoins be?



2024 Mar 28

Ethereum has blobs. Where do we go from here?



2024 Feb 09

Ask security questions



2024 Jan 31

The end of my childhood



2024 Jan 30

The promise and challenges of crypto + AI applications



2023 Dec 28

Make Ethereum Cypherpunk Again



2023 Nov 27

My techno-optimism



2023 Nov 14

Exit games for EVM validiums: the return of Plasma



2023 Oct 31

Different types of layer 2s



2023 Sep 30

Should Ethereum be okay with enshrining more things in the protocol?



2023 Aug 16

What do I think about Community Notes?



2023 Jul 24

What do I think about biometric proof of personhood?



2023 Jun 20

Deeper dive on cross-L2 reading for wallets and other use cases



2023 Jun 09

The Three Transitions



2023 May 21

Don't overload Ethereum's consensus



2023 Apr 14

Travel time ~= 750 * distance ^ 0.6



2023 Mar 31

How will Ethereum's multi-client philosophy interact with ZK-EVMs?



2023 Feb 28

Some personal user experiences



2023 Jan 20

An incomplete guide to stealth addresses



2022 Dec 30

What even is an institution?



2022 Dec 06

Updating my blog: a quick GPT chatbot coding experiment



2022 Dec 05

What in the Ethereum application ecosystem excites me



2022 Nov 19

Having a safe CEX: proof of solvency and beyond



2022 Oct 28

The Revenue-Evil Curve: a different way to think about prioritizing public goods funding



2022 Sep 20

DAOs are not corporations: where decentralization in autonomous organizations matters



2022 Sep 17

What kind of layer 3s make sense?



2022 Sep 09

Should there be demand-based recurring fees on ENS domains?



2022 Aug 04

The different types of ZK-EVMs



2022 Jul 13

What do I think about network states?



2022 Jun 20

My 40-liter backpack travel guide



2022 Jun 15

Some ways to use ZK-SNARKs for privacy



2022 Jun 12

Where to use a blockchain in non-financial applications?



2022 May 25

Two thought experiments to evaluate automated stablecoins



2022 Apr 01

In Defense of Bitcoin Maximalism



2022 Mar 29

The roads not taken



2022 Mar 14

How do trusted setups work?



2022 Feb 28

Encapsulated vs systemic complexity in protocol design



2022 Jan 26

Soulbound



2021 Dec 19

The bulldozer vs vetocracy political axis



2021 Dec 06

Endgame



2021 Nov 16

Review of Optimism retro funding round 1



2021 Nov 05

Halo and more: exploring incremental verification and SNARKs without pairings



2021 Oct 31

Crypto Cities



2021 Sep 26

On Nathan Schneider on the limits of cryptoeconomics



2021 Aug 22

Alternatives to selling at below-market-clearing prices for achieving fairness (or community sentiment, or fun)



2021 Aug 16

Moving beyond coin voting governance



2021 Jul 29

Against overuse of the Gini coefficient



2021 Jun 18

Verkle trees



2021 May 25

Blockchain voting is overrated among uninformed people but underrated among informed people



2021 May 23

The Limits to Blockchain Scalability



2021 Apr 07

Why sharding is great: demystifying the technical properties



2021 Apr 02

Gitcoin Grants Round 9: The Next Phase of Growth



2021 Mar 23

The Most Important Scarce Resource is Legitimacy



2021 Feb 18

Prediction Markets: Tales from the Election



2021 Jan 26

An approximate introduction to how zk-SNARKs are possible



2021 Jan 11

Why we need wide adoption of social recovery wallets



2021 Jan 05

An Incomplete Guide to Rollups



2020 Dec 28

Endnotes on 2020: Crypto and Beyond



2020 Nov 08

Convex and Concave Dispositions



2020 Nov 06

Why Proof of Stake (Nov 2020)



2020 Oct 18

Gitcoin Grants Round 7 Retrospective



2020 Sep 11

Coordination, Good and Bad



2020 Aug 20

Trust Models



2020 Aug 17

A Philosophy of Blockchain Validation



2020 Jul 22

Gitcoin Grants Round 6 Retrospective



2020 Jul 20

Exploring Fully Homomorphic Encryption



2020 Apr 30

Gitcoin Grants Round 5 Retrospective



2020 Mar 21

A Quick Garbled Circuits Primer



2020 Jan 28

Review of Gitcoin Quadratic Funding Round 4



2019 Dec 26

Base Layers And Functionality Escape Velocity



2019 Dec 24

Christmas Special



2019 Dec 07

Quadratic Payments: A Primer



2019 Nov 22

Hard Problems in Cryptocurrency: Five Years Later



2019 Oct 24

Review of Gitcoin Quadratic Funding Round 3



2019 Oct 01

In-person meatspace protocol to prove unconditional possession of a private key



2019 Sep 22

Understanding PLONK



2019 Aug 28

The Dawn of Hybrid Layer 2 Protocols



2019 Jun 12

Sidechains vs Plasma vs Sharding



2019 May 12

Fast Fourier Transforms



2019 May 09

Control as Liability



2019 Apr 16

On Free Speech



2019 Apr 03

On Collusion



2019 Apr 01

[Mirror] Cantor was Wrong: debunking the infinite set hierarchy



2018 Dec 05

A CBC Casper Tutorial



2018 Nov 25

[Mirror] Central Planning as Overfitting



2018 Aug 26

Layer 1 Should Be Innovative in the Short Term but Less in the Long Term



2018 Aug 07

A Guide to 99% Fault Tolerant Consensus



2018 Jul 21

STARKs, Part 3: Into the Weeds



2018 Apr 20

On Radical Markets



2018 Mar 28

Governance, Part 2: Plutocracy Is Still Bad



2017 Dec 31

Proof of Stake FAQ



2017 Dec 31

Sharding FAQ



2017 Dec 17

Notes on Blockchain Governance



2017 Dec 14

A Quick Gasprice Market Analysis



2017 Nov 22

STARKs, Part II: Thank Goodness It's FRI-day



2017 Nov 09

STARKs, Part I: Proofs with Polynomials



2017 Oct 17

On Medium-of-Exchange Token Valuations



2017 Sep 14

A Prehistory of the Ethereum Protocol



2017 Jul 27

A Note on Metcalfe's Law, Externalities and Ecosystem Splits



2017 Jul 16

The Triangle of Harm



2017 Jun 22

On Path Independence



2017 Jun 09

Analyzing Token Sale Models



2017 May 08

Engineering Security Through Coordination Problems



2017 Mar 14

Hard Forks, Soft Forks, Defaults and Coercion



2017 Mar 11

A Note On Charity Through Marginal Price Discrimination



2017 Feb 01

[Mirror] Zk-SNARKs: Under the Hood



2017 Jan 14

[Mirror] Exploring Elliptic Curve Pairings



2016 Dec 29

[Mirror] A Proof of Stake Design Philosophy



2016 Dec 10

[Mirror] Quadratic Arithmetic Programs: from Zero to Hero


 
================================================================================
Title: x.com
Date: Date not available
Content:



x.com


































================================================================================
Title: A (brief and incomplete) history of censorship in /r/Bitcoin | by John Blocke | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in John Blocke Follow -- 19 Listen Share Please do not use the censored /r/bitcoin or Bitcointalk. Use /r/btc instead. The free and open discussions on this forum help individuals and the Bitcoin community achieve Truth. Everyone has some wisdom or knowledge to contribute to a discussion, and everyone who reads the discussion and gains that knowledge gets closer to the Truth. This is much more effective than having truth dictated by a handful of moderators or voted on by an electorate. -Theymos, in a post on Bitcointalk in 2013. Anyone who has been following Bitcoin closely over the past couple of years should by now be well aware of the issues being debated and the existence of censorship in some of Bitcoin’s most prominent communities. For the unaware, a primer: The Bitcoin network is currently at max load, and today is capable of processing approximately three transactions per second. This was not part of the original design of the Bitcoin protocol, and the 1MB block size limit was added in 2010 by Satoshi Nakamoto himself as a temporary anti-spam measure. Because bitcoins were so cheap at the time, and the number of bitcoin users so few, making transactions on the bitcoin network was effectively free. The concern was that a malicious entity could simply flood the network with transactions, filling up blocks and bogging down transaction speeds for legitimate users. Because transactions were so cheap to make, such an attack would have cost the perpetrator very little to pull off, and could have crippled the entire bitcoin network while it was still in its infancy. Former bitcoin lead maintainer Gavin Andresen addressed this attack in a blog post, writing: The block reward was 50 BTC back then, so miners could sell a block’s worth of coin for about $1.50. That gives a rough idea of how much it would cost an attacker to produce a ‘poisonous block’ to disrupt the network– a dollar or two. Lots of people are willing to spend a dollar or two “for the lulz” — they enjoy causing trouble, and are willing to spend either lots of time or a modest amount of money to cause trouble. Today the block reward is 25 BTC and the price is over $400; miners get over $10,000 for the blocks they produce. An attacker would have to spend close to that amount to produce a ‘poisonous block.’ But even this one megabyte limit was hardly restrictive; at the time the average block size ranged from 200 bytes to occasional peaks of around one kilobyte. The one megabyte limit was meant to handle new user influx and peak period transactions up to several thousand times what the average daily transaction volume was at the time. In October 2010, Satoshi Nakamoto even laid out his plan for increasing the maximum block size: It can be phased in, like: if (blocknumber > 115000)maxblocksize = largerlimit It can start being in versions way ahead, so by the time it reaches that block number and goes into effect, the older versions that don’t have it are already obsolete. Pretty simple, right? One would think. Since the limit was introduced in 2010, there have been countless discussions on the necessity as well as the methods that would be used to increase this limit, and Bitcoin’s transaction processing capabilities with it. Those attempts have repeatedly been blocked by a small group of developers, and in recent years discussion of increasing the limit has been censored from some of Bitcoin’s largest discussion forums, all of which are moderated by the same individual, who posts using the handle Theymos. What is forbidden includes any discussion of code changes that propose increasing the limitation. Some don’t believe the censorship is problematic, or refuse to acknowledge that it is censorship at all. Here’s Blockstream CEO Adam Back: And Blockstream CTO and Bitcoin Core developer, Gregory Maxwell: “But /r/btc at this moment is smoking hot proof that /r/bitcoin is doing something right and that it’s not just a question of moderator punishment.” (Source, archive) And Blockstream contractor and Bitcoin Core developer Luke-jr: “Manipulating public opinion is not censorship” (Source, archive) “I am not aware of any evidence that /r/Bitcoin engages in censorship.” (Source, archive) “/u/theymos is one of the most anti-censorship people I know” (Source, archive) And Bitcoin Core developer Peter Todd: “Roger [Ver]’s ideas aren’t getting censored, they’re just not getting listened too. [sic]” (Source, archive) And /r/bitcoin moderator /u/frankenmint: “From my perspective we aren’t participating in censorship in any tangible way, for example, me going out of my way to get your content removed from medium.com would be me engaging in censorship…” (Source, archive) Based on this outpouring of support from certain interested parties, it’s almost as if they’d have you believe there were no censorship happening at all! Pay no attention to the fact that /u/theymos has been shown to have financial dealings with Blockstream. Let’s take a look at censorship on /r/bitcoin through the ages: May 7th, 2015. Using a tool called UnReddit, we can see a large number of deleted comments in a thread on increasing the block size. August 9th, 2015. A highly upvoted thread (archive)(705 points, 89% upvoted) on /r/bitcoin receives three Reddit gildings for asking: Do you believe in an open and permissionless network, or do you think Bitcoin will die because someone published some code and people are allowed to know it? /r/bitcoin moderator /u/BashCo posts a response and is heavily downvoted when he says: Given the fact that the block size limit debate hasn’t achieved anything even remotely resembling consensus, yet BitcoinXT contains code which could fragment the blockchain and existing ecosystem, the decision to moderate BitcoinXT topics as off-topic is consistent with actions taken towards alternate blockchains like Litecoin, Dogecoin, Ethereum, etc. I suggest we drop the inflammatory rhetoric and get to work on devising a way to scale Bitcoin which will achieve consensus. Again for the uninitiated: the moderators of /r/bitcoin attempt to classify discussion of Bitcoin code changes (only the ones that attempt to increase the limit) as off-topic on the basis of being “altcoins.” Altcoins are entirely different currencies, with their own ledgers and tokens, and are not inter-operable with Bitcoin. BitcoinXT, on the other hand, runs on the same Bitcoin network as other Bitcoin software, uses the same tokens, and the same ledger, and is interoperable. A user running the BitcoinXT software is perfectly capable of transacting bitcoins with a user running the Bitcoin Core software. August 13th, 2015. /u/aminok has his post (archive) deleted, in which he asked the mods: “please don’t try to impose your will on the Bitcoin community.” He posted about it in an uncensored Bitcoin subreddit. August 14th, 2015. The very next day /u/aminok was then banned for posting a thread asking “How is the Bitcoin community supposed to build consensus to do a hard fork when the /r/bitcoin mods ban any discussion of a hard fork proposal that does not have consensus?” (archive). The thread was deleted after reaching the #1 spot on /r/bitcoin. Aminok posted about the banning in an uncensored subreddit. /r/bitcoin moderator /u/StarMaged chimed in to offer this reasoning: August 15th, 2015. A now [deleted] post (archive) on /r/bitcoin calling for the moderators to step down garnered more than 2,800 upvotes (91% upvoted), making it one of the highest-voted threads of /r/bitcoin history. The community demonstrated consensus (heh) that the current /r/bitcoin mod squad was corrupt, participating in censorship, and needed to go. Ironically, in the same thread, /r/bitcoin moderator /u/BashCo says that he supports consensus, before admitting that he is “regrettably” censoring posts. August 16th, 2015. Moderator /u/BashCo admits that the mods are participating in censorship: More accurately, I support consensus. Attempts to moderate BitcoinXT topics based on the lack of consensus has regrettably escalated to censorship. (archive) The same day, user /u/SatoshisGhost was banned for mentioning BitcoinXT. A popular Bitcoin webcomic artist /u/raisethelimit was given a 30 day ban for “trolling” when he tried posting two of his comics there. /u/Jackten was given a 7-day ban for attempting to discuss Bitcoin-XT. In the comments, user /u/dnivi3 posts about how none of his posts are getting through either, and then edits his post to say that he has been banned from /r/bitcoin (presumably for his comment in /r/bitcoin_uncensored). The same day, during this massive purge of users, /r/bitcoin head moderator /u/Theymos posted a thread titled, “Call for more moderators” (archive). The thread was heavily downvoted, and sits at 0 points (43% upvoted). His post includes the phrase: “Don’t apply if you disagree with /r/Bitcoin policy.” August 18th, 2015. /u/SundoshiNakatoto has his post (archive) deleted for encouraging others to educate themselves on which code they like best (Core or XT) and running a full node. The deletion was discussed in an uncensored subreddit. August 19th, 2015. /r/bitcoin moderator /u/jratcliff63367 makes a post to Let’s Talk Bitcoin titled “Confessions of an /r/bitcoin moderator.” He observes: At the minimum we should allow the discussion and let people ‘vote’ their opinion based on which client they choose to run. If the bitcoin network is so fragile that someone running a different client with a different ruleset is an issue, then we have bigger problems. The reality is that people running different versions of the client is no threat at all. It is an opportunity for the community to vote on the direction they want bitcoin to take. Bitcoin-xt is not a ‘threat’ to bitcoin. It it is an option, a choice, a candidate to be voted on. One where the community can vote on which features they want to see in bitcoin, versus those which they do not. August 24th, 2015. /u/chinawat is banned for noticing and pointing out all the recent bans. August 25th, 2015. /u/SwagPokerz explains how the /r/bitcoin moderators have manipulated the subreddit’s CSS to mask the presence of deleted comments. With /r/bitcoin’s custom CSS (70,000 lines!), deleted comments are masked, and the new comment tree will display like this: Worth noting here is that Reddit’s moddiquette guidelines tell moderators not to “Hide reddit ads or purposely mislead users with custom CSS.” August 29th, 2015. Ten days after his anti-censorship post on Let’s Talk Bitcoin, former /r/bitcoin moderator /u/jratcliff63367 announces that he has been removed from his role. In the thread, /u/theymos chimes in to explain why he removed jratcliff: He was going beyond just expressing a reasonable opinion. He was being particularly disrespectful and nonconstructive for a long period of time. Disagreement (even loud public disagreement) is fine, but we can’t effectively moderate without some sort of respect and trust between moderators. September 4th, 2015. /u/hardleft121 announces that he has been removed as a moderator of /r/bitcoin for “inactivity” (archive). /u/hardleft121 is a bit of a legend in the Bitcoin subreddits for his frequent generous tipping of bitcoin users, sometimes even giving away hundreds of dollars at a time. The same day, he makes a post to /r/bitcoin (archive) that garners 403 points and the sympathy and outrage of /r/bitcoin users. In the thread, it is revealed that /u/SeansOutpost was not removed as moderator, despite also being quite inactive as a mod. When asked what he thinks of the censorship, /u/SeansOutpost wrote: I don’t understand/agree with why we can’t talk about this like adults. I am not qualified to make a judgement on whether or not XT is the way to go. But at this point, it seems obvious blocksize has to go up. I’m not sure why we can’t openly discuss all options. Open discussion would seem to be in the spirit of what Satoshi wanted. He was shortly thereafter removed as a moderator. November 4th, 2015. /u/Theymos attempts to explain his censorship policies, writing: You can promote BIP 101 as an idea. You can’t promote (on /r/Bitcoin) the actual usage of BIP 101. When the idea has consensus, then it can be rolled out.(archive) This once again raises the question: how is something supposed to gain community consensus if it is not allowed to be discussed? Theymos also has a strong tendency to play word games. It is very unclear and never explicitly defined what the difference of “promoting as an idea” and “promoting the usage of” is. The main factor seems to be whether it is discussed favorably (not permitted) or unfavorably (permitted). November 5th, 2015. In a post that was downvoted to -749 points (archive), /u/theymos threatens to ban prominent Bitcoin company Coinbase and its CEO Brian Armstrong from /r/bitcoin for supporting block size increase proposal BIP101. Theymos also threatened to remove Coinbase from bitcoin.org (which he controls). In the same thread, /u/StarMaged chimes in and admits how the post being discussed had been deleted by /r/bitcoin mods several times prior to being allowed. StarMaged also says of users commenting on the censorship and the ensuing confusion that “That is why repeatedly saying things like that to someone is so dangerous.” Yes, ideas are dangerous. December 26th, 2015. /u/nathan2055 tested /r/bitcoin moderation policies by posting “a totally innocuous discussion thread” (archive) asking “What is you guy’s [sic] opinion on BitcoinXT and BIP101?” Of course, the post was immediately removed from /r/bitcoin. Moderator /u/StarMaged had to venture into /r/Bitcoin_Uncensored to provide his rationale for deleting the post: /u/Nathan2055 also posted a screenshot of a private message exchange he had with /r/bitcoin moderator /u/110101002, in which the moderator explains that discussion of Coinbase is now completely forbidden in /r/bitcoin for being off-topic, simply because they run a different backend that is not Bitcoin Core. In the same thread, StarMaged goes on to explain: December 27th, 2015. Theymos made good on his earlier threats (archive) to remove Coinbase from bitcoin.org, along with any other company that dared to voice an opinion in favor of bigger blocks (as seen in this Github commit). The post calling this behavior out had 419 points (87% upvoted), and the normally polite Erik Voorhees went so far as to say: December 28th, 2015. A rogue /r/bitcoin mod going by the username /u/CensorshipIsTheWorst leaked the following conversation from the /r/Bitcoin mod-mail: from Aussiehash [M] to /r/Bitcoin sent 1 day ago https://np.reddit.com/r/Bitcoin/comments/3ycayp/brian_armstrong_on_twitter_coinbase_is_now/ I’ve removed this post for now. I’m happy for other mods to reverse or otherwise. from theymos [M] via /r/Bitcoin to Aussiehash [M] sent 11 hours ago I agree with removing it because it is mainly about XT. However, AFAICT Coinbase is currently still using Bitcoin and should therefore be allowed on /r/Bitcoinfor now in general. coblee said so in the bitcoin.org pull request, and I tend to trust him. (Perhaps Cobra was unaware of coblee’s reliability, or maybe he [IMO reasonably] considered Coinbase too dangerous/incompetent/reckless to list on bitcoin.org even though they are currently using Bitcoin.) from StarMaged [M] via /r/Bitcoin to theymos [M] sent 5 hours ago Honestly, it seems to me that until the moment of the split, they are still a bitcoin company. They are just buying/selling two currencies at once instead of one. I am really uncomfortable with the idea that this policy would encourage companies to silently support XT and then only tell us at the last moment. Yeah, sure, remove those posts as altcoin promotion, but people outside of this subreddit should be allowed to make an informed decision without us scaring companies into censoring themselves. I feel that this is where that term “censorship” might actually be relevant, since our actions here on this issue would affect the speech of a company elsewhere out of fear of retaliation from this subreddit. Something to ponder. A few hours later, /u/colsatre had his moderator position revoked, leading some to speculate that he was the rogue mod. /u/CensorshipIsTheWorst never posted again. January 9th, 2016. A Github pull request to revert the removal of Coinbase and others is ignored, despite overwhelming consensus from Github users that the pull request should be merged (only three users “NACKed” the request). The post discussing this matter (archive)had 926 upvotes (89% upvoted). Of course the “top comment,” with a score of -53, from rabid censorship supporter and JoinMarket developer /u/belcher_ insists that the vote is invalid because the pull request was “brigaded.” You’ll notice a similar refrain from the mods of /r/Bitcoin whenever they delete a post that disagrees with their status quo: The post was upvoted, ergo it was “brigaded,” ergo we had to remove it. It is interesting to note that a post with a score of negative 53 points would appear at the top of the comments thread. In addition to hiding the scores of new posts for 8-12 hours to obscure voting activity, the moderators of /r/bitcoin will set the default comment sorting behavior in threads they disagree with to “controversial,” so that the most heavily downvoted comments appear at the top of the thread, deceiving users unfamiliar with the practice into thinking that the most unpopular opinions are in fact the most popular. March 8th, 2016. Long-time bitcoin user and inventor of the mining pool /u/slush0 remarks that the /r/bitcoin moderators censored a video he made explaining how users of his mining pool can vote on which software to run. Although a self-described crypto-anarchist, Slush seems to have developed quite the case of Stockholm syndrome. Today he can be found actively participating in discussions on /r/Bitcoin and calling for the destruction of bitcoin’s security model. The same day, /u/BeYourOwnBank points out that /r/bitcoin moderators have been deleting posts of Satoshi Nakamoto quotes. (Example 1, Example 2) March 9th, 2016. /u/alwayswatchyoursix posts an accusation that mods of /r/bitcoin are actively searching /r/btc for users to ban. Former /r/bitcoin moderator /u/MineForeman chimes in to confirm that this is exactly what he has been doing, and admits that it is an automated process. /u/MineForeman goes on to explain the methodology that his banning bot uses. March 27th, 2016. /u/blockologist makes two posts to /r/bitcoin. One is titled “Poll — Classic or Core,” (Classic was another attempt at a block size increase, after BitcoinXT was killed through a prolific DDoS attack) and the other is a blog post from Gavin Andresen titled “Collaboration requires communication.” Both were deleted. A moderator of /r/bitcoin provided this rationale: May 18th, 2016. /u/Annapurna317 receives a 15-day ban from /r/bitcoin for posting the following comment: July 24th, 2016. Three-year old reddit account and longtime /r/bitcoin poster /u/chinawat demonstrates that his responses to a 1-day old account on /r/bitcoin are being selectively hidden. August 29th, 2016. One can use a tool called “ceddit” to see which comments in a thread have been deleted. Here is one example from this day: October 23rd, 2016. /u/andromedavirus provides proof that one of his comments was censored from /r/bitcoin. What had originally been censored was news of a Bitcoin miner conference held in China, which saw over 300 attendees who were overwhelmingly in favor of a blocksize increase. News of the conference was censored from /r/bitcoin, until a day later a dismissive and inaccurate tweet from prolific troll Samson Mow was permitted to remain: The next day, /u/andromedavirus was banned from /r/bitcoin (archive) for being a “lying troll.” October 31st, 2016. /u/BeijingBitcoins posted (archive) my own article, There Will Be No Bitcoin Split, to /r/bitcoin. It briefly attained the top post position in the subreddit before one of the mods locked the comments. After realizing what happened while attempting to respond to a comment, /u/BeijingBitcoins then created a post on the uncensored /r/btc about how the comments had been locked. That post quickly gained attention, and within one hour of the /r/btc post drawing attention to the censorship, the original thread at /r/bitcoin had been removed altogether. The next day, /r/bitcoin moderator /u/Frankenmint made a post in /r/btc to announce that he was the one who had locked the comments and then deleted the post. He explained that he had to lock the comments to prevent it from “devolving” (into what, exactly?). I had a brief exchange with him, in which I asked: JB: Do you believe that a community is not capable of regulating itself? FM: honestly…no not really… it will just fracture down into factions that have their own special interests at heart. JB: If so, do you believe that a complex system like bitcoin is capable of regulating itself FM: No — there are still software maintainers who follow and enforce the rules, and partcipants who seek to shape rules as they see fit — at a point to where shaping those rules causes a breaking change in the core protocol, those participants have now fractured themselves into a new subgroup. His response right here sums up the entire position of the /r/bitcoin moderation team. While Bitcoin was originally invented as a crypto-anarchist plaything, and gained early attention from hardcore libertarians, it has now become overrun with paternalistic autocrats such as /u/theymos, /u/BashCo, and /u/frankenmint. These gentlemen rule with an iron fist, deleting posts that they deem to be “dangerous” to the community, and believing that both the online social community and Bitcoin itself are incapable of self-regulation. Instead they believe that only through the paternalistic wisdom of their own minds will Bitcoin ever amount to anything. While today the exasperated members of the Bitcoin community accept the heavy-handed censorship as a fact of life, it was not always like this. The examples collected here are but few, and were collected over the course of two hours of research. While today the censorship is accepted as the norm, you can see in some of the examples above that it was once an incredibly contentious issue among the community. Sadly, many members of the Bitcoin community, including those who have at times described themselves as cypherpunks, libertarians, and crypto-anarchists, have all become complacent with the status quo. Not only do they not attempt to fight against this tyranny, but they casually accept it, defend it, and continue participating in heavily censored forums where the voices of a significant number of their entire community are prevented from ever being heard. What is happening is gas-lighting of the highest order. John Blocke implores these people to take action: Denounce censorship, and do not participate in censored forums. The Reddit admins have shown time and again that they do not care to disrupt the disruption of a $10 billion open source software movement, so we must take matters into our own hands. Do not let Bitcoin perish at the hands of a petty tyrant like Theymos. Addendum: this article was disappeared from /r/bitcoin within minutes of it being posted there by /u/BitcoinGuerrilla. Please take one more look at some of Reddit’s Moddiquette guidelines, under the “Please Don’t” section: -- -- 19 Reading furnishes the mind only with materials of knowledge; it is thinking that makes what we read ours. Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title: x.com
Date: Date not available
Content:



x.com


































================================================================================
Title: buidlbox
Date: Date not available
Content:
Join a hackathon. Find a team. Win prizes. We buidl with the best in web3 Show off your hackathon experiences to really stand out Unlock customizations by participating in hackathons Climb the ranks and get spotted builders have found insane opportunities atenyun pro buidler travcrypto Marketing humptycalderon Founder pro buidler “Buidlbox was my launchpad into web3. Joining hackathons connected me with like-minded builders, and together we formed Aratta Labs. Buidlbox fostered a welcoming community, encouraged collaboration, and pushed me to strengthen my Solidity skills.” Devs who win hackathons 10x their job interviews Join a hackathon. Find a team. Win prizes.
================================================================================
Title: x.com
Date: Date not available
Content:



x.com


































================================================================================
Title: Against on-chain governance. Refuting (and rebuking) Fred Ehrsam’s… | by Vlad Zamfir | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in Vlad Zamfir Follow -- 36 Listen Share I’ve been thinking about blockchain governance for a long time, and recently my understanding of the process has become (I think) a lot more clear. I was (and still am) working on a blog post titled “Blockchain Governance 101”, which I hope will share some basic language for reasoning about governance. Before I managed to finish (the research is ongoing, and it’s not my top priority), Fred Ehrsam published a blog post “Blockchain Governance: Programming Our Future”, framing the discussion as a primarily design problem. I really don’t think blockchain governance (or governance in general) can be understood as a design problem. I think it’s almost always a mistake to imagine that you can design and institute a governance process, especially for an existing blockchain community with existing processes, and especially without adequate knowledge of the existing governance processes. This blog post is not an introduction to blockchain governance (that is still in the pipeline) and won’t give an overview of key concepts, issues or questions. Nor will it provide any blockchain governance solutions or suggestions. It is instead refutation of core positions that Fred takes in his blog, along with a warning about the dangers of suggesting that people should try to institute their favorite formalized governance model without clear regard for the existing blockchain governance processes. I think that Fred’s intentions are good, and the views he expressed in his blog post are understandable. But I also I think the blog is missing important concepts and context to the point that I consider it harmful, warranting a long-form response (i.e. a response outside of Tweet storms). Fred and I agree that blockchain governance is extremely important. I think it’s the second (rather than first) most important factor that will determine whether blockchains end up being a public good, or a menace to the public. Second only after the shared purpose of the blockchain community (a purpose that legitimate governance presumably is supposed to bear out). There is no question that governance decisions matter, and big time. And the structure of a blockchain governance process can dramatically effect governance outcomes. However, this does not make blockchain governance a design problem. Governance is a process. It involves players who participate in that process to produce decisions that affect the governed resources. These decisions can have a lasting impacts on many stakeholders. The participants coordinate around this process, and they build knowledge about the governance processes, about each other, about their incentives and about their states of knowledge. This knowledge can be tacit or formal, it can be local knowledge or it can be common knowledge. Participants can develop strong norms (e.g. no contentious hard forks). The information and incentives of participants constrains their participation, and they need to be understood in the context of the underlying culture, as well as their individual contexts. The information and incentives of participants can change over time, but they don’t change instantly, nor do they change independently of each other’s incentives and states of knowledge. The process of changing the way that something is governed is not magic, and in our case it’s also very human. So even if it was possible to come up with an ideal solution to “the governance design problem”, it might not be possible for the participants to adopt it. There are pre-existing constraints on participants’ ability to coordinate to adopt any proposed governance solutions. And these constraints can even be entirely in their heads, in the form of local or tacit knowledge, or norms and common knowledge. So when you make a governance proposal, the participants in the current governance process are going to ask themselves “is this a significant improvement over the process we are using now?”, “Will the other participants in the process think so, too?”, “What will it take to switch from our current process to this one?”, and “Is it worth the disruption to existing processes?” Even if you somehow come up with an ideal governance design, you haven’t “solved governance” for anyone until it is successfully adopted. Fred seems to have missed the fact that information is just as important of a “critical component of governance” as incentives or “mechanisms for coordination” (which is a subset of a broader “critical component” called “governance structure”, from my point of view). Not a huge deal! When you propose an alternative governance process, and especially when you suggest that we need an alternative process, you’re proclaiming “the existing governance processes are not good enough” and you’re begging the question of “are the existing processes legitimate?”. You’re a stone’s throw away from advocating for revolution; a replacement of the existing governance processes. Revolution isn’t easy or risk-free, and forking means that you will leave some of your peers behind. When you are advocating for revolution, you had better be sure that the revolution will succeed, and that the new process will be effective and legitimate Fred’s blog post showed no almost acknowledgement of the existence of functoning blockchain governance processes in either Bitcoin or Ethereum. He dismissed them out-of-hand with little consideration, perhaps because Fred knows that the reader likely already assumes that Bitcoin governance is broken and that Vitalik controls Ethereum governance. He showed very little knowledge about how the Ethereum governence process works. That’s fair enough, because the Ethereum governance process are not very well documented, and it’s hard to understand them without actively participating in them. They evolved over time, and are not an institutionalization of a formal model, and therefore have no inherent reason to be easy to identify or communicate. No one has full information about the structure of the processes involved. Partly because documenting reality is hard work, and so is communication and education. Partly because the processes are still evolving. And also partly because people only inevitably learn about the processes that they participate in themselves. Most observers don’t participate, and can’t be expected to understand the process, at least until clear documentation is available. To clear up some of the misinformation about Ethereum governance shared in Fred’s blog: Proof-of-stake will not change the Ethereum governance processes at all, and miners *do not* have a significant influence on the governance process today. Moreover, Vitalik does not have nearly the amount of power to influence governance outcomes that Fred (and lots of other people) assume that he does. The structure of the governance processes limit Vitalik’s power, just as it limits everyone’s power. Unfortunately for the curious reader, documenting the Ethereum governance process is out of scope for this blog. Stay patient! :) “On-chain governance” refers to the idea that the blockchain nodes automatically upgrade when an on-chain governance process decides on an upgrade and that it’s time to install it. No hard forks required. Adopting on-chain governance is incredibly risky because it always represents a revolution. It’s not necessarily a revolt against the governance processes that merge code into software repositories (as those could conceivably be encoded on-chain, though this notably isn’t normally what is proposed), but a revolution that overthrows the processes that govern full nodes. With off-chain governance (the current norm), a node operator has to consciously decide whether to install a hard fork to have his node be consensus-compatible with the nodes of operators who also decided to install that hard fork. With off-chain blockchain governance, node operators’ decision processes are absolutely necessary parts of blockchain governance, and therefore node operators are necessary participants in blockchain governance. On-chain governance makes node operator participation in governance completely unnecessary. It makes it so that a node operator, making no decision, follows the decisions made by the on-chain process. Defaults are incredibly powerful: The more nodes follow the default, the less feasible it is for a concerned node operator to refuse to install a hard fork. (Technically, it’s not actually a hard fork or a soft fork, though the upgrade would have been a hard or soft fork in an off-chain governance model.) Why is this a big deal? Well, the protocol doesn’t have an anti-Sybil measure on node operators (or on their users). This means that node operators (and therefore users) will necessarily be robbed of their participation in governance, by any on-chain governance proposal. The role of full nodes in off-chain governance provides an important check to balance against the power of processes that make changes to software. On-chain governance removes that check, and the balance it provides. Unless there are governance processes that get Sybil-resistant input from node operators, on-chain governance therefore has always has the potential to disenfranchise node operators (and users) of the blockchain. If you are a blockchain node operator (or user), or if you care about blockchain node operators (or users), then I hope you will learn to regard on-chain governance proposals with extreme apprehension. Coin holder interests and user interest are not naturally aligned. Users have to buy coins from coin holders to use the blockchain. Coin holders would prefer if users had to pay more. While users would prefer if they had to pay less. It is critical to recognize that “user” and “coin holder” are roles that have distinct incentives corresponding to their roles. Just because you’re both a user and a coin holder, or even if most users today are also coin holders, does not mean that we should design our blockchain protocol or our blockchain governance processes to favour coin holder interests over user interests. The market between blockchains is absolutely not perfectly competitive. It is highly oligopolistic because blockchains have strong network effects (obviously because they are p2p protocols, and more subtly because different blockchain communities have different cultures). So it’s very risky to assume that coin holders want what’s good for users because the price of coins will go down as a result. That will only happen if the users bear sufficient cost. And that cost might be high, and even if it isn’t, any cost is something I wouldn’t wish on all of the users of the blockchain. If on-chain governance is a big risk to node operators and users, then plutocratic on-chain governance is at least as risky. And any on-chain governance proposal that is driven by coin holder votes has this problem. Yes, even if it’s based on prediction markets (futarchy), and even if the coins are locked up. Not only is on-chain coin-based governance inconsistent with user interests, it is also antithetical to the ethos of public blockchains. The blockchain is for the public, to serve the public interest. It isn’t for cryptocurrency whales to get more rich. Cyptocurrency holdings (like wealth in global society) is highly concentrated in the hands of a very small number of people. The blockchain isn’t supposed to be owned by anyone… nevermind by a small group of superrich individuals. Blockchain governance is too important for us to let a small handful of cryptocurrency whales make arbitrary decisions. I agree with Fred that the blockchain itself is a tremendously valuable tool for experimenting with governance tools and processes. I am a fan (in theory) of on-chain tools that are in smart contracts but aren’t part of the blockchain protocol. And I think we should experiment with that. I also agree that off-chain tools can be extremely valuable as a way for participants to signal to each other. These kinds of tools can provide a signal to node operators that actually helps them make a decision, as opposed to on-chain processes that make their decision unnecessary. These tools can also help participants in the governance processes that affect changes to software repositories. If we find that we can build useful blockchain governance tools using the blockchain, that’s great! However, overthrowing the processes that govern the software implementations of the blockchain, or the processes that govern full nodes is most probably not well-advised. Blockchain governance is not an abstract design problem. It’s an applied social problem. It’s a problem that is defined in the context of existing governance structure, and in the context of the current information and incentives of today’s participants in today’s governance processes. We need to look very carefully at the blockchain governance processes that we already have before we declare that they don’t exist, are illegitimate, propose alternatives, fork, or advocate for revolution. It is your right to propose the institutionalization of your favorite formal governance model as a replacement to the existing structure of governance, of course. However, consider that insodoing you may be sabotaging the legitimacy of the existing governance process. The existing process may have evolved over time and may not be well understood or documented. Replacing something you don’t understand with something you do has obvious appeal, but it is reckless. So maybe hold off until recklessness is the only tenable option? Please be careful. The effectiveness and legitimacy of our blockchain governance processes are critically important. Don’t needlessly put them at risk! Treat your articulation of governance problems and proposals as a loaded weapon and don’t shoot in the dark. -- -- 36 Absurdist, troll. Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title:  An approximate introduction to how zk-SNARKs are possible 
Date: Date not available
Content:
Special thanks to Dankrad Feist, Karl Floersch and Hsiao-wei Wang for feedback and review. Perhaps the most powerful cryptographic technology to come out of the last decade is general-purpose succinct zero knowledge proofs, usually called zk-SNARKs ("zero knowledge succinct arguments of knowledge"). A zk-SNARK allows you to generate a proof that some computation has some particular output, in such a way that the proof can be verified extremely quickly even if the underlying computation takes a very long time to run. The "ZK" ("zero knowledge") part adds an additional feature: the proof can keep some of the inputs to the computation hidden. For example, you can make a proof for the statement "I know a secret number such that if you take the word ‘cow', add the number to the end, and SHA256 hash it 100 million times, the output starts with 0x57d00485aa". The verifier can verify the proof far more quickly than it would take for them to run 100 million hashes themselves, and the proof would also not reveal what the secret number is. In the context of blockchains, this has two very powerful applications: But zk-SNARKs are quite complex; indeed, as recently as in 2014-17 they were still frequently called "moon math". The good news is that since then, the protocols have become simpler and our understanding of them has become much better. This post will try to explain how ZK-SNARKs work, in a way that should be understandable to someone with a medium level of understanding of mathematics. Note that we will focus on scalability; privacy for these protocols is actually relatively easy once the scalability is there, so we will get back to that topic at the end. Let us take the example that we started with: we have a number (we can encode "cow" followed by the secret input as an integer), we take the SHA256 hash of that number, then we do that again another 99,999,999 times, we get the output, and we check what its starting digits are. This is a huge computation. A "succinct" proof is one where both the size of the proof and the time required to verify it grow much more slowly than the computation to be verified. If we want a "succinct" proof, we cannot require the verifier to do some work per round of hashing (because then the verification time would be proportional to the computation). Instead, the verifier must somehow check the whole computation without peeking into each individual piece of the computation. One natural technique is random sampling: how about we just have the verifier peek into the computation in 500 different places, check that those parts are correct, and if all 500 checks pass then assume that the rest of the computation must with high probability be fine, too? Such a procedure could even be turned into a non-interactive proof using the Fiat-Shamir heuristic: the prover computes a Merkle root of the computation, uses the Merkle root to pseudorandomly choose 500 indices, and provides the 500 corresponding Merkle branches of the data. The key idea is that the prover does not know which branches they will need to reveal until they have already "committed to" the data. If a malicious prover tries to fudge the data after learning which indices are going to be checked, that would change the Merkle root, which would result in a new set of random indices, which would require fudging the data again... trapping the malicious prover in an endless cycle. But unfortunately there is a fatal flaw in naively applying random sampling to spot-check a computation in this way: computation is inherently fragile. If a malicious prover flips one bit somewhere in the middle of a computation, they can make it give a completely different result, and a random sampling verifier would almost never find out.  If tasked with the problem of coming up with a zk-SNARK protocol, many people would make their way to this point and then get stuck and give up. How can a verifier possibly check every single piece of the computation, without looking at each piece of the computation individually? But it turns out that there is a clever solution. Polynomials are a special class of algebraic expressions of the form: i.e. they are a sum of any (finite!) number of terms of the form \(c x^k\). There are many things that are fascinating about polynomials. But here we are going to zoom in on a particular one: polynomials are a single mathematical object that can contain an unbounded amount of information (think of them as a list of integers and this is obvious). The fourth example above contained 816 digits of tau, and one can easily imagine a polynomial that contains far more. Furthermore, a single equation between polynomials can represent an unbounded number of equations between numbers. For example, consider the equation \(A(x) + B(x) = C(x)\). If this equation is true, then it's also true that: And so on for every possible coordinate. You can even construct polynomials to deliberately represent sets of numbers so you can check many equations all at once. For example, suppose that you wanted to check: You can use a procedure called Lagrange interpolation to construct polynomials \(A(x)\) that give (12, 10, 15, 15) as outputs at some specific set of coordinates (eg. (0, 1, 2, 3)), \(B(x)\) the outputs (1, 8, 8, 13) on those same coordinates, and so forth. In fact, here are the polynomials: Checking the equation \(A(x) + B(x) = C(x)\) with these polynomials checks all four above equations at the same time. You can even check relationships between a large number of adjacent evaluations of the same polynomial using a simple polynomial equation. This is slightly more advanced. Suppose that you want to check that, for a given polynomial \(F\), \(F(x+2) = F(x) + F(x+1)\) within the integer range \(\{0, 1 ... 98\}\) (so if you also check \(F(0) = F(1) = 1\), then \(F(100)\) would be the 100th Fibonacci number). As polynomials, \(F(x+2) - F(x+1) - F(x)\) would not be exactly zero, as it could give arbitrary answers outside the range \(x = \{0, 1 ... 98\}\). But we can do something clever. In general, there is a rule that if a polynomial \(P\) is zero across some set \(S=\{x_1, x_2 ... x_n\}\) then it can be expressed as \(P(x) = Z(x) * H(x)\), where \(Z(x) =\) \((x - x_1) * (x - x_2) * ... * (x - x_n)\) and \(H(x)\) is also a polynomial. In other words, any polynomial that equals zero across some set is a (polynomial) multiple of the simplest (lowest-degree) polynomial that equals zero across that same set. Why is this the case? It is a nice corollary of polynomial long division: the factor theorem. We know that, when dividing \(P(x)\) by \(Z(x)\), we will get a quotient \(Q(x)\) and a remainer \(R(x)\) which satisfy \(P(x) = Z(x) * Q(x) + R(x)\), where the degree of the remainder \(R(x)\) is strictly less than that of \(Z(x)\). Since we know that \(P\) is zero on all of \(S\), it means that \(R\) has to be zero on all of \(S\) as well. So we can simply compute \(R(x)\) via polynomial interpolation, since it's a polynomial of degree at most \(n-1\) and we know \(n\) values (the zeroes at \(S\)). Interpolating a polynomial with all zeroes gives the zero polynomial, thus \(R(x) = 0\) and \(H(x)= Q(x)\). Going back to our example, if we have a polynomial \(F\) that encodes Fibonacci numbers (so \(F(x+2) = F(x) + F(x+1)\) across \(x = \{0, 1 ... 98\}\)), then I can convince you that \(F\) actually satisfies this condition by proving that the polynomial \(P(x) =\) \(F(x+2) - F(x+1) - F(x)\) is zero over that range, by giving you the quotient: \(H(x) = \frac{F(x+2) - F(x+1) - F(x)}{Z(x)}\) Where \(Z(x) = (x - 0) * (x - 1) * ... * (x - 98)\). You can calculate \(Z(x)\) yourself (ideally you would have it precomputed), check the equation, and if the check passes then \(F(x)\) satisfies the condition! Now, step back and notice what we did here. We converted a 100-step-long computation (computing the 100th Fibonacci number) into a single equation with polynomials. Of course, proving the N'th Fibonacci number is not an especially useful task, especially since Fibonacci numbers have a closed form. But you can use exactly the same basic technique, just with some extra polynomials and some more complicated equations, to encode arbitrary computations with an arbitrarily large number of steps. Now, if only there was a way to verify equations with polynomials that's much faster than checking each coefficient... And once again, it turns out that there is an answer: polynomial commitments. A polynomial commitment is best viewed as a special way to "hash" a polynomial, where the hash has the additional property that you can check equations between polynomials by checking equations between their hashes. Different polynomial commitment schemes have different properties in terms of exactly what kinds of equations you can check. Here are some common examples of things you can do with various polynomial commitment schemes (we use \(com(P)\) to mean "the commitment to the polynomial \(P\)"): It's worth noting that these primitives can be constructed from each other. If you can add and multiply, then you can evaluate: to prove that \(P(w) = z\), you can construct \(Q(x) = \frac{P(x) - z}{x - w}\), and the verifier can check if \(Q(x) * (x - w) + z \stackrel{?}{=} P(x)\). This works because if such a polynomial \(Q(x)\) exists, then \(P(x) - z = Q(x) * (x - w)\), which means that \(P(x) - z\) equals zero at \(w\) (as \(x - w\) equals zero at \(w\)) and so \(P(x)\) equals \(z\) at \(w\). And if you can evaluate, you can do all kinds of checks. This is because there is a mathematical theorem that says, approximately, that if some equation involving some polynomials holds true at a randomly selected coordinate, then it almost certainly holds true for the polynomials as a whole. So if all we have is a mechanism to prove evaluations, we can check eg. our equation \(P(x + 2) - P(x + 1) - P(x) = Z(x) * H(x)\) using an interactive game: As I alluded to earlier, we can make this non-interactive using the Fiat-Shamir heuristic: the prover can compute r themselves by setting r = hash(com(P), com(H)) (where hash is any cryptographic hash function; it does not need any special properties). The prover cannot "cheat" by picking P and H that "fit" at that particular r but not elsewhere, because they do not know r at the time that they are picking P and H! There are three major schemes that are widely used at the moment: bulletproofs, Kate and FRI. To be honest, they're not that simple. There's a reason why all this math did not really take off until 2015 or so. In my opinion, the easiest one to understand fully is FRI (Kate is easier if you're willing to accept elliptic curve pairings as a "black box", but pairings are really complicated, so altogether I find FRI simpler). Here is how a simplified version of FRI works (the real protocol has many tricks and optimizations that are missing here for simplicity). Suppose that you have a polynomial \(P\) with degree \(< n\). The commitment to \(P\) is a Merkle root of a set of evaluations to \(P\) at some set of pre-selected coordinates (eg. \(\{0, 1 .... 8n-1\}\), though this is not the most efficient choice). Now, we need to add something extra to prove that this set of evaluations actually is a degree \(< n\) polynomial. Let \(Q\) be the polynomial only containing the even coefficients of \(P\), and \(R\) be the polynomial only containing the odd coefficients of \(P\). So if \(P(x) = x^4 + 4x^3 + 6x^2 + 4x + 1\), then \(Q(x) = x^2 + 6x + 1\) and \(R(x) = 4x + 4\) (note that the degrees of the coefficients get "collapsed down" to the range \([0...\frac{n}{2})\)). Notice that \(P(x) = Q(x^2) + x * R(x^2)\) (if this isn't immediately obvious to you, stop and think and look at the example above until it is). We ask the prover to provide Merkle roots for \(Q(x)\) and \(R(x)\). We then generate a random number \(r\) and ask the prover to provide a "random linear combination" \(S(x) = Q(x) + r * R(x)\). We pseudorandomly sample a large set of indices (using the already-provided Merkle roots as the seed for the randomness as before), and ask the prover to provide the Merkle branches for \(P\), \(Q\), \(R\) and \(S\) at these indices. At each of these provided coordinates, we check that: If we do enough checks, then we can be convinced that the "expected" values of \(S(x)\) are different from the "provided" values in at most, say, 1% of cases. Notice that \(Q\) and \(R\) both have degree \(< \frac{n}{2}\). Because \(S\) is a linear combination of \(Q\) and \(R\), \(S\) also has degree \(< \frac{n}{2}\). And this works in reverse: if we can prove \(S\) has degree \(< \frac{n}{2}\), then the fact that it's a randomly chosen combination prevents the prover from choosing malicious \(Q\) and \(R\) with hidden high-degree coefficients that "cancel out", so \(Q\) and \(R\) must both be degree \(< \frac{n}{2}\), and because \(P(x) = Q(x^2) + x * R(x^2)\), we know that \(P\) must have degree \(< n\). From here, we simply repeat the game with \(S\), progressively "reducing" the polynomial we care about to a lower and lower degree, until it's at a sufficiently low degree that we can check it directly. As in the previous examples, "Bob" here is an abstraction, useful for cryptographers to mentally reason about the protocol. In reality, Alice is generating the entire proof herself, and to prevent her from cheating we use Fiat-Shamir: we choose each randomly samples coordinate or r value based on the hash of the data generated in the proof up until that point. A full "FRI commitment" to \(P\) (in this simplified protocol) would consist of: Each step in the process can introduce a bit of "error", but if you add enough checks, then the total error will be low enough that you can prove that \(P(x)\) equals a degree \(< n\) polynomial in at least, say, 80% of positions. And this is sufficient for our use cases. If you want to cheat in a zk-SNARK, you would need to make a polynomial commitment for a fractional expression (eg. to "prove" the false claim that \(x^2 + 2x + 3\) evaluated at \(4\) equals \(5\), you would need to provide a polynomial commitment for \(\frac{x^2 + 2x + 3 - 5}{x - 4} = x + 6 + \frac{22}{x - 4}\)). The set of evaluations for such a fractional expression would differ from the evaluations for any real degree \(< n\) polynomial in so many positions that any attempt to make a FRI commitment to them would fail at some step. Also, you can check carefully that the total number and size of the objects in the FRI commitment is logarithmic in the degree, so for large polynomials, the commitment really is much smaller than the polynomial itself. To check equations between different polynomial commitments of this type (eg. check \(A(x) + B(x) = C(x)\) given FRI commitments to \(A\), \(B\) and \(C\)), simply randomly select many indices, ask the prover for Merkle branches at each of those indices for each polynomial, and verify that the equation actually holds true at each of those positions. The above description is a highly inefficient protocol; there is a whole host of algebraic tricks that can increase its efficiency by a factor of something like a hundred, and you need these tricks if you want a protocol that is actually viable for, say, use inside a blockchain transaction. In particular, for example, \(Q\) and \(R\) are not actually necessary, because if you choose your evaluation points very cleverly, you can reconstruct the evaluations of \(Q\) and \(R\) that you need directly from evaluations of \(P\). But the above description should be enough to convince you that a polynomial commitment is fundamentally possible. In the descriptions above, there was a hidden assumption: that each individual "evaluation" of a polynomial was small. But when we are dealing with polynomials that are big, this is clearly not true. If we take our example from above, \(628x^{271} + 318x^{270} + 530x^{269} + ... + 69x + 381\), that encodes 816 digits of tau, and evaluate it at \(x=1000\), you get.... an 816-digit number containing all of those digits of tau. And so there is one more thing that we need to add. In a real implementation, all of the arithmetic that we are doing here would not be done using "regular" arithmetic over real numbers. Instead, it would be done using modular arithmetic. We redefine all of our arithmetic operations as follows. We pick some prime "modulus" p. The % operator means "take the remainder of": \(15\ \%\ 7 = 1\), \(53\ \%\ 10 = 3\), etc (note that the answer is always non-negative, so for example \(-1\ \%\ 10 = 9\)). We redefine \(x + y \Rightarrow (x + y)\) % \(p\) \(x * y \Rightarrow (x * y)\) % \(p\) \(x^y \Rightarrow (x^y)\) % \(p\) \(x - y \Rightarrow (x - y)\) % \(p\) \(x / y \Rightarrow (x * y ^{p-2})\) % \(p\) The above rules are all self-consistent. For example, if \(p = 7\), then: More complex identities such as the distributive law also hold: \((2 + 4) \cdot 3\) and \(2 \cdot 3 + 4 \cdot 3\) both evaluate to \(4\). Even formulas like \((a^2 - b^2)\) = \((a - b) \cdot (a + b)\) are still true in this new kind of arithmetic. Division is the hardest part; we can't use regular division because we want the values to always remain integers, and regular division often gives non-integer results (as in the case of \(3/5\)). We get around this problem using Fermat's little theorem, which states that for any nonzero \(x < p\), it holds that \(x^{p-1}\) % \(p = 1\). This implies that \(x^{p-2}\) gives a number which, if multiplied by \(x\) one more time, gives \(1\), and so we can say that \(x^{p-2}\) (which is an integer) equals \(\frac{1}{x}\). A somewhat more complicated but faster way to evaluate this modular division operator is the extended Euclidean algorithm, implemented in python here.  With modular math we've created an entirely new system of arithmetic, and it's self-consistent in all the same ways traditional arithmetic is self-consistent. Hence, we can talk about all of the same kinds of structures over this field, including polynomials, that we talk about in "regular math". Cryptographers love working in modular math (or, more generally, "finite fields") because there is a bound on the size of a number that can arise as a result of any modular math calculation - no matter what you do, the values will not "escape" the set \(\{0, 1, 2 ... p-1\}\). Even evaluating a degree-1-million polynomial in a finite field will never give an answer outside that set. Let's say we want to prove that, for some polynomial \(P\), \(0 \le P(n) < 2^{64}\), without revealing the exact value of \(P(n)\). This is a common use case in blockchain transactions, where you want to prove that a transaction leaves a balance non-negative without revealing what that balance is. We can construct a proof for this with the following polynomial equations (assuming for simplicity \(n = 64\)): The latter two statements can be restated as "pure" polynomial equations as follows (in this context \(Z(x) = (x - 0) * (x - 1) * ... * (x - 63)\)): The idea is that successive evaluations of \(P(i)\) build up the number bit-by-bit: if \(P(4) = 13\), then the sequence of evaluations going up to that point would be: \(\{0, 1, 3, 6, 13\}\). In binary, 1 is 1, 3 is 11, 6 is 110, 13 is 1101; notice how \(P(x+1) = P(x) * 2 + R(x)\) keeps adding one bit to the end as long as \(R(x)\) is zero or one. Any number within the range \(0 \le x < 2^{64}\) can be built up over 64 steps in this way, any number outside that range cannot. But there is a problem: how do we know that the commitments to \(P(x)\) and \(R(x)\) don't "leak" information that allows us to uncover the exact value of \(P(64)\), which we are trying to keep hidden? There is some good news: these proofs are small proofs that can make statements about a large amount of data and computation. So in general, the proof will very often simply not be big enough to leak more than a little bit of information. But can we go from "only a little bit" to "zero"? Fortunately, we can. Here, one fairly general trick is to add some "fudge factors" into the polynomials. When we choose \(P\), add a small multiple of \(Z(x)\) into the polynomial (that is, set \(P'(x) = P(x) + Z(x) * E(x)\) for some random \(E(x)\)). This does not affect the correctness of the statement (in fact, \(P'\) evaluates to the same values as \(P\) on the coordinates that "the computation is happening in", so it's still a valid transcript), but it can add enough extra "noise" into the commitments to make any remaining information unrecoverable. Additionally, in the case of FRI, it's important to not sample random points that are within the domain that computation is happening in (in this case \(\{0...64\}\)).
================================================================================
Title: Ethereum Classic
Date: Aug 29, 2024
Content:
FAQs Frequently asked questions by various stakeholders Why Classic? Start here to get the lowdown on Ethereum Classic's reason for being and unique value proposition Knowledge Further reading on the foundations that underpin ETC Videos A collection of videos and podcasts to keep you informed on ETC concepts and happenings Services Apps, Wallets, and Exchanges that integrate with ETC; 100% unaudited, so watch out for the rug pulls! Community If you long for communication with people who are interested in ETC, here's how to find them Network RPC Endpoints, Explorers, Network Monitors, and other resources for the technically inclined Mining Pools, Software, and Hardware requirements will help you mine ETC for fun and profit Development Testnets, Tooling, Clients, and information on how to contribute to the ETC protocol itself External links are unofficial community submissions. External links are unofficial community submissions. As incumbent institutions are increasingly threatened by the wild potential of blockchain tech, only truly decentralized and secure cryptocurrencies will survive. Existing in response to contract censorship on sister chain Ethereum™ (ETH) and to uphold and preserve the principle of Code is Law, Ethereum Classic (ETC) has proven its ability to resist censorship against all odds, and deliver the original Ethereum vision of unstoppable applications. By combining the technology of Ethereum™ (ETH) with the philosophy of Bitcoin (BTC), Ethereum Classic (ETC) is uniquely positioned to be the base layer smart contracts platform of the future, as other chains become compromised or captured by special interests. Welcome, and please be invited to discover the past, present, and future of Ethereum Classic; its principles, value proposition, community, and more - to understand why Classic. Made with <3 for the Original Ethereum Vision
================================================================================
Title: Gitcoin’s Q3 Match: The Radical Results | Gitcoin Blog
Date: Date not available
Content:
Easily launch & run a grants program with our out-of-the-box tools Build custom mechanisms with our powerful capital allocation protocol Access Gitcoin’s expertise in grants to ensure success Get in touch to learn more about our tools & services  Create a Builder profile to apply for funding Discover grants available from our partners Learn more about our quarterly grants program Access our Support documentation Read success stories from other Builders News and information for Gitcoin Grants applicants Discover projects to support through Gitcoin & partners Donate through our quarterly grants program Access our Support documentation News and information for Gitcoin Grants donors Learn about Gitcoin Read about our Impact Join discussions about our ecosystem Get funding to build with Gitcoin Discover projects to support Manage your grants program Apply to funding opportunities Gitcoin Grants About our grants program Grants Stack Tools for managing your own grants program Launch Builder ↗ Create a profile Launch Explorer ↗ Support a project Impact Report ↗ $60+ million in funding distributed App Center View all the apps in our ecosystem Launch Manager ↗ Create a program Starting June 13th Donate to the Citizens Round ↗ Gitcoin Passport Protect your project from bots and bad actors Launch Passport ↗ Build online reputations and create trustworthy digital experiences Weekly Release Notes ↗ View Docs ↗ Follow ↗ Allo Protocol The building blocks for funding allocation All about Allo Read our announcement post Follow Allo on Twitter ↗ About Gitcoin Our vision and values Whitepaper Read our Whitepaper and Rainbowpaper Our Blog News and articles from our ecosystem Citizen Grants Join and Shape Gitcoin’s Future Learn about GTC Knowledge Hub Governance Forum Follow $270,000 for Ethereum projects from a record 1,982 contributions
We are thrilled to announce the finalized results of the Gitcoin Grants Q3 Match.

Round 1, in Q1 2019, distributed $38K via 132 contributions.
Round 2, in Q2 2019, distributed $56K via 214 contributions.
Round 3, in Q3 2019, distributed $270k via 1,982 contributions We are thrilled to announce the finalized results of the Gitcoin Grants Q3 Match. We are thrilled to see the growth, both in depth and in breadth, of Quadratic Funding on Gitcoin Grants. Let’s explore. Without further ado, here are the top 10 projects of Q3’s CLR Match. To see the full results, click here. All teams who participated in this round will receive their match via Gitcoin Grants, in the same account where donations from the crowd were processed. These will be in accounts by before Halloween! What a wonderful time to be building open source software. While structural issues still exist, blockchain has created new possibilities for open source communities to organize and allocate resources around shared set of goals. We are very fortunate to be at a time in which there is actually funding for open source. This is made possible by three key factors unique to the Ethereum ecosystem. Gitcoin’s match is just getting started. Here’s what’s next: We are thrilled to see the growth of this funding experiment, and we expect to see more to come in the future. We’re particularly enthralled by each and every one of you,who cares enough about this community to make your voice heard and to share the love with fellow Ethereum projects and humans. It is not the number of nodes which determine the strength of the network; rather, it is the strength of the links between them. ~ Team Gitcoin To learn more about Gitcoin, click below. We welcome you on our journey to grow open source while changing the way we work. 
================================================================================
Title: [1809.09044] Fraud and Data Availability Proofs: Maximising Light Client Security and Scaling Blockchains with Dishonest Majorities
Date: Date not available
Content:
Help | Advanced Search arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website. Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them. Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.  
arXiv Operational Status 
                    Get status notifications via
                    email
                    or slack

================================================================================
Title: How can a Safe hold asset on multiple chains? - Contracts - Safe Community Forum
Date: 
                    January 3, 2023,  2:59pm
                  
Content:
One of the few disadvantages smart contract wallets (Safes) have over EOAs is that they are tight to a specific network. While it is (in some cases) possible to create the same address on another network it will still be 2 completely independent Safes. After updates/ changing the owner structure those Safes can have nothing to do with each other. I am making here a proposal that would allow a Safe on Network A to control/ receive assets on any other chain that is connected via an “AMB bridge” (arbitrary message bridge, a bridge that is generalized enough to send arbitrary messages from 2 accounts on 2 chains to each other). For each other chain, a (counterfactual) Safe address can be calculated that is based on: safe address on source chain, source chain ID, target chain ID, bridge contract. (alternatively the bridge contract alone could contain information about source and target chain) In this proposal the “executeTx” function of the Safe would get an additional field: chainID (or bridge contract). However - the idea to have deterministic representations on other chains that are controlled by a Safe on a source chain is also possible without this. In the given example one could send tokens on chain ID100 to the Safe on Chain ID 1 by sending the tokens to the counterfactual address (0x002 on ID 100) even though this contract does not yet exist. Note further - 0x002 could be set up in a way that it can be exclusively controlled by 0x001 via the bridge. However - 0x001 could also set something like a session key that would be allowed to do transactions directly. Created with FigJam This would be so nice. I recently did the whole process of creating Safes for 1Hive Gardens on 3 other networks with the same address as our home Safe on Gnosis Chain… not a friendly experience and like you said they aren’t actually related to each other in way. Being able to bridge tokens between networks through our home safe would be awesome. Separately but related, it’d help if there was an easy interface for setting up your Safe on multiple networks with the same address - even if they couldn’t be controlled by the safe on the home network… just to simplify holding tokens on multiple networks. This would make safe so much more awesome great UX improvement ! Framing this differently EOAs got people used to tightly coupled signing and address. Contract wallets gets rid of this coupling.
Whilst still possible to have a contract wallet at the same address per network via create2 deployment, and to have the same verification logic shared between them, it is now a choice.
Eg one can choose looser restrictions on L2 wallets than L1. “After updates/ changing the owner structure those Safes can have nothing to do with each other.”, I agree that if an owner gives away ownership of their contract wallet on one rollup and not another, this is not an ideal configuration for a user to create. I feel that using multiple contract wallets on different chains needs an overarching manager tying them together. Perhaps wallet apps do this for users, implementing transfers on different chains (txs signed per chain id). The benefits that the proposed Safe Grant Program tends to bring are some good ideas that would enhance SAFE ecosystem in general I hope we could see this improvement in the nearest future However, I would like to share that it is still possible to have same Ethereum SAFE address on multiple chains (this is for those who are not aware) Short story:
Some mistakenly sent L2 and/or other side chains’ tokens to their Ethereum SAFE and that prompted the Safe team to bring up a recovery plan and that led to using same Ethereum SAFE address to create Safe on L2 and/or other side chains It is ONLY presently possible to deploy Ethereum SAFE address on other L2s and/or side chains (i.e used same address on Ethereum safe to create Safe on other chains) …but it is NOT presently possible to use SAFE address on L2 and side chains to create Safe on Ethereum or fellow L2 and/or side chains NOTE: This was ONLY recommended for recovery purposes.
L2 or other side chains SAFE created using existing Ethereum SAFE address were not fully supported Here is a video tutorial that guides on how to deploy Safe on L2 and/or other side chains using existing Ethereum SAFE address I have used the Safe deployed on other L2s using existing Ethereum SAFE address and the major issues faced are: Tokens still appears in my SAFE for many minutes after they have actually been sent out (but Refreshing the web page solves this) Other than Gas Fee tokens like MATIC, XDAI, AETH, OETH, Some other ERC20 tokens doesn’t show deposit history even though they’re well credited to my SAFE what else  (I will add if I remember any) Please note my proposal is different from deploying a Safe with the same address on different networks. The issue here is, that those are still independent Safes. So if e.g. you change an owner on network A it will not have any effect on network B. In my proposal the idea is that you have a Safe on network A but this Safe controls proxy Safes on all other networks. So if you change the owner structure on network A you in a way change the owner structure on all networks. Please also note that the addresses on all the different networks will be different. The downside of this approach is that it will be dependent on the existence (and the security) of a bridge between two networks. Multi-network Safes are an important feature to move this ecosystem to the next level for individuals and organizations. I’m glad to this is a focus. Would it be possible to build a Safe that has the same address across networks AND the properties of each Safe can be updated by the mainnet Ethereum network  by building this in multiple versions? Having the same address across networks would be great in terms of UX. This could potentially help users new to layer 2s (L2s) understand and visualize how assets are moving across networks from “one account”, from a UX perspective even though multiple accounts are created across networks. Features Having the same address across networks would be great in terms of UX. I would be interested in more details for this point. For me personally the primary advantage is that for most users it is less error prone when receiving funds. But besides this specific use case I don’t see that many UX benefits. From the technical point of view I see many disadvantages in having the same address: A point that @lukas brought up before was that the address concept should be elevated to a higher level. Or if we combine it to the concept proposed by @koeppelmann it would be on the chain where our main Safe is (e.g. Mainnet). On that chain we have a logic to look up the addresses on all other networks. There are already solutions for this (looking at you ENS). Additionally to this not depending on the same address allows to add support for non-evm networks at some point. I.e. it would be possible to use an AMB to Solana to control a contract on Solana from your Ethereum mainnet Safe. One point that in my opinion still needs to be improved (and I know that Gnosis is working on this) is the trust model around bridges. Else this is a single point of failure that is controlling quite a lot of accounts. That would be extremely useful, and cool. I’m not sure there’s much value in a Gnosis Safe that simply controls Safes on other networks if they have different addresses, especially if it doesn’t provide a bridge either. Seem like it’d be more valuable to have an interface that makes it easy to set up your Gnosis Safe on other networks with a matching address and with the same existing settings (not sure if that 2nd part is possible or if you can only match the settings at safe creation). The bridge apps in Gnosis work nicely already.  To me the pain point of different addresses on different networks is bigger than the pain point of needing to approve settings changes on multiple safes at once if you’re on multiple networks. Thank you for explaining these challenges clearly! Separate addresses make sense After learning of these tech and security issues it makes to not have the same address across networks. Even if you can re-use the same address on 8 out of 10 networks, the UX still needs to clearly solve for the 2 other networks as stated above. The main UX case I’m thinking of is receiving assets and keeping track of multiple wallet addresses for account management purposes. Account management is useful with the current EOA architecture because a user can copy and paste the same address across blockchain explorers and other tools. ENS linking Attaching an ENS domain to the mainnet Safe, e.g. adamhurwitz.eth, that is the same “vanity domain” across deployed networks seems like a potentially great UX solution if possible. E.g. I understand this is trying to solve the problem where people assume that a Safe like an EOA will have the same address across networks but feels a bit dangerous to then assume all chains will have the same address and this feels like it will have more confusing edge cases and the possibility of more mistakes made. A silky smooth ux with using create2 in the background could be quite nice though  Side thought: I wonder if there could be a safeReceiveErc20 function that could be added to prevent tokens getting lost  , would have some odd ux though with approvals and ui integrations. One way to improve the workflow would be to use a pull model instead of a push model. So instead of “transaction on chain A triggers message on chain B”, it’s “transaction on chain B synchronously reads chain A” (eg. through a Merkle proof, or in the future this could be batched with some KZG or SNARK or other scheme) This still has the same key property: safes live on chains B, C, D… but the validation rules live on chain A, so you only have one copy of the validation rules that needs to be edited, but it has a number of important benefits: Right - this is undoubtedly a good improvement for the use case in which EOAs are the owner of a Safe. As the Safe also can have contracts as owners (either e.g other Safes or even e.g. a DAO with arbitrary complex decision logic), I think this can not be used in all cases. For the EAO owner use case the flow would be like: I edited the figma file Would transactions necessarily be faster with a pull model? I’m thinking of situations where chain B is blocked or lagging in making transactions because it has to wait to pull and sync. It seems the security benefits of a pull model would still be a major advantage. That is making sure each chain has the correct state. Would transactions necessarily be faster with a pull model? I’m thinking of situations where chain B is blocked or lagging in making transactions because it has to wait to pull and sync. If you just changed the account owners, then you would have to wait some time for the changes to propagate. But transactions themselves should be instant, as you can always prove a slightly older state (though there would have to be some limit to this, so that key revocations can actually take effect) It’s also worth noting that theoretically this works not just for EOAs, but also for any pure-function-controlled account, though that would have to be standardized. Brainstorming with Tomiwa today I began to think about apps that create easy-to-use multi-chain (MC) experiences by making use of filters. It’ll be great to explore more MC apps that work well. Hey guys, I got referred to this problem and wonder if what we’re building at Peanut would help here. I think it would be useful for 1-of-n safes, but I’d like input if it’s helpful in a more general way. It seems like the main problem is that Safes are not guaranteed to have the same address across chains, and that mishaps like the Wintermute mishap are best avoided. At Peanut we’re developing the Smart Cheque, an abstraction that lets you e.g. create address-agnostic & chain-agnostic transfers. The way this would work is you create an initial secret-protected deposit on chain A. Then, from chain B, the target gnosis safe initiates a transaction to claim the deposit. This would bridge the funds over Axelar (or another AMB), and they’d then arrive with no possibility of getting the address wrong. The advantages of this: Disadvantages: Thoughts? In principle you could have multi-sig protected deposits, but I wonder how cumbersome that would be. Lovin’ the general idea of abstracting a single ENS name to an existence on whatever EVM-compatible chains that owner wants to publicly link to that ENS. But there have been so many ideas & side comments in this thread since January that I am unsure what the latest proposal/consensus is. Trying to understand why Safe refuses to make deployment of the same address on multiple chains easily available… While it can potentially have a usecase to have different addresses on different chains, or the logic that deployment on different chains is just optional… on the other hand it would be VERY beneficial to at least have the option to deploy on the same address on any other EVM chain, which currently is NOT available via graphic UI Please could you address the security issue you state usually? While the following scenario is definitely possible: “Alice deploys a Safe on Ethereum Mainnet only. Thereafter Bob deploys Safes on multiple chains with the exact same address as Alice Mainnet Safe. An unsuspecting user could now assume, that all of the addresses belong to Alice and therefore sending funds to the wrong person.” Would this example be the risk you guys are talking about? Or is there something else more severe? And back to the above example: how do other contract wallets manage this issue? e.g. Argent doesn’t even deploy on any other chain than ETH Mainnet & zksync Lite. The issue with different signing keys on different chains is real, can confirm - we are using Safe for community investments! Anyways, Safe is as well a decent solution as personal vault, here it makes definitely sense to at least have the option to deploy on the same address on multiple chains by default. Powered by Discourse, best viewed with JavaScript enabled
================================================================================
Title: GitHub - ethereum/consensus-specs: Ethereum Proof-of-Stake Consensus Specifications
Date: Date not available
Content:
We read every piece of feedback, and take your input very seriously. 
            To see all available qualifiers, see our documentation.
           
        Ethereum Proof-of-Stake Consensus Specifications
        To learn more about proof-of-stake and sharding, see the PoS documentation, sharding documentation and the research compendium. This repository hosts the current Ethereum proof-of-stake specifications. Discussions about design rationale and proposed changes can be brought up and discussed as issues. Solidified, agreed-upon changes to the spec can be made through pull requests.    Core specifications for Ethereum proof-of-stake clients can be found in specs. These are divided into features.
Features are researched and developed in parallel, and then consolidated into sequential upgrades when ready. Additional specifications and standards outside of requisite client functionality can be found in the following repos: The following are the broad design goals for the Ethereum proof-of-stake consensus specifications: Documentation on the different components used during spec writing can be found here: Ethereum Consensus Specs Conformance tests built from the executable python spec are available in the Ethereum Proof-of-Stake Consensus Spec Tests repo. Compressed tarballs are available in releases. The consensus-specs repo can be used by running the tests locally or inside a docker container. To run the tests locally: To run the tests inside a docker container: 
        Ethereum Proof-of-Stake Consensus Specifications
      
================================================================================
Title: Gini coefficient - Wikipedia
Date: Date not available
Content:

 In economics, the Gini coefficient (/ˈdʒiːni/ JEE-nee), also known as the Gini index or Gini ratio, is a measure of statistical dispersion intended to represent the income inequality, the wealth inequality, or the consumption inequality[3] within a nation or a social group. It was developed by Italian statistician and sociologist Corrado Gini.
 The Gini coefficient measures the inequality among the values of a frequency distribution, such as levels of income. A Gini coefficient of 0 reflects perfect equality, where all income or wealth values are the same, while a Gini coefficient of 1 (or 100%) reflects maximal inequality among values, a situation where a single individual has all the income while all others have none.[4][5]
 The Gini coefficient was proposed by Corrado Gini as a measure of inequality of income or wealth.[6] For OECD countries in the late 20th century, considering the effect of taxes and transfer payments, the income Gini coefficient ranged between 0.24 and 0.49, with Slovakia being the lowest and Mexico the highest.[7] African countries had the highest pre-tax Gini coefficients in 2008–2009, with South Africa having the world's highest, estimated to be 0.63 to 0.7.[8][9] However, this figure drops to 0.52 after social assistance is taken into account, and drops again to 0.47 after taxation.[10] The country with the lowest Gini coefficient is Slovakia, with a Gini coefficient of 0.232.[11] The Gini coefficient of the global income in 2005 has been estimated to be between 0.61 and 0.68 by various sources.[12][13]
 There are some issues in interpreting a Gini coefficient, as the same value may result from many different distribution curves. To mitigate this, the demographic structure should be taken into account. Countries with an aging population, or those with an increased birth rate, experience an increasing pre-tax Gini coefficient even if real income distribution for working adults remains constant. Many scholars have devised over a dozen variants of the Gini coefficient.[14][15][16]
 The Gini coefficient was developed by the Italian statistician Corrado Gini and published in his 1912 paper Variabilità e mutabilità (English: variability and mutability).[17][18] Building on the work of American economist Max Lorenz, Gini proposed that the difference between the hypothetical straight line depicting perfect equality, and the actual line depicting people's incomes, be used as a measure of inequality.[19] In this paper, he introduced the concept of simple mean difference as a measure of variability.
 He then applied the simple mean difference of observed variables to income and wealth inequality in his work On the measurement of concentration and variability of characters in 1914. Here, he presented the concentration ratio, which further developed in the Gini coefficient used today. Secondly, Gini observed that his proposed ratio can be also achieved by improving methods already introduced by Lorenz, Chatelain, or Séailles.
 In 1915, Gaetano Pietra introduced a geometrical interpretation between Gini’s proposed ratio and the ratio between the area of observed concentration and maximum concentration. This altered version of Gini coefficient became the most commonly used inequality index in upcoming years.[20]
 According to data from OECD, Gini coefficient was first officially used country-wide in Canada in the 1970s. Canadian index of income inequality ranged from 0.303 to 0.284 from 1976 to the end of 1980s. OECD started to publish more countries’ data since the start of the 21st century. Central European countries Slovenia, Czechia, and Slovakia have had the lowest inequality index out of all OECD countries ever since the 2000s. Scandinavian countries also frequently appeared at the top of the list of equality in the last decades.[21]
 The Gini coefficient is an index for the degree of inequality in the distribution of income/wealth, used to estimate how far a country's wealth or income distribution deviates from an equal distribution.[22]
 The Gini coefficient is usually defined mathematically based on the Lorenz curve, which plots the proportion of the total income of the population (y-axis) that is cumulatively earned by the bottom x of the population (see diagram).[23] The line at 45 degrees thus represents perfect equality of incomes. The Gini coefficient can then be thought of as the ratio of the area that lies between the line of equality and the Lorenz curve (marked A in the diagram) over the total area under the line of equality (marked A and B in the diagram); i.e., G = A/(A + B). If there are no negative incomes, it is also equal to 2A and 1 − 2B due to the fact that A + B = 0.5.[24]
 Assuming non-negative income or wealth for all, the Gini coefficient's theoretical range is from 0 (total equality) to 1 (absolute inequality). This measure is often rendered as a percentage, spanning 0 to 100. However, if negative values are factored in, as in cases of debt, the Gini index could exceed 1. Typically, we presuppose a positive mean or total, precluding a Gini coefficient below zero.[25]
 An alternative approach is to define the Gini coefficient as half of the relative mean absolute difference, which is equivalent to the definition based on the Lorenz curve.[26]  The mean absolute difference is the average absolute difference of all pairs of items of the population, and the relative mean absolute difference is the mean absolute difference divided by the average, 






x
¯





{\displaystyle {\bar {x}}}

, to normalize for scale. If xi is the wealth or income of person i, and there are n persons, then the Gini coefficient G is given by:
 When the income (or wealth) distribution is given as a continuous probability density function p(x), the Gini coefficient is again half of the relative mean absolute difference:
 where 




μ
=

∫

−
∞


∞


x
p
(
x
)

d
x



{\displaystyle \textstyle \mu =\int _{-\infty }^{\infty }xp(x)\,dx}

 is the mean of the distribution, and the lower limits of integration may be replaced by zero when all incomes are positive.[27]
 While the income distribution of any particular country will not correspond perfectly to the theoretical models,  these models can provide a qualitative explanation of the income distribution in a nation given the Gini coefficient.
 The extreme cases are represented by the most equal possible society in which every person receives the same income (G = 0), and the most unequal society (with N individuals) where a single person receives 100% of the total income and the remaining N − 1 people receive none (G = 1 − 1/N).
 A simple case assumes just two levels of income, low and high. If the high income group is a proportion u of the population and earns a proportion f of all income, then the Gini coefficient is f − u. A more graded distribution with these same values u and f will always have a higher Gini coefficient than f − u.
 For example, if the wealthiest u = 20% of the population has f = 80% of all income (see Pareto principle), the income Gini coefficient is at least 60%. In another example,[28] if u = 1% of the world's population owns  f = 50% of all wealth, the wealth Gini coefficient is at least 49%.
 In some cases, this equation can be applied to calculate the Gini coefficient without direct reference to the Lorenz curve. For example, (taking y to indicate the income or wealth of a person or household):
 The Gini coefficient can also be considered as half the relative mean absolute difference. For a random sample S with values 




y

1


≤

y

2


≤
⋯
≤

y

n




{\displaystyle y_{1}\leq y_{2}\leq \cdots \leq y_{n}}

, the sample Gini coefficient
 is a consistent estimator of the population Gini coefficient, but is not in general unbiased. In simplified form:
 There does not exist a sample statistic that is always an unbiased estimator of the population Gini coefficient.
 For a discrete probability distribution with probability mass function 



f
(

y

i


)
,


{\displaystyle f(y_{i}),}

 



i
=
1
,
…
,
n


{\displaystyle i=1,\ldots ,n}

, where  



f
(

y

i


)


{\displaystyle f(y_{i})}

 is the fraction of the population with income or wealth 




y

i


>
0


{\displaystyle y_{i}>0}

, the Gini coefficient is:
 where
 If the points with non-zero probabilities are indexed in increasing order 



(

y

i


<

y

i
+
1


)


{\displaystyle (y_{i}<y_{i+1})}

, then:
 where
 When the population is large, the income distribution may be represented by a continuous probability density function f(x) where f(x) dx is the fraction of the population with wealth or income in the interval dx about x.  If F(x) is the cumulative distribution function for f(x):
 and L(x) is the Lorenz function:
 then the Lorenz curve L(F) may then be represented as a function parametric in L(x) and F(x) and the value of B can be found by integration:
 The Gini coefficient can also be calculated directly from the cumulative distribution function of the distribution F(y). Defining μ as the mean of the distribution, and specifying that F(y) is zero for all negative values, the Gini coefficient is given by:
 The latter result comes from integration by parts. (Note that this formula can be applied when there are negative values if the integration is taken from minus infinity to plus infinity.)
 The Gini coefficient may be expressed in terms of the quantile function Q(F) (inverse of the cumulative distribution function: Q(F(x)) = x)
 Since the Gini coefficient is independent of scale, if the distribution function can be expressed in the form f(x,φ,a,b,c...) where φ is a scale factor and a, b, c... are dimensionless parameters, then the Gini coefficient will be a function only of a, b, c....[30] For example, for the exponential distribution, which is a function of only x and a scale parameter, the Gini coefficient is a constant, equal to 1/2.
 For some functional forms, the Gini index can be calculated explicitly. For example, if y follows a log-normal distribution with the standard deviation of logs equal to 



σ


{\displaystyle \sigma }

, then 



G
=
erf
⁡

(


σ
2


)



{\displaystyle G=\operatorname {erf} \left({\frac {\sigma }{2}}\right)}

 where 



erf


{\displaystyle \operatorname {erf} }

 is the error function ( since 



G
=
2
Φ

(


σ

2



)

−
1


{\displaystyle G=2\Phi \left({\frac {\sigma }{\sqrt {2}}}\right)-1}

, where  



Φ


{\displaystyle \Phi }

 is the cumulative distribution function of a standard normal distribution).[31]  In the table below, some examples for probability density functions with support on 



[
0
,
∞
)


{\displaystyle [0,\infty )}

 are shown. The Dirac delta distribution represents the case where everyone has the same wealth (or income); it implies no variations between incomes.[32]
 Sometimes the entire Lorenz curve is not known, and only values at certain intervals are given. In that case, the Gini coefficient can be approximated using various techniques for interpolating the missing values of the Lorenz curve. If (Xk, Yk) are the known points on the Lorenz curve, with the Xk indexed in increasing order (Xk – 1 < Xk), so that:
 If the Lorenz curve is approximated on each interval as a line between consecutive points, then the area B can be approximated with trapezoids and:
 is the resulting approximation for G. More accurate results can be obtained using other methods to approximate the area B, such as approximating the Lorenz curve with a quadratic function across pairs of intervals or building an appropriately smooth approximation to the underlying distribution function that matches the known data. If the population mean and boundary values for each interval are also known, these can also often be used to improve the accuracy of the approximation.
 The Gini coefficient calculated from a sample is a statistic, and its standard error, or confidence intervals for the population Gini coefficient, should be reported. These can be calculated using bootstrap techniques, mathematically complicated and computationally demanding even in an era of fast computers.[41] Economist Tomson Ogwang made the process more efficient by setting up a "trick regression model" in which respective income variables in the sample are ranked, with the lowest income being allocated rank 1. The model then expresses the rank (dependent variable) as the sum of a constant A and a normal error term whose variance is inversely proportional to yk:
 Thus, G can be expressed as a function of the weighted least squares estimate of the constant A and that this can be used to speed up the calculation of the jackknife estimate for the standard error. Economist David Giles argued that the standard error of the estimate of A can be used to derive the estimate of G directly without using a jackknife. This method only requires using ordinary least squares regression after ordering the sample data. The results compare favorably with the estimates from the jackknife with agreement improving with increasing sample size.[42]
 However, it has been argued that this depends on the model's assumptions about the error distributions and the independence of error terms. These assumptions are often not valid for real data sets. There is still ongoing debate surrounding this topic.
 Guillermina Jasso[43] and Angus Deaton[44] independently proposed the following formula for the Gini coefficient:
 where 



μ


{\displaystyle \mu }

 is mean income of the population, Pi is the income rank P of person i, with income X, such that the richest person receives a rank of 1 and the poorest a rank of N. This effectively gives higher weight to poorer people in the income distribution, which allows the Gini to meet the Transfer Principle. Note that the Jasso-Deaton formula rescales the coefficient so that its value is one if all the 




X

i




{\displaystyle X_{i}}

 are zero except one. Note however Allison's reply on the need to divide by N² instead.[45]
 FAO explains another version of the formula.[46]
 The Gini coefficient and other standard inequality indices reduce to a common form. Perfect equality—the absence of inequality—exists when and only when the inequality ratio, 




r

j


=

x

j



/



x
¯




{\displaystyle r_{j}=x_{j}/{\overline {x}}}

, equals 1 for all j units in some population (for example, there is perfect income equality when everyone's income 




x

j




{\displaystyle x_{j}}

 equals the mean income 





x
¯




{\displaystyle {\overline {x}}}

, so that 




r

j


=
1


{\displaystyle r_{j}=1}

 for everyone). Measures of inequality, then, are measures of the average deviations of the 




r

j


=
1


{\displaystyle r_{j}=1}

 from 1; the greater the average deviation, the greater the inequality. Based on these observations the inequality indices have this common form:[47]
 where pj weights the units by their population share, and f(rj) is a function of the deviation of each unit's rj from 1, the point of equality. The insight of this generalized inequality index is that inequality indices differ because they employ different functions of the distance of the inequality ratios (the rj) from 1.
 Gini coefficients of income are calculated on a market income and a disposable income basis. The Gini coefficient on market income—sometimes referred to as a pre-tax Gini coefficient—is calculated on income before taxes and transfers. It measures inequality in income without considering the effect of taxes and social spending already in place in a country. The Gini coefficient on disposable income—sometimes referred to as the after-tax Gini coefficient—is calculated on income after taxes and transfers. It measures inequality in income after considering the effect of taxes and social spending already in place in a country.[7][48][49]
 For OECD countries over the 2008–2009 period, the Gini coefficient (pre-taxes and transfers) for a total population ranged between 0.34 and 0.53, with South Korea the lowest and Italy the highest. The Gini coefficient (after-taxes and transfers) for a total population ranged between 0.25 and 0.48, with Denmark the lowest and Mexico the highest. For the United States, the country with the largest population among OECD countries, the pre-tax Gini index was 0.49, and the after-tax Gini index was 0.38 in 2008–2009. The OECD average for total populations in OECD countries was 0.46 for the pre-tax income Gini index and 0.31 for the after-tax income Gini index.[7][50] Taxes and social spending that were in place in 2008–2009 period in OECD countries significantly lowered effective income inequality, and in general, "European countries—especially Nordic and Continental welfare states—achieve lower levels of income inequality than other countries."[51]
 Using the Gini can help quantify differences in welfare and compensation policies and philosophies. However, it should be borne in mind that the Gini coefficient can be misleading when used to make political comparisons between large and small countries or those with different immigration policies (see limitations section).
 The Gini coefficient for the entire world has been estimated by various parties to be between 0.61 and 0.68.[12][13][52] The graph shows the values expressed as a percentage in their historical development for a number of countries.
 According to UNICEF, Latin America and the Caribbean region had the highest net income Gini index in the world at 48.3, on an unweighted average basis in 2008. The remaining regional averages were: sub-Saharan Africa (44.2), Asia (40.4), Middle East and North Africa (39.2), Eastern Europe and Central Asia (35.4), and High-income Countries (30.9). Using the same method, the United States is claimed to have a Gini index of 36, while South Africa had the highest income Gini index score of 67.8.[53]
 Taking income distribution of all human beings, worldwide income inequality has been constantly increasing since the early 19th century (and will keep on increasing over the years) . There was a steady increase in the global income inequality Gini score from 1820 to 2002, with a significant increase between 1980 and 2002. This trend appears to have peaked and begun a reversal with rapid economic growth in emerging economies, particularly in the large populations of BRIC countries.[54]
 The table below presents the estimated world income Gini coefficients over the last 200 years, as calculated by Milanovic.[55]
 More detailed data from similar sources plots a continuous decline since 1988.  This is attributed to globalization increasing incomes for billions of poor people, mostly in countries like China and India.  Developing countries like Brazil have also improved basic services like health care, education, and sanitation; others like Chile and Mexico have enacted more progressive tax policies.[57]
 The Gini coefficient is widely used in fields as diverse as sociology, economics, health science, ecology, engineering, and agriculture.[59] For example, in social sciences and economics, in addition to income Gini coefficients, scholars have published education Gini coefficients and opportunity Gini coefficients.
 Education Gini index estimates the inequality in education for a given population.[60] It is used to discern trends in social development through educational attainment over time. A study across 85 countries by three World Bank economists, Vinod Thomas, Yan Wang, and Xibo Fan, estimated Mali had the highest education Gini index of 0.92 in 1990 (implying very high inequality in educational attainment across the population), while the United States had the lowest education inequality Gini index of 0.14. Between 1960 and 1990, China, India and South Korea had the fastest drop in education inequality Gini Index. They also claim education Gini index for the United States slightly increased over the 1980–1990 period.
 Though India's education Gini Index has been falling from 1960 through 1990, most of the population still has not received any education, while 10 percent of the population received more than 40% of the total educational hours in the nation. This means that a large portion of capable children in the country are not receiving the support necessary to allow them to become positive contributors to society. This will lead to a deadweight loss to the national society because there are many people who are underdeveloped and underutilized.[61]
 Similar in concept to the Gini income coefficient, the Gini opportunity coefficient measures inequality in opportunities.[62][63][64] The concept builds on Amartya Sen's suggestion[65] that inequality coefficients of social development should be premised on the process of enlarging people's choices and enhancing their capabilities, rather than on the process of reducing income inequality. Kovacevic, in a review of the Gini opportunity coefficient, explained that the coefficient estimates how well a society enables its citizens to achieve success in life where the success is based on a person's choices, efforts and talents, not their background defined by a set of predetermined circumstances at birth, such as gender, race, place of birth, parent's income and circumstances beyond the control of that individual.
 In 2003, Roemer[62][66] reported Italy and Spain exhibited the largest opportunity inequality Gini index amongst advanced economies.
 In 1978, Anthony Shorrocks introduced a measure based on income Gini coefficients to estimate income mobility.[67] This measure, generalized by Maasoumi and Zandvakili,[68] is now generally referred to as Shorrocks index, sometimes as Shorrocks mobility index or Shorrocks rigidity index. It attempts to estimate whether the income inequality Gini coefficient is permanent or temporary and to what extent a country or region enables economic mobility to its people so that they can move from one (e.g., bottom 20%) income quantile to another (e.g., middle 20%) over time. In other words, the Shorrocks index compares inequality of short-term earnings, such as the annual income of households, to inequality of long-term earnings, such as 5-year or 10-year total income for the same households.
 Shorrocks index is calculated in several different ways, a common approach being from the ratio of income Gini coefficients between short-term and long-term for the same region or country.[69]
 A 2010 study using social security income data for the United States since 1937 and Gini-based Shorrock's indices concludes that income mobility in the United States has had a complicated history, primarily due to the mass influx of women into the American labor force after World War II. Income inequality and income mobility trends have been different for men and women workers between 1937 and the 2000s. When men and women are considered together, the Gini coefficient-based Shorrocks index trends imply long-term income inequality has been substantially reduced among all workers, in recent decades for the United States.[69] Other scholars, using just 1990s data or other short periods have come to different conclusions.[70] For example, Sastre and Ayala conclude from their study of income Gini coefficient data between 1993 and 1998 for six developed economies that France had the least income mobility, Italy the highest, and the United States and Germany intermediate levels of income mobility over those five years.[71]
 The Gini coefficient has features that make it useful as a measure of dispersion in a population, and inequalities in particular.[46] The coefficient ranges from 0, for perfect equality, to 1, indicating perfect inequality. The Gini is based on the comparison of cumulative proportions of the population against cumulative proportions of income they receive.[72]
 The Gini coefficient is a relative measure. The Gini coefficient of a developing country can rise (due to increasing inequality of income) even when the number of people in absolute poverty decreases.[73] This is because the Gini coefficient measures relative, not absolute, wealth.
 Gini coefficients are simple, and this simplicity can lead to oversights and can confuse the comparison of different populations; for example, while both Bangladesh (per capita income of $1,693) and the Netherlands (per capita income of $42,183) had an income Gini coefficient of 0.31 in 2010,[74] the quality of life, economic opportunity and absolute income in these countries are very different, i.e. countries may have identical Gini coefficients, but differ greatly in wealth. Basic necessities may be available to all in a developed economy, while in an undeveloped economy with the same Gini coefficient, basic necessities may be unavailable to most or unequally available due to lower absolute wealth.
 Gini has some mathematical limitations as well. It is not additive and different sets of people cannot be averaged to obtain the Gini coefficient of all the people in the sets.
 Even when the total income of a population is the same, in certain situations two countries with different income distributions can have the same Gini index (e.g. cases when income Lorenz Curves cross).[46] Table A illustrates one such situation. Both countries have a Gini coefficient of 0.2, but the average income distributions for household groups are different. As another example, in a population where the lowest 50% of individuals have no income, and the other 50% have equal income, the Gini coefficient is 0.5; whereas for another population where the lowest 75% of people have 25% of income and the top 25% have 75% of the income, the Gini index is also 0.5. Economies with similar incomes and Gini coefficients can have very different income distributions. Bellù and Liberati claim that ranking income inequality between two populations is not always possible based on their Gini indices.[75] Similarly, computational social scientist Fabian Stephany illustrates that income inequality within the population, e.g., in specific socioeconomic groups of same age and education, also remains undetected by conventional Gini indices.[76]
 A Gini index does not contain information about absolute national or personal incomes. Populations can simultaneously have very low income Gini indices and very high wealth Gini indexes. By measuring inequality in income, the Gini ignores the differential efficiency of the use of household income. By ignoring wealth (except as it contributes to income), the Gini can create the appearance of inequality when the people compared are at different stages in their life. Wealthy countries such as Sweden can show a low Gini coefficient for the disposable income of 0.31, thereby appearing equal, yet have a very high Gini coefficient for wealth of 0.79 to 0.86, suggesting an extremely unequal wealth distribution in its society.[77][78] These factors are not assessed in income-based Gini.
 Gini index has a downward-bias for small populations.[79] Counties or states or countries with small populations and less diverse economies will tend to report small Gini coefficients. For economically diverse large population groups, a much higher coefficient is expected than for each of its regions. For example, taking the world economy as a whole and income distribution for all human beings, different scholars estimate the global Gini index to range between 0.61 and 0.68.[12][13]
As with other inequality coefficients, the Gini coefficient is influenced by the granularity of the measurements. For example, five 20% quantiles (low granularity) will usually yield a lower Gini coefficient than twenty 5% quantiles (high granularity) for the same distribution. Philippe Monfort has shown that using inconsistent or unspecified granularity limits the usefulness of Gini coefficient measurements.[80]
 Changing income inequality, measured by Gini coefficients, can be due to structural changes in a society such as growing population (increased birth rates, aging populations, emigration, immigration) and income mobility.[81]
 Another limitation of the Gini coefficient is that it is not a proper measure of egalitarianism, as it only measures income dispersion. For example, suppose two equally egalitarian countries pursue different immigration policies. In that case, the country accepting a higher proportion of low-income or impoverished migrants will report a higher Gini coefficient and, therefore, may exhibit more income inequality.
 The Gini coefficient measure gives different results when applied to individuals instead of households, for the same economy and same income distributions. If household data is used, the measured value of income Gini depends on how the household is defined. The comparison is not meaningful when different populations are not measured with consistent definitions. Furthermore, changes to the household income Gini can be driven by changes in household formation, such as increased divorce rates or extended family households splitting into nuclear families.
 Deininger and Squire (1996) show that the income Gini coefficient based on individual income rather than household income is different. For example, for the United States, they found that the individual income-based Gini index was 0.35, while for France, 0.43. According to their individual-focused method, in the 108 countries they studied, South Africa had the world's highest Gini coefficient at 0.62, Malaysia had Asia's highest Gini coefficient at 0.5, Brazil the highest at 0.57 in Latin America and the Caribbean region, and Turkey the highest at 0.5 in OECD countries.[82]
 Billionaire Thomas Kwok claimed the income Gini coefficient for Hong Kong has been high (0.434 in 2010[74]), in part because of structural changes in its population. Over recent decades, Hong Kong has witnessed increasing numbers of small households, elderly households, and elderly living alone. The combined income is now split into more households. Many older people live separately from their children in Hong Kong. These social changes have caused substantial changes in household income distribution. The income Gini coefficient, claims Kwok, does not discern these structural changes in its society.[81] Household money income distribution for the United States, summarized in Table C of this section, confirms that this issue is not limited to just Hong Kong. According to the US Census Bureau, between 1979 and 2010, the population of the United States experienced structural changes in overall households; the income for all income brackets increased in inflation-adjusted terms, household income distributions shifted into higher income brackets over time, while the income Gini coefficient increased.[83][84]
 The Gini coefficient is unable to discern the effects of structural changes in populations.[81] Expanding on the importance of life-span measures, the Gini coefficient as a point-estimate of equality at a certain time ignores life-span changes in income. Typically, increases in the proportion of young or old members of a society will drive apparent changes in equality simply because people generally have lower incomes and wealth when they are young than when they are old. Because of this, factors such as age distribution within a population and mobility within income classes can create the appearance of inequality when none exist, taking into account demographic effects. Thus a given economy may have a higher Gini coefficient at any timepoint compared to another, while the Gini coefficient calculated over individuals' lifetime income is lower than the apparently more equal (at a given point in time) economy's.[clarification needed][16] Essentially, what matters is not just inequality in any particular year but the distribution composition over time.
 Inaccuracies in assign monetary value to income in kind reduce the accuracy of Gini as a measurement of true inequality.
 While taxes and cash transfers are relatively straightforward to account for, other government benefits can be difficult to value. Benefits such as subsidized housing, medical care, and education are difficult to value objectively, as it depends on the quality and extent of the benefit. In absence of a free market, valuing these income transfers as household income is subjective. The theoretical model of the Gini coefficient is limited to accepting correct or incorrect subjective assumptions.
 In subsistence-driven and informal economies, people may have significant income in other forms than money, for example, through subsistence farming or bartering. These forms of income tend to accrue to poor segments of populations in emerging and transitional economy countries such as those in sub-Saharan Africa, Latin America, Asia, and Eastern Europe. Informal economy accounts for over half of global employment and as much as 90 percent of employment in some of the poorer sub-Saharan countries with high official Gini inequality coefficients. Schneider et al., in their 2010 study of 162 countries,[85] report about 31.2%, or about $20 trillion, of world's GDP is informal. In developing countries, the informal economy predominates for all income brackets except the richer, urban upper-income bracket populations. Even in developed economies, 8% (United States) to 27% (Italy) of each nation's GDP is informal. The resulting informal income predominates as a livelihood activity for those in the lowest income brackets.[86] The value and distribution of the incomes from informal or underground economy is difficult to quantify, making true income Gini coefficients estimates difficult.[87][88] Different assumptions and quantifications of these incomes will yield different Gini coefficients.[89][90][91]
 Given the limitations of the Gini coefficient, other statistical methods are used in combination or as an alternative measure of population dispersity. For example, entropy measures are frequently used (e.g. the Atkinson index or the Theil Index and Mean log deviation as special cases of the generalized entropy index). These measures attempt to compare the distribution of resources by intelligent agents in the market with a maximum entropy random distribution, which would occur if these agents acted like non-interacting particles in a closed system following the laws of statistical physics.
 There is a summary measure of the diagnostic ability of a binary classifier system that is also called the Gini coefficient, which is defined as twice the area between the receiver operating characteristic (ROC) curve and its diagonal.  It is related to the AUC (Area Under the ROC Curve) measure of performance given by 



A
U
C
=
(
G
+
1
)

/

2


{\displaystyle AUC=(G+1)/2}

[92]   and to Mann–Whitney U.  Although both Gini coefficients are defined as areas between certain curves and share certain properties, there is no simple direct relationship between the Gini coefficient of statistical dispersion and the Gini coefficient of a classifier.
 The Gini index is also related to the Pietra index — both of which measure statistical heterogeneity and are derived from the Lorenz curve and the diagonal line.[93][94][30]
 In certain fields such as ecology, inverse Simpson's index 



1

/

λ


{\displaystyle 1/\lambda }

 is used to quantify diversity, and this should not be confused with the Simpson index 



λ


{\displaystyle \lambda }

. These indicators are related to Gini. The inverse Simpson index increases with diversity, unlike the Simpson index and Gini coefficient, which decrease with diversity. The Simpson index is in the range [0, 1], where 0 means maximum and 1 means minimum diversity (or heterogeneity). Since diversity indices typically increase with increasing heterogeneity, the Simpson index is often transformed into inverse Simpson, or using the complement 



1
−
λ


{\displaystyle 1-\lambda }

, known as the Gini-Simpson Index.[95]
 The Lorenz curve is another method of graphical representation of wealth distribution. It was developed 9 years before the Gini coefficient, which quantifies the extent to which the Lorenz curve deviates from the perfect equality line (with slope of 1). The Hoover index (also known as Robin Hood index) presents the percentage of total population's income that would have to be redistributed to make the Gini coefficient equal to 0 (perfect equality).[96]
 In recent decades, researchers have attempted to estimate Gini coefficients for pre-20th century societies. In the absence of household income surveys and income taxes, scholars have relied on proxy variables. These include wealth taxes in medieval European city states, patterns of landownership in Roman Egypt, variation of the size of houses in societies from ancient Greece to Aztec Mexico, and inheritance and dowries in Babylonian society. Other data does not directly document variations in wealth or income but are known to reflect inequality, such as the ratio of rents to wages or of labor to capital.[97]
 Although the Gini coefficient is most popular in economics, it can, in theory, be applied in any field of science that studies a distribution. For example, in ecology, the Gini coefficient has been used as a measure of biodiversity, where the cumulative proportion of species is plotted against the cumulative proportion of individuals.[98] In health, it has been used as a measure of the inequality of health-related quality of life in a population.[99] In education, it has been used as a measure of the inequality of universities.[100] In chemistry it has been used to express the selectivity of protein kinase inhibitors against a panel of kinases.[101] In engineering, it has been used to evaluate the fairness achieved by Internet routers in scheduling packet transmissions from different flows of traffic.[102]
 The Gini coefficient is sometimes used for the measurement of the discriminatory power of rating systems in credit risk management.[103]
 A 2005 study accessed US census data to measure home computer ownership and used the Gini coefficient to measure inequalities amongst whites and African Americans. Results indicated that although decreasing overall, home computer ownership inequality was substantially smaller among white households.[104]
 A 2016 peer-reviewed study titled Employing the Gini coefficient to measure participation inequality in treatment-focused Digital Health Social Networks[105] illustrated that the Gini coefficient was helpful and accurate in measuring shifts in inequality, however as a standalone metric it failed to incorporate overall network size.
 Discriminatory power refers to a credit risk model's ability to differentiate between defaulting and non-defaulting clients. The formula 




G

1




{\displaystyle G_{1}}

, in the calculation section above, may be used for the final model and at the individual model factor level to quantify the discriminatory power of individual factors. It is related to the accuracy ratio in population assessment models.
 The Gini coefficient has also been applied to analyze inequality in dating apps.[106][107]
 Kaminskiy and Krivtsov[108] extended the concept of the Gini coefficient from economics to reliability theory and proposed a Gini-type coefficient that helps to assess the degree of aging of non-repairable systems or aging and rejuvenation of repairable systems.  The coefficient is defined between −1 and 1 and can be used in both empirical and parametric life distributions. It takes negative values for the class of decreasing failure rate distributions and point processes with decreasing failure intensity rate and is positive for the increasing failure rate distributions and point processes with increasing failure intensity rate. The value of zero corresponds to the exponential life distribution or the Homogeneous Poisson Process.

================================================================================
Title: State Channels - an explanation
Date: 06 November 2015
Content:
This post is the second in a series which aims to clarify uncommon terms that I use.  Like those that follow, this term has proven useful in my own understanding of blockchains and blockchain-related technologies.  I hope that by clearly explaining it here, the term can become useful for others as well. State channels are a very broad and simple way to think about blockchain interactions which could occur on the blockchain, but instead get conducted off of the blockchain, without significantly increasing the risk of any participant.  The most well known example of this strategy is the idea of payment channels in Bitcoin, which allow for instant fee-less payments to be sent directly between two parties.  State channels are the general form of payment channels, applying the same idea to any kind of state-altering operation normally performed on a blockchain.  Moving these interactions off of the chain without requiring any additional trust can lead to significant improvements in cost and speed.  State channels will be a critical part of scaling blockchain technologies to support higher levels of use. The basic components of a state channel are very simple: That's it!  If the "state" being updated between participants was a digital currency balance, then we would have a payment channel.  Steps 1 and 3, which open and close the channel, involve blockchain operations.  But in step 2 an unlimited number of updates can be rapidly made without the need to involve the blockchain at all--and this is where the power of state channels comes into play, because only steps 1 and 3 need to be published to the network, pay fees, or wait for confirmations.  In fact, with careful planning and design, state channels can remain open almost indefinitely, and be used as part of larger hub and spoke systems to power an entire economy or ecosystem. Despite my simple description here, state/payment channels have generally been perceived as quite complicated.  There are several reasons for this, and one of them is that there are some important subtleties hidden in my phrasing of the three steps.  Let's take a closer look at what these simple phrases imply, starting with: could be submitted to the blockchain In order for state channels to work, participants have to be assured that they could publish the current state of the channel to the blockchain at any time.  This results in some important limitations, such as the fact that someone has to stay online to protect each individual party's interests until the channel is closed. Imagine that when we initiated a payment channel I started with 100 bitcoins and you started with 10.  If we first sign an update that transfers 10 of those bitcoins to me, and then later sign an update that transfers 50 back to you, the later update is obviously more beneficial to you than the earlier one is.  If you were to unexpectedly lose internet access, and I were to pretend the second update never happened, I might be able to publish the first update to the blockchain and effectively steal 50 bitcoins from you!  What you need is somebody to stay online with a copy of that later transaction so that they can "trump" the earlier one and make sure your bitcoins are protected.  It doesn't have to be you--you could send a copy to many random servers who agree via smart contract to publish it only if needed (for a small fee of course).  But however you do it, you need to be assured that the latest signed update to the state is available to trump all others.  Which leads us to our next subtle phrase: Each new update "trumps" previous updates To make this part of the state channel work, the locking and unlocking mechanisms have to be properly designed so that old state updates submitted to the blockchain have a chance to be corrected by the newer state updates which replaced them.  The simplest way is to have any unlocking attempt start a timer, during which any newer update can replace the old update (restarting the timer as well).  When the timer completes, the channel is closed and the state adjusted to reflect the last update received.  The length of the timer would be chosen for each state channel, balancing the inconvenience of a long channel closing time with the increased safety it would provide against internet connection or blockchain problems.  Alternatively, you could structure the channel with a financial penalty so that anyone publishing an inaccurate update to the blockchain will lose more than they could gain by pretending later transactions didn't happen. But the mechanism ends up not mattering very much, because (going back to the previous point) the game theory of this situation puts a twist on things.  As long as this mechanism is theoretically sound, it will probably never have to be used.  Actually going through the timer/penalty process may introduce extra fees, delays, or other inconveniences; given that forcing someone into the mechanism can't give you any advantage anyways, parties to a state channel will probably just close the channel out by mutually agreeing on a final channel state.  This final close-out operation needs to be fundamentally different from the normal "intermediate" updates (since it will bypass the "trumping" mechanism above), so participants will only sign a final close-out transaction once for each portion of the state locked within a particular channel. The details of these "subtleties" aren't especially important.  What it all ultimately breaks down to is that participants open the channel by setting up a "judge" smart contract, sign promises to each other which the judge can enforce and adjudicate if necessary, and then close the channel by agreeing amongst themselves so that the judge's adjudication isn't needed.  As long as the "judge" mechanism can be assumed to be reliable, these promises can be counted as instant transfers, with the judge only appealed to in exceptional circumstances, such as when one party disappears. Of course, these details are only part of the reason people think that state/payment channels are complicated.  A much bigger one is that Bitcoin payment channels are complicated.  Building a "judge" mechanism in Bitcoin with even reasonably useful properties is surprisingly intricate.  But once you have a clear concept of state channels in general, you can see that this only comes from trying to implement the idea in a constrained context.  Basic smart contract features like a timer mechanism and allowing two different paths to be taken depending on the signed message submitted are just plain harder to do in Bitcoin.  Some of these features are being gradually added or built.  Personally I expect to see working Bitcoin payment channels within the next 6 months.  But by seeing that payment channels are only a special subcase of the broader "state channel" idea, we realise that this is a much broader technique, and that state channels can apply to any smart contract which deals with frequent updates between a defined set of participants.  You can anticipate seeing this approach in many (if not most) distributed applications going forward. That's all I have to say about state channels for now!  I hope this deeper clarification of the term proves useful to others.  My main purpose in publishing these terminology explanations is to more easily refer to these ideas in the future.  As I'm sure the reader can imagine, there are a wide number of applications for state channels.  Once I have laid down enough vocabulary, I hope to describe some of the more interesting ones in more detail. Read more posts by this author. I was recently having a conversation with someone about the new segregated
witness [https://github.com/sipa/bitcoin/commits/… This post is the first in a series which aims to clarify uncommon terms that I
use. Like those…
================================================================================
Title: OSF
Date: Date not available
Content:

        For full functionality of this site it is necessary to enable JavaScript.
        Here are
         instructions for enabling JavaScript in your web browser.
      
================================================================================
Title:  My 40-liter backpack travel guide 
Date: Date not available
Content:
Special thanks to Liam Horne for feedback and review. I received no money from and have never even met any of the companies making the stuff I'm shilling here (with the sole exception of Unisocks); this is all just an honest listing of what works for me today. I have lived as a nomad for the last nine years, taking 360 flights travelling over 1.5 million kilometers (assuming flight paths are straight, ignoring layovers) during that time. During this time, I've considerably optimized the luggage I carry along with me: from a 60-liter shoulder bag with a separate laptop bag, to a 60-liter shoulder bag that can contain the laptop bag, and now to a 40-liter packpage that can contain the laptop bag along with all the supplies I need to live my life. The purpose of this post will be to go through the contents, as well as some of the tips that I've learned for how you too can optimize your travel life and never have to wait at a luggage counter again. There is no obligation to follow this guide in its entirety; if you have important needs that differ from mine, you can still get a lot of the benefits by going a hybrid route, and I will talk about these options too. This guide is focused on my own experiences; plenty of other people have made their own guides and you should look at them too. /r/onebag is an excellent subreddit for this.   The backpack, with the various sub-bags laid out separately. Yes, this all fits in the backpack, and without that much effort to pack and unpack.  As a point of high-level organization, notice the bag-inside-a-bag structure. I have a T-shirt bag, an underwear bag, a sock bag, a toiletries bag, a dirty-laundry bag, a medicine bag, a laptop bag, and various small bags inside the inner compartment of my backpack, which all fit into a 40-liter Hynes Eagle backpack. This structure makes it easy to keep things organized. The general principle that you are trying to follow is that you're trying to stay within a "budget" while still making sure you have everything that you need - much like normal financial planning of the type that almost everyone, with the important exception of crypto participants during bull runs, is used to dealing with. A key difference here is that instead of optimizing for dollars, you're optimizing for cubic centimeters. Of course, none of the things that I recommend here are going to be particularly hard on your dollars either, but minimizing cm3 is the primary objective. What do I mean by this? Well, I mean getting items like this:   Electric shaver. About 5cm long and 2.5cm wide at the top. No charger or handle is required: it's USBC pluggable, your phone is the charger and handle. Buy on Amazon here (told you it's not hard on your dollars!)  And this:   Charger for mobile phone and laptop (can charge both at the same time)! About 5x5x2.5 cm. Buy here.  And there's more. Electric toothbrushes are normally known for being wide and bulky. But they don't have to be! Here is an electric toothbrush that is rechargeable, USBC-friendly (so no extra charging equipment required), only slightly wider than a regular toothbrush, and costs about $30, plus a couple dollars every few months for replacement brush heads. For connecting to various different continents' plugs, you can either use any regular reasonably small universal adapter, or get the Zendure Passport III which combines a universal adapter with a charger, so you can plug in USBC cables to charge your laptop and multiple other devices directly (!!). As you might have noticed, a key ingredient in making this work is to be a USBC maximalist. You should strive to ensure that every single thing you buy is USBC-friendly. Your laptop, your phone, your toothbrush, everything. This ensures that you don't need to carry any extra equipment beyond one charger and 1-2 charging cables. In the last ~3 years, it has become much easier to live the USBC maximalist life; enjoy it! For clothing, you have to navigate a tough tradeoff between price, cm3 and the clothing looking reasonably good. Fortunately, many of the more modern brands do a great job of fulfilling all three at the same time! My current strategy is to be a Uniqlo maximalist: altogether, about 70% of the clothing items in my bag are from Uniqlo. This includes: There are other stores that can give you often equally good products, but Uniqlo is easily accessible in many (though not all) of the regions I visit and does a good job, so I usually just start and stop there. Socks are a complicated balancing act between multiple desired traits: The ideal scenario is if you find low-cut or ankle socks comfortable to wear, and you never go to cold climates. These are very low on cm3, so you can just buy those and be happy. But this doesn't work for me: I sometimes visit cold areas, I don't find ankle socks comfortable and prefer something a bit longer, and I need to be comfortable for my long runs. Furthermore, my large foot size means that Uniqlo's one-size-fits-all approach does not work well for me: though I can put the socks on, it often takes a long time to do so (especially after a shower), and the socks rip often. So I've been exploring various brands to try to find a solution (recently trying CEP and DarnTough). I generally try to find socks that cover the ankle but don't go much higher than that, and I have one pair of long ones for when I go to the snowier places. My sock bag is currently larger than my underwear bag, and only a bit smaller than my T-shirt bag: both a sign of the challenge of finding good socks, and a testament to Uniqlo's amazing Airism T-shirts. Once you do find a pair of socks that you like, ideally you should just buy many copies of the same type. This removes the effort of searching for a matching pair in your bag, and it ensures that if one of your socks rips you don't have to choose between losing the whole pair and wearing mismatched socks. For shoes, you probably want to limit yourself to at most two: some heavier shoes that you can just wear, and some very cm3-light alternative, such as flip-flops. There is a key mathematical reason why dressing in layers is a good idea: it lets you cover many possible temperature ranges with fewer clothing items.    +   +   +  +   You want to keep the T-shirt on in all cases, to protect the other layers from getting dirty. But aside from that, the general rule is: if you choose N clothing items, with levels of warmness spread out across powers of two, then you can be comfortable in \(2^N\) different temperature ranges by binary-encoding the expected temperature in the clothing you wear. For not-so-cold climates, two layers (sweater and jacket) are fine. For a more universal range of climates you'll want three layers: light sweater, heavy sweater and heavy jacket, which can cover \(2^3 = 8\) different temperature ranges all the way from summer to Siberian winter (of course, heavy winter jackets are not easily packable, so you may have to just wear it when you get on the plane). This layering principle applies not just to upper-wear, but also pants. I have a pair of thin pants plus Uniqlo tights, and I can wear the thin pants alone in warmer climates and put the Uniqlo tights under them in colder climates. The tights also double as pyjamas. The internet constantly yells at me for not having a good microphone. I solved this problem by getting a portable microphone!   My workstation, using the Apogee HypeMIC travel microphone (unfortunately micro-USB, not USBC). A toilet paper roll works great as a stand, but I've also found that having a stand is not really necessary and you can just let the microphone lie down beside your laptop.  Next, my laptop stand. Laptop stands are great for improving your posture. I have two recommendations for laptop stands, one medium-effective but very light on cm3, and one very effective but heavier on cm3. Nexstand is the one in the picture above. Majextand is the one glued to the bottom of my laptop now:    I have used both, and recommend both. In addition to this I also have another piece of laptop gear: a 20000 mAh laptop-friendly power bank. This adds even more to my laptop's already decent battery life, and makes it generally easy to live on the road. Now, my medicine bag:    This contains a combination of various life-extension medicines (metformin, ashwagandha, and some vitamins), and covid defense gear: a CO2 meter (CO2 concentration minus 420 roughly gives you how much human-breathed-out air you're breathing in, so it's a good proxy for virus risk), masks, antigen tests and fluvoxamine. The tests were a free care package from the Singapore government, and they happened to be excellent on cm3 so I carry them around. Covid defense and life extension are both fields where the science is rapidly evolving, so don't blindly follow this static list; follow the science yourself or listen to the latest advice of an expert that you do trust. Air filters and far-UVC (especially 222 nm) lamps are also promising covid defense options, and portable versions exist for both. At this particular time I don't happen to have a first aid kit with me, but in general it's also recommended; plenty of good travel options exist, eg. this. Finally, mobile data. Generally, you want to make sure you have a phone that supports eSIM. These days, more and more phones do. Wherever you go, you can buy an eSIM for that place online. I personally use Airalo, but there are many options. If you are lazy, you can also just use Google Fi, though in my experience Google Fi's quality and reliability of service tends to be fairly mediocre. Not everything that you have needs to be designed around cm3 minimization. For me personally, I have four items that are not particularly cm3 optimized but that I still really enjoy having around.   My laptop bag, bought in an outdoor market in Zambia.  Unisocks.  Sweatpants for indoor use, that are either fox-themed or Shiba Inu-themed depending on whom you ask.  Gloves (phone-friendly): I bought the left one for $4 in Mong Kok and the right one for $5 in Chinatown, Toronto back in 2016. By coincidence, I lost different ones from each pair, so the remaining two match. I keep them around as a reminder of the time when money was much more scarce for me.  The more you save space on the boring stuff, the more you can leave some space for a few special items that can bring the most joy to your life. Many people find the nomad lifestyle to be disorienting, and report feeling comfort from having a "permanent base". I find myself not really having these feelings: I do feel disorientation when I change locations more than once every ~7 days, but as long as I'm in the same place for longer than that, I acclimate and it "feels like home". I can't tell how much of this is my unique difficult-to-replicate personality traits, and how much can be done by anyone. In general, some tips that I recommend are: Not everyone can survive with just the items I have. You might have some need for heavier clothing that cannot fit inside one backpack. You might be a big nerd in some physical-stuff-dependent field: I know life extension nerds, covid defense nerds, and many more. You might really love your three monitors and keyboard. You might have children. The 40-liter backpack is in my opinion a truly ideal size if you can manage it: 40 liters lets you carry a week's worth of stuff, and generally all of life's basic necessities, and it's at the same time very carry-friendly: I have never had it rejected from carry-on in all the flights on many kinds of airplane that I have taken it, and when needed I can just barely stuff it under the seat in front of me in a way that looks legit to staff. Once you start going lower than 40 liters, the disadvantages start stacking up and exceeding the marginal upsides. But if 40 liters is not enough for you, there are two natural fallback options: Either option can get you up to a respectable 80 liters, and still preserve a lot of the benefits of the 40-liter backpack lifestyle. Backpack plus mini-suitcase generally seems to be more popular than the big backpack route. It's up to you to decide which tradeoffs to take, and where your personal values lie!
================================================================================
Title: Vlad Zamfir Casper - YouTube
Date: Date not available
Content:
Vlad Zamfir Casper - YouTubeAcerca dePrensaDerechos de autorComunicarte con nosotrosCreadoresAnunciarDesarrolladoresCondicionesPrivacidadPolíticas y seguridadCómo funciona YouTubePrueba funciones nuevas© 2024 Google LLC
================================================================================
Title: [1710.09437] Casper the Friendly Finality Gadget
Date: Date not available
Content:
Help | Advanced Search arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website. Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them. Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.  
arXiv Operational Status 
                    Get status notifications via
                    email
                    or slack

================================================================================
Title: Blockchain—Not Bitcoin—Represents the Next Step in Financial Evolution and Beyond | Oxford Law Blogs
Date: 24 July 2020
Content:
Author(s) Posted Time to read OBLB categories OBLB types OBLB keywords More From:  In a direct response to the 2008 global financial crisis, someone using the pseudonym Satoshi Nakamoto published a white paper discussing Bitcoin, a novel method for transmitting value without an intermediary. Nakamoto proposed an electronic version of cash that could replace government-issued money. Bitcoin promised to be bigger than the internet and even the Renaissance, and forever transform numerous industries. It threatened to render antiquated financial intermediaries obsolete. A Bitcoin Revolution would topple governments, leading to a state of Crypto Anarcho-Capitalism. Virtually every transaction, even ones as small as buying coffee, would be completed using cryptocurrencies. Of course, that’s not what happened. Although Starbucks now accepts Bitcoin, credit cards remain dominant in legitimate point of sale transactions. And, despite promising to be unhackable, Bitcoin showed serious weakness after the Silk Road, Mt. Gox, and Confido debacles unfolded. Meanwhile, the world did not stop using government-issued ‘fiat currency.’  Even though Bitcoin never lived up to the hype, the underlying blockchain technology might. Nakamoto developed blockchain technology, which solves the double-spend problem by implementing a universal ledger with a confirmation mechanism. This changes how we record, verify, monitor, and distribute information. By solving information privacy and accessibility problems at once, blockchain may disrupt many industries including law, finance, real estate, health care, transportation, logistics, and entertainment. This post explains why blockchain technology has already impacted payment processing and supply chain management, and how the next generation of blockchain technology might transform any transaction that requires complex yet discrete tasks. International Payment Processing Historically, cross-border payments have been innately complex and inefficient because there is not a uniform global payment system. Some banks use the CHIPS system, while others use SWIFT, CHAPS, or others. This means transactions can only be completed through correspondent banking relationships that connect institutions’ mismatched payment systems to move funds. As complexity increases, more intermediaries are added, each tacking on their own fees and extending the time required to complete the transfer, creating an efficiency nightmare. Bitcoin itself is unlikely to resolve this nightmare, but it pushed the industry to innovate, as banks feared they could be replaced by cryptocurrencies. JP Morgan responded by taking the blockchain backbone and developing the JPM Coin to facilitate the instant transfer of digital payments. Using the Quorum blockchain platform, JP Morgan created a ‘stablecoin’ unshackled by the burdens traditional payments face. Although presently reserved for institutional clients, it might generate international cooperation because Quorum is open source. Additionally, JP Morgan launched their Interbank Information Network to enhance communications between over 400 banks in the network, and has worked with Singapore to establish a multi-currency payment network titled ‘Project Ubin,’ in the hopes of bringing this technology to the world. Supply Chain Management Improving financial products is the most obvious use for the blockchain. After all, that is what Bitcoin set out to do using the same technology. But blockchain applications go beyond finance. Supply chains have inefficiencies that blockchain technology can address as well. Supply chain record-keeping is outdated. Supply chain management produces mountains of physical paperwork that generally multiply with each step in the supply chain. Records are often in paper form, making information harder to access. These inefficiencies can obscure the source of products, and the results can be deadly. Consider the E. Coli and Salmonella outbreaks in 2018. Food-borne illnesses made hundreds sick and left some dead. The outbreak led to sales of tainted food and wastage of safe food because food supply chains are difficult to trace. It was impossible to adequately warn customers if they were at risk.  Blockchain technology can improve record-keeping and increase accessibility by digitizing physical documentation and recording it on a blockchain. Blockchain’s decentralized ledger allows system updates to be distributed instantly across all users, or ‘nodes.’ Companies can use blockchains to improve quality assurance while maintaining privacy.  Walmart is already using IBM’s Food Trust platform to bring transparency to the food industry for consumers and distributors alike, informing people what they need to know about their food. In an outbreak, these systems identify which step in the supply chain carried the contagion so retailers can alert consumers and mitigate risks faster and with less waste. Using the blockchain in open-source payment processing systems and supply chain management are just the tip of the iceberg. The next stage in the proliferation of blockchain technology is already underway and builds on top of the backbone that preceded it. Smart Contracts The next generation of blockchain technology uses ‘oracles’ to feed data from external systems into the blockchain. Blockchain technology can now react to the happenings of the world. ‘Smart contracts’ are blockchain-based code that automatically executes functions upon the happening of pre-specified events. They can streamline entire processes, automate business decisions, and cut time spent on mundane tasks. Smart contracts could transform the real estate industry. There are multiple steps in a real estate transaction, many of which require an attorney. Some attorneys believe their jobs are safe, but recording titles and deeds on the blockchain could modernize the title search and deed transfer process, obviating the need to attorneys. Blockchain produces an immutable record free of human error. Encumbrances and liens would be readily apparent and accessible without the use of costly attorneys. Payment and ownership transfer could happen simultaneously. Title would transfer automatically from seller to buyer. Propy hopes to use blockchain to reduce fraud and streamline the closing process. Smart contracts might profoundly impact the healthcare industry. Getting pre-authorization of health benefits wastes countless hours of physicians’ time. By reducing a health insurance agreement to code, smart contracts allow insurance providers to automatically accept or reject claims based on predetermined criteria. This level of automation reduces costs by reducing human labor and creating a highly secure yet accessible system for health record-keeping. This is especially important to resolving the opioid crisis because inadequate record-keeping can inhibit drug traceability, putting lives at risk. BurstIQ stores and transfers health care information on blockchains. They partnered with the American Heart Association and Hitachi Vantara to increase informational accessibility to scientific data for doctors and researchers on the frontlines of the global COVID-19 pandemic. Conclusion This epoch will be remembered by blockchain technology, not Bitcoin. In trying to create the perfect cryptocurrency, Nakamoto combined multiple component technologies to bring the world the blockchain—a revolutionary technology that has the potential to change how the world does business.  Seth C. Oranburg is an Assistant Professor at Duquesne University School of Law. Joseph R. Stead received his JD from Duquesne University School of Law.  Share YOU MAY ALSO BE INTERESTED IN 
27 September 2024

 by 
      
Bahadır Köksal

 
22 July 2024

 by 
      
Edoardo D. Martino
Wolf-Georg Ringe

 The Faculty of Law, University of Oxford, St Cross Building, St Cross Road, Oxford OX1 3UL  Enquiries: See contact emails
================================================================================
Title:  Binius: highly efficient proofs over binary fields 
Date: Date not available
Content:
This post is primarily intended for readers roughly familiar with 2019-era cryptography, especially SNARKs and STARKs. If you are not, I recommend reading those articles first. Special thanks to Justin Drake, Jim Posen, Benjamin Diamond and Radi Cojbasic for feedback and review. Over the past two years, STARKs have become a crucial and irreplaceable technology for efficiently making easy-to-verify cryptographic proofs of very complicated statements (eg. proving that an Ethereum block is valid). A key reason why is small field sizes: whereas elliptic curve-based SNARKs require you to work over 256-bit integers in order to be secure enough, STARKs let you use much smaller field sizes, which are more efficient: first the Goldilocks field (64-bit integers), and then Mersenne31 and BabyBear (both 31-bit). Thanks to these efficiency gains, Plonky2, which uses Goldilocks, is hundreds of times faster at proving many kinds of computation than its predecessors. A natural question to ask is: can we take this trend to its logical conclusion, building proof systems that run even faster by operating directly over zeroes and ones? This is exactly what Binius is trying to do, using a number of mathematical tricks that make it very different from the SNARKs and STARKs of three years ago. This post goes through the reasons why small fields make proof generation more efficient, why binary fields are uniquely powerful, and the tricks that Binius uses to make proofs over binary fields work so effectively.    Binius. By the end of this post, you should be able to understand every part of this diagram.   One of the key tasks of a cryptographic proving system is to operate over huge amounts of data, while keeping the numbers small. If you can compress a statement about a large program into a mathematical equation involving a few numbers, but those numbers are as big as the original program, you have not gained anything. To do complicated arithmetic while keeping numbers small, cryptographers generally use modular arithmetic. We pick some prime "modulus" p. The % operator means "take the remainder of": \(15\ \%\ 7 = 1\), \(53\ \%\ 10 = 3\), etc (note that the answer is always non-negative, so for example \(-1\ \%\ 10 = 9\)).   You've probably already seen modular arithmetic, in the context of adding and subtracting time (eg. what time is four hours after 9:00?). But here, we don't just add and subtract modulo some number, we also multiply, divide and take exponents.  We redefine: \(x + y \Rightarrow (x + y)\) % \(p\) \(x * y \Rightarrow (x * y)\) % \(p\) \(x^y \Rightarrow (x^y)\) % \(p\) \(x - y \Rightarrow (x - y)\) % \(p\) \(x / y \Rightarrow (x * y ^{p-2})\) % \(p\) The above rules are all self-consistent. For example, if \(p = 7\), then: A more general term for this kind of structure is a finite field. A finite field is a mathematical structure that obeys the usual laws of arithmetic, but where there's a limited number of possible values, and so each value can be represented in a fixed size. Modular arithmetic (or prime fields) is the most common type of finite field, but there is also another type: extension fields. You've probably already seen an extension field before: the complex numbers. We "imagine" a new element, which we label \(i\), and declare that it satisfies \(i^2 = -1\). You can then take any combination of regular numbers and \(i\), and do math with it: \((3i+2) * (2i + 4) =\) \(6i^2 + 12i + 4i + 8 = 16i + 2\). We can similarly take extensions of prime fields. As we start working over fields that are smaller, extensions of prime fields become increasingly important for preserving security, and binary fields (which Binius uses) depend on extensions entirely to have practical utility.  The way that SNARKs and STARKs prove things about computer programs is through arithmetization: you convert a statement about a program that you want to prove, into a mathematical equation involving polynomials. A valid solution to the equation corresponds to a valid execution of the program. To give a simple example, suppose that I computed the 100'th Fibonacci number, and I want to prove to you what it is. I create a polynomial \(F\) that encodes Fibonacci numbers: so \(F(0) = F(1) = 1\), \(F(2) = 2\), \(F(3) = 3\), \(F(4) = 5\), and so on for 100 steps. The condition that I need to prove is that \(F(x+2) = F(x) + F(x+1)\) across the range \(x = \{0, 1 ... 98\}\). I can convince you of this by giving you the quotient:  \[H(x) = \frac{F(x+2) - F(x+1) - F(x)}{Z(x)}\]  Where \(Z(x) = (x - 0) * (x - 1) * ... * (x - 98)\). If I can provide valid \(F\) and \(H\) that satisfy this equation, then \(F\) must satisfy \(F(x+2) - F(x+1) - F(x)\) across that range. If I additionally verify that \(F\) satisfies \(F(0) = F(1) = 1\), then \(F(100)\) must actually be the 100th Fibonacci number. If you want to prove something more complicated, then you replace the "simple" relation \(F(x+2) = F(x) + F(x+1)\) with a more complicated equation, which basically says "\(F(x+1)\) is the output of initializing a virtual machine with the state \(F(x)\), and running one computational step". You can also replace the number 100 with a bigger number, eg. 100000000, to accommodate more steps. All SNARKs and STARKs are based on this idea of using a simple equation over polynomials (or sometimes vectors and matrices) to represent a large number of relationships between individual values. Not all involve checking equivalence between adjacent computational steps in the same way as above: PLONK does not, for example, and neither does R1CS. But many of the most efficient ones do, because enforcing the same check (or the same few checks) many times makes it easier to minimize overhead.  Five years ago, a reasonable summary of the different types of zero knowledge proof was as follows. There are two types of proofs: (elliptic-curve-based) SNARKs and (hash-based) STARKs. Technically, STARKs are a type of SNARK, but in practice it's common to use "SNARK" to refer to only the elliptic-curve-based variety, and "STARK" to refer to hash-based constructions. SNARKs are small, and so you can verify them very quickly and fit them onchain easily. STARKs are big, but they don't require trusted setups, and they are quantum-resistant.   STARKs work by treating the data as a polynomial, computing evaluations of that polynomial across a large number of points, and using the Merkle root of that extended data as the "polynomial commitment"  A key bit of history here is that elliptic curve-based SNARKs came into widespread use first: it took until roughly 2018 for STARKs to become efficient enough to use, thanks to FRI, and by then Zcash had already been running for over a year. Elliptic curve-based SNARKs have a key limitation: if you want to use elliptic curve-based SNARKs, then the arithmetic in these equations must be done with integers modulo the number of points on the elliptic curve. This is a big number, usually near \(2^{256}\): for example, for the bn128 curve, it's 21888242871839275222246405745257275088548364400416034343698204186575808495617. But the actual computation is using small numbers: if you think about a "real" program in your favorite language, most of the stuff it's working with is counters, indices in for loops, positions in the program, individual bits representing True or False, and other things that will almost always be only a few digits long. Even if your "original" data is made up of "small" numbers, the proving process requires computing quotients, extensions, random linear combinations, and other transformations of the data, which lead to an equal or larger number of objects that are, on average, as large as the full size of your field. This creates a key inefficiency: to prove a computation over n small values, you have to do even more computation over n much bigger values. At first, STARKs inherited the habit of using 256-bit fields from SNARKs, and so suffered the same inefficiency.   A Reed-Solomon extension of some polynomial evaluations. Even though the original values are small, the extra values all blow up to the full size of the field (in this case \(2^{31} - 1\)).  In 2022, Plonky2 was released. Plonky2's main innovation was doing arithmetic modulo a smaller prime: \(2^{64} - 2^{32} + 1 = 18446744069414584321\). Now, each addition or multiplication can always be done in just a few instructions on a CPU, and hashing all of the data together is 4x faster than before. But this comes with a catch: this approach is STARK-only. If you try to use a SNARK, with an elliptic curve of such a small size, the elliptic curve becomes insecure. To continue to be safe, Plonky2 also needed to introduce extension fields. A key technique in checking arithmetic equations is "sampling at a random point": if you want to check if \(H(x) * Z(x)\) actually equals \(F(x+2) - F(x+1) - F(x)\), you can pick some random coordinate \(r\), provide polynomial commitment opening proofs proving \(H(r)\), \(Z(r)\), \(F(r)\), \(F(r+1)\) and \(F(r+2)\), and then actually check if \(H(r) * Z(r)\) equals \(F(r+2) - F(r+1) - F(r)\). If the attacker can guess the coordinate ahead of time, the attacker can trick the proof system - hence why it must be random. But this also means that the coordinate must be sampled from a set large enough that the attacker cannot guess it by random chance. If the modulus is near \(2^{256}\), this is clearly the case. But with a modulus of \(2^{64} - 2^{32} + 1\), we're not quite there, and if we drop to \(2^{31} - 1\), it's definitely not the case. Trying to fake a proof two billion times until one gets lucky is absolutely within the range of an attacker's capabilities. To stop this, we sample \(r\) from an extension field. For example, you can define \(y\) where \(y^3 = 5\), and take combinations of \(1\), \(y\) and \(y^2\). This increases the total number of coordinates back up to roughly \(2^{93}\). The bulk of the polynomials computed by the prover don't go into this extension field; they just use integers modulo \(2^{31}-1\), and so you still get all the efficiencies from using the small field. But the random point check, and the FRI computation, does dive into this larger field, in order to get the needed security.  Computers do arithmetic by representing larger numbers as sequences of zeroes and ones, and building "circuits" on top of those bits to compute things like addition and multiplication. Computers are particularly optimized for doing computation with 16-bit, 32-bit and 64-bit integers. Moduluses like \(2^{64} - 2^{32} + 1\) and \(2^{31} - 1\) are chosen not just because they fit within those bounds, but also because they align well with those bounds: you can do multiplication modulo \(2^{64} - 2^{32} + 1\) by doing regular 32-bit multiplication, and shift and copy the outputs bitwise in a few places; this article explains some of the tricks well. What would be even better, however, is doing computation in binary directly. What if addition could be "just" XOR, with no need to worry about "carrying" the overflow from adding 1 + 1 in one bit position to the next bit position? What if multiplication could be more parallelizable in the same way? And these advantages would all come on top of being able to represent True/False values with just one bit. Capturing these advantages of doing binary computation directly is exactly what Binius is trying to do. A table from the Binius team's zkSummit presentation shows the efficiency gains:    Despite being roughly the same "size", a 32-bit binary field operation takes 5x less computational resources than an operation over the 31-bit Mersenne field.  Suppose that we are convinced by this reasoning, and want to do everything over bits (zeroes and ones). How do we actually commit to a polynomial representing a billion bits? Here, we face two practical problems: A key idea in Binius is solving these two problems separately, and doing so by representing the same data in two different ways. First, the polynomial itself. Elliptic curve-based SNARKs, 2019-era STARKs, Plonky2 and other systems generally deal with polynomials over one variable: \(F(x)\). Binius, on the other hand, takes inspiration from the Spartan protocol, and works with multivariate polynomials: \(F(x_1, x_2 ... x_k)\). In fact, we represent the entire computational trace on the "hypercube" of evaluations where each \(x_i\) is either 0 or 1. For example, if we wanted to represent a sequence of Fibonacci numbers, and we were still using a field large enough to represent them, we might visualize the first sixteen of them as being something like this:    That is, \(F(0,0,0,0)\) would be 1, \(F(1,0,0,0)\) would also be 1, \(F(0,1,0,0)\) would be 2, and so forth, up until we get to \(F(1,1,1,1) = 987\). Given such a hypercube of evaluations, there is exactly one multilinear (degree-1 in each variable) polynomial that produces those evaluations. So we can think of that set of evaluations as representing the polynomial; we never actually need to bother computing the coefficients. This example is of course just for illustration: in practice, the whole point of going to a hypercube is to let us work with individual bits. The "Binius-native" way to count Fibonacci numbers would be to use a higher-dimensional cube, using each set of eg. 16 bits to store a number. This requires some cleverness to implement integer addition on top of the bits, but with Binius it's not too difficult. Now, we get to the erasure coding. The way STARKs work is: you take \(n\) values, Reed-Solomon extend them to a larger number of values (often \(8n\), usually between \(2n\) and \(32n\)), and then randomly select some Merkle branches from the extension and perform some kind of check on them. A hypercube has length 2 in each dimension. Hence, it's not practical to extend it directly: there's not enough "space" to sample Merkle branches from 16 values. So what do we do instead? We pretend the hypercube is a square!  See here for a python implementation of this protocol. Let's go through an example, using regular integers as our field for convenience (in a real implementation this will be binary field elements). First, we take the hypercube we want to commit to, and encode it as a square:    Now, we Reed-Solomon extend the square. That is, we treat each row as being a degree-3 polynomial evaluated at x = {0, 1, 2, 3}, and evaluate the same polynomial at x = {4, 5, 6, 7}:    Notice that the numbers blow up quickly! This is why in a real implementation, we always use a finite field for this, instead of regular integers: if we used integers modulo 11, for example, the extension of the first row would just be [3, 10, 0, 6]. If you want to play around with extending and verify the numbers here for yourself, you can use my simple Reed-Solomon extension code here. Next, we treat this extension as columns, and make a Merkle tree of the columns. The root of the Merkle tree is our commitment.    Now, let's suppose that the prover wants to prove an evaluation of this polynomial at some point \(r = \{r_0, r_1, r_2, r_3\}\). There is one nuance in Binius that makes it somewhat weaker than other polynomial commitment schemes: the prover should not know, or be able to guess, \(s\), until after they committed to the Merkle root (in other words, \(r\) should be a pseudo-random value that depends on the Merkle root). This makes the scheme useless for "database lookup" (eg. "ok you gave me the Merkle root, now prove to me \(P(0, 0, 1, 0)\)!"). But the actual zero-knowledge proof protocols that we use generally don't need "database lookup"; they simply need to check the polynomial at a random evaluation point. Hence, this restriction is okay for our purposes. Suppose we pick \(r = \{1, 2, 3, 4\}\) (the polynomial, at this point, evaluates to \(-137\); you can confirm it with this code). Now, we get into the process of actually making the proof. We split up \(r\) into two parts: the first part \(\{1, 2\}\) representing a linear combination of columns within a row, and the second part \(\{3, 4\}\) representing a linear combination of rows. We compute a "tensor product", both for the column part: \[\bigotimes_{i=0}^1 (1 - r_i, r_i)\] And for the row part: \[\bigotimes_{i=2}^3 (1 - r_i, r_i)\] What this means is: a list of all possible products of one value from each set. In the row case, we get: \[[(1 - r_2) * (1 - r_3), r_2 * (1 - r_3), (1 - r_2) * r_3, r_2 * r_3]\] Using \(r = \{1, 2, 3, 4\}\) (so \(r_2 = 3\) and \(r_3 = 4\)): \[
[(1 - 3) * (1 - 4), 3 * (1 - 4), (1 - 3) * 4, 3 * 4] \\
= [6, -9, -8, 12]\] Now, we compute a new "row" \(t'\), by taking this linear combination of the existing rows. That is, we take: \[\begin{matrix}[3, 1, 4, 1] * 6\ + \\
[5, 9, 2, 6] * (-9)\ + \\
[5, 3, 5, 8] * (-8)\ + \\
[9, 7, 9, 3] * 12 = \\
[41, -15, 74, -76]
\end{matrix}\] You can view what's going on here as a partial evaluation. If we were to multiply the full tensor product \(\bigotimes_{i=0}^3 (1 - r_i, r_i)\) by the full vector of all values, you would get the evaluation \(P(1, 2, 3, 4) = -137\). Here we're multiplying a partial tensor product that only uses half the evaluation coordinates, and we're reducing a grid of \(N\) values to a row of \(\sqrt{N}\) values. If you give this row to someone else, they can use the tensor product of the other half of the evaluation coordinates to complete the rest of the computation. The prover provides the verifier with this new row, \(t'\), as well as the Merkle proofs of some randomly sampled columns. This is \(O(\sqrt{N})\) data. In our illustrative example, we'll have the prover provide just the last column; in real life, the prover would need to provide a few dozen columns to achieve adequate security. Now, we take advantage of the linearity of Reed-Solomon codes. The key property that we use is: taking a linear combination of a Reed-Solomon extension gives the same result as a Reed-Solomon extension of a linear combination. This kind of "order independence" often happens when you have two operations that are both linear. The verifier does exactly this. They compute the extension of \(t'\), and they compute the same linear combination of columns that the prover computed before (but only to the columns provided by the prover), and verify that these two procedures give the same answer.    In this case, extending \(t'\), and computing the same linear combination (\([6, -9, -8, 12]\)) of the column, both give the same answer: \(-10746\). This proves that the Merkle root was constructed "in good faith" (or it at least "close enough"), and it matches \(t'\): at least the great majority of the columns are compatible with each other and with \(t'\). But the verifier still needs to check one more thing: actually check the evaluation of the polynomial at \(\{r_0 .. r_3\}\). So far, none of the verifier's steps actually depended on the value that the prover claimed. So here is how we do that check. We take the tensor product of what we labelled as the "column part" of the evaluation point: \[\bigotimes_{i=0}^1 (1 - r_i, r_i)\] In our example, where \(r = \{1, 2, 3, 4\}\) (so the half that chooses the column is \(\{1, 2\}\)), this equals: \[
[(1 - 1) * (1 - 2), 1 * (1 - 2), (1 - 1) * 2, 1 * 2] \\
= [0, -1, 0, 2]\] So now we take this linear combination of \(t'\): \[
0 * 41 + (-1) * (-15) + 0 * 74 + 2 * (-76) = -137
\] Which exactly equals the answer you get if you evaluate the polynomial directly. The above is pretty close to a complete description of the "simple" Binius protocol. This already has some interesting advantages: for example, because the data is split into rows and columns, you only need a field half the size. But this doesn't come close to realizing the full benefits of doing computation in binary. For this, we will need the full Binius protocol. But first, let's get a deeper understanding of binary fields.  The smallest possible field is arithmetic modulo 2, which is so small that we can write out its addition and multiplication tables: We can make larger binary fields by taking extensions: if we start with \(F_2\) (integers modulo 2) and then define \(x\) where \(x^2 = x + 1\), we get the following addition and multiplication tables: It turns out that we can expand the binary field to arbitrarily large sizes by repeating this construction. Unlike with complex numbers over reals, where you can add one new element \(i\), but you can't add any more (quaternions do exist, but they're mathematically weird, eg. \(ab \neq ba\)), with finite fields you can keep adding new extensions forever. Specifically, we define elements as follows: And so on. This is often called the tower construction, because of how each successive extension can be viewed as adding a new layer to a tower. This is not the only way to construct binary fields of arbitary size, but it has some unique advantages that Binius takes advantage of. We can represent these numbers as a list of bits, eg. \(\texttt{1100101010001111}\). The first bit represents multiples of 1, the second bit represents multiples of \(x_0\), then subsequent bits represent multiples of: \(x_1\), \(x_1 * x_0\), \(x_2\), \(x_2 * x_0\), and so forth. This encoding is nice because you can decompose it: \(\texttt{1100101010001111} = \texttt{11001010} + \texttt{10001111} * x_3\) \(= \texttt{1100} + \texttt{1010} * x_2 + \texttt{1000} * x_3 + \texttt{1111} * x_2x_3\) \(= \texttt{11} + \texttt{10} * x_2 + \texttt{10} * x_2x_1 + \texttt{10} * x_3 + \texttt{11} * x_2x_3 + \texttt{11} * x_1x_2x_3\) \(= 1 + x_0 + x_2 + x_2x_1 + x_3 + x_2x_3 + x_0x_2x_3 + x_1x_2x_3 + x_0x_1x_2x_3\) This is a relatively uncommon notation, but I like representing binary field elements as integers, taking the bit representation where more-significant bits are to the right. That is, \(\texttt{1} = 1\), \(x_0 = \texttt{01} = 2\), \(1 + x_0 = \texttt{11} = 3\), \(1 + x_0 + x_2 = \texttt{11001000} = 19\), and so forth. \(\texttt{1100101010001111}\) is, in this representation, 61779. Addition in binary fields is just XOR (and, incidentally, so is subtraction); note that this implies that \(x + x = 0\) for any \(x\). To multiply two elements \(x * y\), there's a pretty simple recursive algorithm: split each number into two halves: \(x = L_x + R_x * x_k\) \(y = L_y + R_y * x_k\) Then, split up the multiplication: \(x * y = (L_x * L_y) + (L_x * R_y) * x_k + (R_x * L_y) * x_k + (R_x * R_y) * x_k^2\) The last piece is the only slightly tricky one, because you have to apply the reduction rule, and replace \(R_x * R_y * x_k^2\) with \(R_x * R_y * (x_{k-1} * x_k + 1)\). There are more efficient ways to do multiplication, analogues of the Karatsuba algorithm and fast Fourier transforms, but I will leave it as an exercise to the interested reader to figure those out. Division in binary fields is done by combining multiplication and inversion: \(\frac{3}{5} = 3 * \frac{1}{5}\). The "simple but slow" way to do inversion is an application of generalized Fermat's little theorem: \(\frac{1}{x} = x^{2^{2^k}-2}\) for any \(k\) where \(2^{2^k} > x\). In this case, \(\frac{1}{5} = 5^{14} = 14\), and so \(\frac{3}{5} = 3 * 14 = 9\). There is also a more complicated but more efficient inversion algorithm, which you can find here. You can use the code here to play around with binary field addition, multiplication and division yourself.    Left: addition table for four-bit binary field elements (ie. elements made up only of combinations of \(1\), \(x_0\), \(x_1\) and \(x_0x_1\)). Right: multiplication table for four-bit binary field elements.  The beautiful thing about this type of binary field is that it combines some of the best parts of "regular" integers and modular arithmetic. Like regular integers, binary field elements are unbounded: you can keep extending as far as you want. But like modular arithmetic, if you do operations over values within a certain size limit, all of your answers also stay within the same bound. For example, if you take successive powers of \(42\), you get: \[1, 42, 199, 215, 245, 249, 180, 91...\] And after 255 steps, you get right back to \(42^{255} = 1\). And like both regular integers and modular arithmetic, they obey the usual laws of mathematics: \(a*b = b*a\), \(a * (b+c) = a*b + a*c\), and even some strange new laws, eg. \(a^2 + b^2 = (a+b)^2\) (the usual \(2ab\) term is missing, because in a binary field, \(1 + 1 = 0\)). And finally, binary fields work conveniently with bits: if you do math with numbers that fit into \(2^k\) bits, then all of your outputs will also fit into \(2^k\) bits. This avoids awkwardness like eg. with Ethereum's EIP-4844, where the individual "chunks" of a blob have to be numbers modulo 52435875175126190479447740508185965837690552500527637822603658699938581184513, and so encoding binary data involves throwing away a bit of space and doing extra checks at the application layer to make sure that each element is storing a value less than \(2^{248}\). It also means that binary field arithmetic is super fast on computers - both CPUs, and theoretically optimal FPGA and ASIC designs. This all means that we can do things like the Reed-Solomon encoding that we did above, in a way that completely avoids integers "blowing up" like we saw in our example, and in a way that is extremely "native" to the kind of calculation that computers are good at. The "splitting" property of binary fields - how we were able to do \(\texttt{1100101010001111} = \texttt{11001010} + \texttt{10001111} * x_3\), and then keep splitting as little or as much as we wanted, is also crucial for enabling a lot of flexibility.  See here for a python implementation of this protocol. Now, we can get to "full Binius", which adjusts "simple Binius" to (i) work over binary fields, and (ii) let us commit to individual bits. This protocol is tricky to understand, because it keeps going back and forth between different ways of looking at a matrix of bits; it certainly took me longer to understand than it usually takes me to understand a cryptographic protocol. But once you understand binary fields, the good news is that there isn't any "harder math" that Binius depends on. This is not elliptic curve pairings, where there are deeper and deeper rabbit holes of algebraic geometry to go down; here, binary fields are all you need. Let's look again at the full diagram:    By now, you should be familiar with most of the components. The idea of "flattening" a hypercube into a grid, the idea of computing a row combination and a column combination as tensor products of the evaluation point, and the idea of checking equivalence between "Reed-Solomon extending then computing the row combination", and "computing the row combination then Reed-Solomon extending", were all in simple Binius. What's new in "full Binius"? Basically three things: We will go through both in turn. First, the new extension procedure. A Reed-Solomon code has the fundamental limitation that if you are extending \(n\) values to \(k*n\) values, you need to be working in a field that has \(k*n\) different values that you can use as coordinates. With \(F_2\) (aka, bits), you cannot do that. And so what we do is, we "pack" adjacent \(F_2\) elements together into larger values. In the example here, we're packing two bits at a time into elements in \(\{0, 1, 2, 3\}\), because our extension only has four evaluation points and so that's enough for us. In a "real" proof, we would probably back 16 bits at a time together. We then do the Reed-Solomon code over these packed values, and unpack them again into bits.    Now, the row combination. To make "evaluate at a random point" checks cryptographically secure, we need that point to be sampled from a pretty large space, much larger than the hypercube itself. Hence, while the points within the hypercube are bits, evaluations outside the hypercube will be much larger. In our example above, the "row combination" ends up being \([11, 4, 6, 1]\). This presents a problem: we know how to combine pairs of bits into a larger value, and then do a Reed-Solomon extension on that, but how do you do the same to pairs of much larger values? The trick in Binius is to do it bitwise: we look at the individual bits of each value (eg. for what we labeled as "11", that's \([1, 1, 0, 1]\)), and then we extend row-wise. That is, we perform the extension procedure on the \(1\) row of each element, then on the \(x_0\) row, then on the "\(x_1\)" row, then on the \(x_0 * x_1\) row, and so forth (well, in our toy example we stop there, but in a real implementation we would go up to 128 rows (the last one being \(x_6 *\ ... *\ x_0\))). Recapping: Why does this work? In "normal" math, the ability to (often) do linear operations in either order and get the same result stops working if you start slicing a number up by digits. For example, if I start with the number 345, and I multiply it by 8 and then by 3, I get 8280, and if do those two operations in reverse, I also do 8280. But if I insert a "split by digit" operation in between the two steps, it breaks down: if you do 8x then 3x, you get: \[345 \xrightarrow{\times 8} 2760 \rightarrow [2, 7, 6, 0] \xrightarrow{\times 3} [6, 21, 18, 0]\] But if you do 3x then 8x, you get: \[345 \xrightarrow{\times 3} 1035 \rightarrow [1, 0, 3, 5] \xrightarrow{\times 8} [8, 0, 24, 40]\] But in binary fields built with the tower construction, this kind of thing does work. The reason why has to do with their separability: if you multiply a big value by a small value, what happens in each segment, stays in each segment. If we multiply \(\texttt{1100101010001111}\) by \(\texttt{11}\), that's the same as first decomposing \(\texttt{1100101010001111}\) into \(\texttt{11} + \texttt{10} * x_2 + \texttt{10} * x_2x_1 + \texttt{10} * x_3 + \texttt{11} * x_2x_3 + \texttt{11} * x_1x_2x_3\), and then multiplying each component by \(\texttt{11}\) separately.  Generally, zero knowledge proof systems work by making statements about polynomials that simultaneously represent statements about the underlying evaluations: just like we saw in the Fibonacci example, \(F(X+2) - F(X+1) - F(X) = Z(X) * H(X)\) simultaneously checks all steps of the Fibonacci computation. We check statements about polynomials by proving evaluations at a random point: given a commitment to \(F\), you might randomly choose eg. 1892470, demand proofs of evaluations of \(F\), \(Z\) and \(H\) at that point (and \(H\) at adjacent points), check those proofs, and then check if \(F(1892472) - F(1892471) - F(1892470)\) \(= Z(1892470) * H(1892470)\). This check at a random point stands in for checking the whole polynomial: if the polynomial equation doesn't match, the chance that it matches at a specific random coordinate is tiny. In practice, a major source of inefficiency comes from the fact that in real programs, most of the numbers we are working with are tiny: indices in for loops, True/False values, counters, and similar things. But when we "extend" the data using Reed-Solomon encoding to give it the redundancy needed to make Merkle proof-based checks safe, most of the "extra" values end up taking up the full size of a field, even if the original values are small. To get around this, we want to make the field as small as possible. Plonky2 brought us down from 256-bit numbers to 64-bit numbers, and then Plonky3 went further to 31 bits. But even this is sub-optimal. With binary fields, we can work over individual bits. This makes the encoding "dense": if your actual underlying data has n bits, then your encoding will have n bits, and the extension will have 8 * n bits, with no extra overhead. Now, let's look at the diagram a third time:    In Binius, we are committing to a multilinear polynomial: a hypercube \(P(x_0, x_1 ... x_k)\), where the individual evaluations \(P(0, 0 ... 0)\), \(P(0, 0 ... 1)\) up to \(P(1, 1, ... 1)\) are holding the data that we care about. To prove an evaluation at a point, we "re-interpret" the same data as a square. We then extend each row, using Reed-Solomon encoding over groups of bits, to give the data the redundancy needed for random Merkle branch queries to be secure. We then compute a random linear combination of rows, with coefficients designed so that the new combined row actually holds the evaluation that we care about. Both this newly-created row (which get re-interpreted as 128 rows of bits), and a few randomly-selected columns with Merkle branches, get passed to the verifier. This is \(O(\sqrt{N})\) data: the new row has \(O(\sqrt{N})\) size, and each of the (constant number of) columns that get passed has \(O(\sqrt{N})\) size. The verifier then does a "row combination of the extension" (or rather, a few columns of the extension), and an "extension of the row combination", and verifies that the two match. They then compute a column combination, and check that it returns the value that the prover is claiming. And there's our proof system (or rather, the polynomial commitment scheme, which is the key building block of a proof system).  I expect many more improvements in binary-field-based proving techniques in the months ahead.
================================================================================
Title: Tau (constant) | Math Wiki | Fandom
Date: Date not available
Content:
The Greek letter τ,




τ



{\displaystyle \mathbf{\tau}}

 (tau) is a suggested symbol for the circle constant representing the ratio between circumference and radius. The constant is equal to 



2
π


{\displaystyle 2\pi}

 (2 times pi), and approximately 



6.28


{\displaystyle 6.28}

.
 While there are infinitely many shapes with constant diameter, the circle is unique in having a constant radius. Therefore, rather than set the circle constant as
 where 



C


{\displaystyle C}

 represents the circumference and 



d


{\displaystyle d}

 represents the diameter, it would arguably be more natural to use 



r


{\displaystyle r}

 to represent the radius. This gives the formula 
 This new circle constant, 



τ


{\displaystyle \tau}

, may then be solved for in terms of 



π


{\displaystyle  \pi }

. Since
 the 



τ


{\displaystyle \tau}

 formula may be rewritten as
 Then, substituting the 



π


{\displaystyle  \pi }

 formula, the result is:
 Using 



τ


{\displaystyle \tau}

 simplifies many common expressions involving 



π


{\displaystyle  \pi }

, due to the factor of 



2


{\displaystyle 2}

 that often accompanies 



π


{\displaystyle  \pi }

. An elementary example is the circumference formula,
 which may be rewritten in a more wieldy form as
 



τ


{\displaystyle \tau}

 makes it easier to express angles measured in radians. The unit circle is 



2
π


{\displaystyle 2\pi}

 radians in circumference, leading to confusing multiplications and divisions by 



2


{\displaystyle 2}

 through. If 



τ


{\displaystyle \tau}

 were used, values in radians would accurately express the fraction travelled around the circle. For example 




τ
4



{\displaystyle \frac{\tau}{4}}

 would be 




1
4



{\displaystyle \frac{1}{4}}

 of the way around the circle. 



τ


{\displaystyle \tau}

 radians represents "one full turn" around a circle. On the same principle, sine, cosine, and many other trigonometric functions have a period of 



τ


{\displaystyle \tau}

.
 Though experts may be comfortable using equations in terms of 



π


{\displaystyle  \pi }

, the above facts make 



τ


{\displaystyle \tau}

 the less-confusing choice for teaching geometry, as students will be more directly able to visualize and apply concepts using the unit circle without the potential for confusion by factors of 



2


{\displaystyle 2}

.
 



τ


{\displaystyle \tau}

 also simplifies Euler's identity. Applying Euler's formula,
 with the substitution of 



ϑ
=
τ


{\displaystyle \vartheta=\tau}

, results in
 




2
π


{\displaystyle 2\pi}

 also appears in Cauchy's integral formula, the Fourier transform, and sometimes in the Riemann zeta function, among other equations, making 



τ


{\displaystyle \tau}

 a potentially useful substitution for those situations.
 An advanced argument may be made that 



τ


{\displaystyle \tau}

 has special geometric significance in hyperspheres in arbitrary dimensions, whereas 



π


{\displaystyle  \pi }

 is only significant in two-dimensional circles:
 and with 



n
=
2


{\displaystyle n=2}


 For higher dimensions,
 giving 



π


{\displaystyle  \pi }

 no geometrical significance.
 



τ


{\displaystyle \tau}

 has been criticized for potentially causing ambiguity in expressions, due to sharing a symbol with proper time, shear stress, and torque.
 It can be argued from a perspective outside of pure math that since the diameter of a circle is easier to measure,
 should remain the circle constant. Due to the circular area formula being a quadratic form, rewriting it in terms of 



τ


{\displaystyle \tau}

 introduces a factor of 




1
2



{\displaystyle \frac{1}{2}}

, resulting in the equation
 which is less elegant than the one involving 



π


{\displaystyle  \pi }

, which is
 There are other such formulas that are simpler using 



π


{\displaystyle  \pi }

 than 



τ


{\displaystyle \tau}

. However,
 more easily represents how the area is the integral of the circumference
 with respect to the radius.

================================================================================
Title: Byzantine fault - Wikipedia
Date: Date not available
Content:
A Byzantine fault is a condition of a system, particularly a distributed computing system, where a fault occurs such that different symptoms are presented to different observers, including imperfect information on whether a system component has failed. The term takes its name from an allegory, the "Byzantine generals problem",[1] developed to describe a situation in which, to avoid catastrophic failure of a system, the system's actors must agree on a strategy, but some of these actors are unreliable in such a way as to cause other (good) actors to disagree on the strategy and they may be unaware of the disagreement.
 A Byzantine fault is also known as a Byzantine generals problem, a Byzantine agreement problem, or a Byzantine failure.
 Byzantine fault tolerance (BFT) is the resilience of a fault-tolerant computer system or similar system to such conditions.
 A Byzantine fault is any fault presenting different symptoms to different observers.[2] A Byzantine failure is the loss of a system service due to a Byzantine fault in systems that require consensus among multiple components.[3]
 The Byzantine allegory considers a number of generals who are attacking a fortress. The generals must decide as a group whether to attack or retreat; some may prefer to attack, while others prefer to retreat. The important thing is that all generals agree on a common decision, for a halfhearted attack by a few generals would become a rout, and would be worse than either a coordinated attack or a coordinated retreat.
 The problem is complicated by the presence of treacherous generals who may not only cast a vote for a suboptimal strategy; they may do so selectively. For instance, if nine generals are voting, four of whom support attacking while four others are in favor of retreat, the ninth general may send a vote of retreat to those generals in favor of retreat, and a vote of attack to the rest. Those who received a retreat vote from the ninth general will retreat, while the rest will attack (which may not go well for the attackers). The problem is complicated further by the generals being physically separated and having to send their votes via messengers who may fail to deliver votes or may forge false votes.
 Byzantine fault tolerance can be achieved if the number of loyal (non-faulty) generals is greater than three times the number of disloyal (faulty) generals. There can be a default vote value given to missing messages. For example, missing messages can be given a "null" value. Further, if the agreement is that the null votes are in the majority, a pre-assigned default strategy can be used (e.g., retreat).[4]
 The typical mapping of this allegory onto computer systems is that the computers are the generals and their digital communication system links are the messengers. Although the problem is formulated in the allegory as a decision-making and security problem, in electronics, it cannot be solved by cryptographic digital signatures alone, because failures such as incorrect voltages can propagate through the encryption process. Thus, a faulty message could be sent such that some recipients detect the message as faulty (bad signature), others see it is having a good signature, and a third group also sees a good signature but with different message contents than the second group.[2]
 The problem of obtaining Byzantine consensus was conceived and formalized by Robert Shostak, who dubbed it the interactive consistency problem. This work was done in 1978 in the context of the NASA-sponsored SIFT[5] project in the Computer Science Lab at SRI International. SIFT (for Software Implemented Fault Tolerance) was the brainchild of John Wensley, and was based on the idea of using multiple general-purpose computers that would communicate through pairwise messaging in order to reach a consensus, even if some of the computers were faulty.
 At the beginning of the project, it was not clear how many computers in total were needed to guarantee that a conspiracy of n faulty computers could not "thwart" the efforts of the correctly-operating ones to reach consensus. Shostak showed that a minimum of 3n+1 are needed, and devised a two-round 3n+1 messaging protocol that would work for n=1. His colleague Marshall Pease generalized the algorithm for any n > 0, proving that 3n+1 is both necessary and sufficient. These results, together with a later proof by Leslie Lamport of the sufficiency of 3n using digital signatures, were published in the seminal paper, Reaching Agreement in the Presence of Faults.[6] The authors were awarded the 2005 Edsger W. Dijkstra Prize for this paper.
 To make the interactive consistency problem easier to understand, Lamport devised a colorful allegory in which a group of army generals formulate a plan for attacking a city. In its original version, the story cast the generals as commanders of the Albanian army. The name was changed, eventually settling on "Byzantine", at the suggestion of Jack Goldberg to future-proof any potential offense-giving.[7] This formulation of the problem, together with some additional results, were presented by the same authors in their 1982 paper, "The Byzantine Generals Problem".[4]
 The objective of Byzantine fault tolerance is to be able to defend against failures of system components with or without symptoms that prevent other components of the system from reaching an agreement among themselves, where such an agreement is needed for the correct operation of the system.
 The remaining operationally correct components of a Byzantine fault tolerant system will be able to continue providing the system's service as originally intended, assuming there are a sufficient number of accurately-operating components to maintain the service.
 When considering failure propagation only via errors, Byzantine failures are considered the most general and most difficult class of failures among the failure modes. The so-called fail-stop failure mode occupies the simplest end of the spectrum. Whereas the fail-stop failure mode simply means that the only way to fail is a node crash, detected by other nodes, Byzantine failures imply no restrictions on what errors can be created, which means that a failed node can generate arbitrary data, including data that makes it appear like a functioning node to a subset of other nodes. Thus, Byzantine failures can confuse failure detection systems, which makes fault tolerance difficult. Despite the allegory, a Byzantine failure is not necessarily a security problem involving hostile human interference: it can arise purely from physical or software faults.
 The terms fault and failure are used here according to the standard definitions[8] originally created by a joint committee on "Fundamental Concepts and Terminology" formed by the IEEE Computer Society's Technical Committee on Dependable Computing and Fault-Tolerance and IFIP Working Group 10.4 on Dependable Computing and Fault Tolerance.[9] See also dependability.
 Byzantine fault tolerance is only concerned with broadcast consistency, that is, the property that when a component broadcasts a value to all the other components, they all receive exactly this same value, or in the case that the broadcaster is not consistent, the other components agree on a common value themselves. This kind of fault tolerance does not encompass the correctness of the value itself; for example, an adversarial component that deliberately sends an incorrect value, but sends that same value consistently to all components, will not be caught in the Byzantine fault tolerance scheme.
 Several early solutions were described by Lamport, Shostak, and Pease in 1982.[4] They began by noting that the Generals' Problem can be reduced to solving a "Commander and Lieutenants" problem where loyal Lieutenants must all act in unison and that their action must correspond to what the Commander ordered in the case that the Commander is loyal:
 There are many systems that claim BFT without meeting the above minimum requirements (e.g., blockchain).  Given that there is mathematical proof that this is impossible, these claims need to include a caveat that their definition of BFT strays from the original.  That is, systems such as blockchain don't guarantee agreement, they only make disagreement expensive.
 Several system architectures were designed c. 1980 that implemented Byzantine fault tolerance. These include: Draper's FTMP,[13] Honeywell's MMFCS,[14] and SRI's SIFT.[5]
 In 1999, Miguel Castro and Barbara Liskov introduced the "Practical Byzantine Fault Tolerance" (PBFT) algorithm,[15] which provides high-performance Byzantine state machine replication, processing thousands of requests per second with sub-millisecond increases in latency.
 After PBFT, several BFT protocols were introduced to improve its robustness and performance. For instance, Q/U,[16] HQ,[17] Zyzzyva,[18] and ABsTRACTs,[19] addressed the performance and cost issues; whereas other protocols, like Aardvark[20] and RBFT,[21] addressed its robustness issues. Furthermore, Adapt[22] tried to make use of existing BFT protocols, through switching between them in an adaptive way, to improve system robustness and performance as the underlying conditions change. Furthermore, BFT protocols were introduced that leverage trusted components to reduce the number of replicas, e.g., A2M-PBFT-EA[23] and MinBFT.[24]
 Several examples of Byzantine failures that have occurred are given in two equivalent journal papers.[2][3] These and other examples are described on the NASA DASHlink web pages.[25]
 Byzantine fault tolerance mechanisms use components that repeat an incoming message (or just its signature, which can be reduced to just a single bit of information if self-checking pairs are used for nodes) to other recipients of that incoming message. All these mechanisms make the assumption that the act of repeating a message blocks the propagation of Byzantine symptoms. For systems that have a high degree of safety or security criticality, these assumptions must be proven to be true to an acceptable level of fault coverage. When providing proof through testing, one difficulty is creating a sufficiently wide range of signals with Byzantine symptoms.[26] Such testing will likely require specialized fault injectors.[27][28]
 Byzantine errors were observed infrequently and at irregular points during endurance testing for the newly constructed Virginia class submarines, at least through 2005 (when the issues were publicly reported).[29]
 The Bitcoin network works in parallel to generate a blockchain with proof-of-work allowing the system to overcome Byzantine failures and reach a coherent global view of the system's state.[30][31] Some proof of stake blockchains also use BFT algorithms.[32]
 Byzantine Fault Tolerance (BFT) is a crucial concept in blockchain technology, ensuring that a network can continue to function even when some nodes[33] (participants) fail or act maliciously. This tolerance is necessary because blockchains are decentralized systems with no central authority, making it essential to achieve consensus among nodes, even if some try to disrupt the process.
 Safety Mechanisms: Different blockchains use various BFT-based consensus mechanisms like Practical Byzantine Fault Tolerance (PBFT), Tendermint, and Delegated Proof of Stake (DPoS) to handle Byzantine faults. These protocols ensure that the majority of honest nodes can agree on the next block in the chain, securing the network against attacks and preventing double-spending and other types of fraud. Practical examples of networks include Hyperledger Fabric, Cosmos and Klever in this sequence.  
 51% Attack Mitigation: While traditional blockchains like Bitcoin use Proof of Work (PoW), which is susceptible to a 51% attack, BFT-based systems are designed to tolerate up to one-third of faulty or malicious nodes without compromising the network's integrity.
 Decentralized Trust: Byzantine Fault Tolerance underpins the trust model in decentralized networks. Instead of relying on a central authority, the network's security depends on the ability of honest nodes to outnumber and outmaneuver malicious ones.
 Private and Permissioned Blockchains: BFT is especially important in private or permissioned blockchains, where a limited number of known participants need to reach a consensus quickly and securely. These networks often use BFT protocols to enhance performance and security.
 Some aircraft systems, such as the Boeing 777 Aircraft Information Management System (via its ARINC 659 SAFEbus network), the Boeing 777 flight control system, and the Boeing 787 flight control systems, use Byzantine fault tolerance; because these are real-time systems, their Byzantine fault tolerance solutions must have very low latency. For example, SAFEbus can achieve Byzantine fault tolerance within the order of a microsecond of added latency.[34][35][36] The SpaceX Dragon considers Byzantine fault tolerance in its design.[37]

================================================================================
Title: No Title
Date: Date not available
Content:
%PDF-1.5
%����
16 0 obj
<>
stream
xڕZY��ȑ~���7�M,����|��������`5�pp�������2�@�A�B�D!�@UV_f��/w�]@�]�pW���|���?�wa�Iq���.,���ۆ�������C�	�랶������C��n���6JJ�'������X����{؄%�<��Pwmc�A��_�cWM=�{��j;l>~�+M#�+�2�1�2���n�D~��,�����lc�M�]�^���ا�h���O���m���>m����z��{�u�����X7���֡��n&��M�z��r�}��{�R��,��/C����vҏ����7q��?�Uט��n��M���7��i��O�^��u��e�ۨ�>X��,�1C�J�s׼��B�c[�2Y��ֱ�O�*�(}���n������s}�\�_lߘVf��?��Ùˇ����;�u�y�N���l��0��y��~��`�Y����Q����`��\ކ���5`�>�a�&�
���y��<ށ���Ly�����cľL����"��]A<Ϙ�$���O"����a�M5�����q��)�L�W2'��k��Su4u�ݙ��Z�'��&�_w[��]u���B���#	ڙ;�&>�?�*�Eߺ�}�����3��7�^wz/�
o�x>�b*�&�/5)J�����e���R��P���@_�p�<� P-�|;J�}7�XX��ζݳ�@3���4����<��@vh�.���Ma	�Ʈ�(E�9��Mu$Fs��l"����׃��1M;��~'����X�d�:���h5�rϜ����0Ox޳F�h�9����Ǖ�D�^m+bRo��ծ�_}��h�%[�2�i��{^�o3}��5{�� &^�J�n�O��8
}g�dtGRݾ��V>4�ktm۴�J�}DV�]�'1�XRz���?�K���3v�y�+W{�]�T:�}x�ܯD�!���%�k��ט&`F)��ۈ���y��4ҋ�]�PH��	�sݏ�4��z݈8���hq��D��	�cy1U�0;���6}&�h����f����%�پ�Ѓ�����?��6=���8Ks��(<�O��<��j-nl���g�2V��wKe粂�V;�\`�i��}@m�TXh��u&xə��j��T�,phC6G褬������I�ϋX�b��Y�Ad%�P��q��l���68k�]0n�
g&
Y�Fę��Y7��IQxOV��`N(���&��4l�0�SA����T�~��҂�#��w^<�en�N�4̼'�a�A/�R�i%�O$�,�Ԟ\�ʺ%eW3�ۧ��\?U�:_����rk`�L0���u����Ax�n7��P�������@bFyx�GJep]����~�X���phy���LHo��X, l��T�B�� �w��,I)��w3��Y�	yKt�?������d?�~�r�������\������G���F�ۂpe�L�c���-�p<Y*P8x��� iI�a��#�j�H���i�n�U�)Su�C�L��3:J�d�B�@��y�	B�������gC/�t|��?k�?�8f�_�����	��7:�蓇~^,�|����:��Ȍl�6,J� �|�b��$������Y��I�>E;��,�)�k�Jw᮳_E��_�F�D[hڊki���u;0�J��/䀤��-i�-�.B?��p���>�_eu�]u����vk@�,�*�;�i{鍭<{5��Ț<g��>'���Y(r� )jN���5��x�_��9ě�L�ԱX������ ���Q>ˮ���nde�E*��ưdB�D�%���M�@.4M=��΃����T��1���|�PҌ�E��� c��e�W�-�DH�����4��H-|_F��`F�e�8~1�$	�Y[���~����?0V#��_�Zu��ad�K5`T�i��g����,�HЉu����`�I��2��G~��C�h�D�%��8,B���7��9�9���D�"�V�*(�ڡf�FQB�E�'�;��dH%x�04�ݯ�� �Yl'
��r^n�1���)XƓMZ�J�CIiٴ��WnTf/
յ�)�{��)Hi�QD��^z��Ԙ� ����v�L+���`�D ý��8q%I+N#��I���$�b_Q�m���v��-��/1إ�VKC�p�����B�{���a����lx!��`�����S�����YB� ���PK5��	մkfL�#��x��@J��d��\�8JOw��=�E� ��]p+ۙ��H 38ǎ��۠�����T4�U/�2ʏ�ݑ[�Z��iR����-(�C:M�n��QeF�Z것�5�2d�@��'[J4�A�'(�X��(<�Д�r�Kc��V��!-y��l�Q��x�ڍA, 	6H�1�g��7���ɶ�s�P�p� �!�ޫeAwE��92Ɂ!�_[8P��2�CMN#Є�g���̠���E'/s�$eF4�mr���`Fۭ �BV^$*�F��=襆䥕
l���#�ʥJ�B�^�a"*g�*���P��,�iH�/�
�u�v�G.ۋ�����;�vt�R�L�׌č�,J#�?�|�S/x���ÌƋL�W�;�3���VvR�4�q�#-B�y�E���޴&4m6����	(;��\��u�3���У�z�@/o�L��L\]X�>��@y��C�4ɣ�3�/�� m�A�q�� Yh,�lW��s��q��s��G��Ν|�d��o��s���+̫B2��G�f��/V�Ȑ����1��g�Hu����/��3Y��:�9���l�7'5rHj��\��y�:>D8z��� �yÈF�~��@��Q�M� ���P�D��*�@@�C��&��&$Qꇴ���%X��� �S��E��2�8Hh^�s����ΦI:�s�[ڽ`���[$��:�+���H'E������5B�(��,����T{���'cZAd���n�0
s?v��% Mݨ�#-��k��!&X--��4��>��Fow/b��Y����?n.g7��m�0נ��&av��n��2�}��O�<"��A�̋�3K�2j󽲈�^�"�|"p.%�`��s)8�Jw��o�[ҼEܺg�e�@#�קBkaQ�0��o��:Y'�	u�x����^�� ��_87A=."/���ɹ�v�c�V}X�-�0�2�Qf�}Z��\�(��i��g�Q�����"�*�*oCg�k���}7�)K��p��eN�克�{V���E�T���˸r\�U��(%I��kNG��q�(�qTGA.��E��B�٘J�������&$�=�XH���"jO8��c�A��d���@=�"��p&HU�%��qF���������D�j�wAX�w��x��TŢF�}��6��f�;j���z8ޯ�P�H��F���e�a
S�Vr�	�V[���z����eA
���@
׹������H��>���\�^]��k��4#���Rʯ���'�joX܄���L�8�����]a ����0�i��(�����:s�1����x��dE�3�+^]�̑ �r���-6��( �^�W9Z��v�Ķ�u��^�g������k��������J��j�m5��7a�ď�;��ܭ���.*�(���Q><"��ҍ̸�;%��j����L��޲[ںM��	kZ �/���k�9�^�<r�i<s�{��G�����=��� `:	�7#���H��5�MCmɍ��S9Xx�����$|	�OϢ⾔��[���P�,��8��^��$�hd��ˠ_j�xPa`�6�%�c����Z�}�5�a����b���춐Zk9x��)�rC�[st�u��q*;~#8�qS\Ē�!GB�'�j��,uIO�,Q(R����8'����9*X.oݔꅧi,�Ϲ�"z _N��]njŹ��i���3t�����]rZ���L�^oxqjF�!g,�AH��4��s�K������Y��(R�܍���|A�;�,GtBz��"��Nl8�Xk.[y�[�w�	ISE�lD��+��� �F��r���� �.l���G��;F�ꝪR�	���Q���� ��v�^���[N��U�ݼ�e�����ay5�V���VJ�����봕��[F��q���%V�f]��~�o�g� �KX�Ɨ����P��D8-�}r(�_]�ptG�a�p����&�N�E��dpF�ij��E1�	��}��f�g�g5Zj���zo_���i�Ζ���ך-�����z����#����������B�#̈́_����!� ��-�$@]}�}��ݸ�N\.�t�.��U ��U�x�Z٫��(�.�׈��s�lN���%����|$F�tq��2g����o���6K
endstream
endobj
29 0 obj
<>
stream
xڝ[Y��֑~�_�o&�i"��I�{2k���C��M� �������.��r,7�ԭ���z�\��{H|��>燷������9Y<�~�y)��Q���៛�i.�y�� ژ���e}D-�����������֣�M�^�/���:�wv��B���T��0����ǛG�y�L����ٔ�ũ�L����mkM�i��,�Qq7yי�{���>�pC�u_�Uu���LW�M����i�O0�`S�]�g�V:&���`�_9�O�`�}ޕ�-�9>w�;������I������u܍��w�� q�`
����&�4Uޗ�A�+��B�V�˘�b��7�����o�A��ͭ��,��(�Cb��SS�%��kۚ����]���eU��m~�������b�FyOt~>�9G��ɭ����'���Ë��Lї�%&MAIة Y��N���K۠�Sy`,DN�C?h�Ks��M-�V�~�L�9|<9�w����m�mp�t���tt�0u7��-�:�͡|�ɟ�������'����N3�G)�����q`��|�G��.}�w.y)`V#_KP(�k�}ה�T,�ӕ�Ψ�P��`T�D�'���P���{:a��PCϻ�I
���$]tm:,�M0 +ݺޜ����7g�y��1@�N*��T�X��$ڜ˺¡�mγ�ɦ*�^�pT|�\+��o>��OE~�!�8<�����(�R�3E�4Ie=���L{��� z�ɛ��^����B{\pr��8g���se�lL\��:q2��A6�0&�~,#F.��FC��0L�V�B3B������t��������h����:N^�Ɖ|@�b��=�	������)��>�2�;����	��_� ��r�\4��y/�J�,1���_��8$��_бH=�h�����ݎ��s�����=�hH��6!P�w����n4��Ů����/'� ��e%���US|�����2Z�P�`z0T@챸X�I72�Z���lbׇ�J+�H�Ժ55�=��4�ڵ:�������;�ȁv��>�τ ����>o!�8Y�H�;a�2���$�w�]�o�J��_��+����s�߸���,�����T�u���n�Sa���Ş�c=��7�~*�.� �ϱ��rOE^�e �5	G��6������\'���a츲���<�u�l6�c@"����i��&U%"b,)�2a��_W�}~�[q<�>�a��
U�|:ř�"��۬�@T]�--�o���ms�,1Y��¦�n�|��,�P u�zUA���@;^#�-�����	�K�[O��sW��"@���h(olY;+�R4,o��\�F�Di|��p�+��,o.��s��Rf!L�\>���f��&��5b��[4��}�� }J^@Z�!o�NiL����E%/ U�ܨ4�L�4���S���M�3�B1�JB	R���%l�v#LL8a�ۓ��]�);[���m���f\��1˥�� *b����"	���o���OY��b�?)$�����y��;ܴ�J���~È'�Q����5~�Мٔ���A(�E�����Ļ;f�/�~a�j�d��X��2e�2��4��ye�N�-��p��'s��Σ�*�F��(�/ݽ`�N�Iw@��C� �iΥ�kv��+sX��^:A��,���vf��d��ĭ���ĸ_jcu9��&�̰L	�Ո�I��`@�����N�$�3A���]����2����
k|6d:���n�zIK*�6�&]����9����p�h�1 �h]���) ��~z����ˡZ��������e�;N�e-�82r�rLh��6g�S`F_E������.��{�s_�XbE�?�����D}����c(BGp��E�����"k7���%&�[1�ʂ��{N���*"��E�D�J� ���>�)F��*��gx�Paƀ�����E:���IY?@�}�-_��O�={$��P����P�,V*���?Z�7iS�E`mjRδ�B���%֘�bbw(�MY���͖�K�b��/��0�o�;E��|U֌6��	� rRbᴗ��D]X��)d[�w�7��۲/�H��^@����r�O9̤OЈ�3�(�&~����e���,;�,1�#��e3�jxl|��D�U��X�������eX^�XvG��'e\_��S	p�YZ`��U�?t26�#���YM=s��({��7g��n:��3,������'�g��'�C�g	��~��ݖ]�u�V|gl K���ʸ>�d�M���hɄW���&�Z��1yjT���M"�9N�ީp?�+���ql�n���HVq^|D9�&^��͑���+�utbS�8;#M�栖��P�K�o���`�
�Ld#Y�"U=,��eG���������Y�a�V �&Aj�r\V�����n���Z[�Ut
�������z�yp�����.��x�I!�2ۋ=Vn�����~�W���և/1����Cwa��)��.'O��F�ď�`6���J5}s���Rm,|U&fYl�7(��m�*vI��LT!uG �BR�Z�˼BՉ��nj�Z&P?,�k>1�^���s���7')Ɗ�1ݧ#~ �z�M��D�/}�
��np6�2���B:� ��9��b�Ǫ�Td����\}�1n�Ɉ	��A`���-�Da�SmQ����1�,��T>2�҅ol�!�~�!K����^O����� ������%a3wS]��bF(��e97��j���BZ�+���v��e�|,�d���n�\��p�V���a�ny��I�	�<�M�hO(�ğ������KtA2FN���� I�@K�$Ҥ�s#M)xb��u�*����ĲK�xN��T�7	��-�]&�+Q�/�iBI��� ^�4����5�v!�
��G;Q��P=<��,�!��3�s��"v��_�� HV�Q��E�C�v/��Ʌ��Z,K�����^��H�5�R>�ID6���ېK�w?m����OM�"�R�	���W�>C �FO(��Ɂ���s�i�������$�s�W]�yQ��w�Ea�>x�4��I�������릯����ٔ�l:Dԉ��Z��>+��)�Q����}*q��.'Y��$A�22���PC�}#6[C1�|@;6�� #X
�#��8G�q6�cAp���&�Q4E�LW�H�g��`�$�y��W�>���x�����FǮ��5t}�G�+K Z���]�06�=�x�ߞL�*�3�h��$5���Nqyp�f��m�3	���/�V�e��A�7t��E�m�Ji��Iܵ�:������E�2rbop�@��`�D����:1�xD"��Z���Q�g���լ�c�n��j|/ v�yaJ�:���ƈT�_懃:��sy�O�L�w�ٌ��7auȆ��L��8_օ{��w�X���Ҩ��@��j맣6�(�
ư����RMg\5mm����R,��Y������:��4�a�5��%U��>ǂ���v���@0q
�Y'��m���tH6.�fL���H��V�8���e/�'��E�� �;Dc�tJ�@��N\L3+�`��Abg'�����Ѝ'4??��$��
C��F��O�yG ,wӯz����̇`�d+/_�ʬE��	�a�G��^0���-Y%q~Rb5gL�)6uR�(�w�ybЧ�*�Q�$v�%#�j�/n�Ǝ��%�L� ��`Y���N?3es��� �f)��l�9�P�l%d5���T����?��+$���ὠ����Exg�tɓ������+�QѰƓ�@/W���.w�ز�䘊,R�f�&�!�F��t��qy}/6���nKl8�\���H�5k�F ��0C^�Nc�s��U��W��8��d����Ԛ�i��Ө(>�˘�2�Nw�u�F�n��h�="1Dh}wcV`�������؆wY"M��$�u3yٙ��]15i.)�r�ܫűzxx��|��.e�{x�*;x�z]����xpO��ǒk����u�.vU���"i�>�Y�)���� B�t��+�����_�D��>J��QQ<�ꢓ����5"|+��;R��y:��Ts�өO���u�ht�MomWD9��X͍T�t���]�|?��%�#����ZϚ���2�����t.V�ݦ��-�s=7��2��Ը� ���5����D�?
�R�<^[����/�i����TJ;a���d
�(�I�p�P�9��#߮0�ĉ�/j^ޠ)-&'H���������
�/i;��D�������?�es�
endstream
endobj
32 0 obj
<>
stream
x��ٓǝ��:��2����E\��R�{[��[RwSҨG��5k�"AH�/$����7Rl�j۵���Mi���m	�Ӿ
ek6/k�"����,��	�f��g�Ǒ���^�>3�@"3~�_����'N                                                                                                                                                                                                                                                                                                               �ɜ`���,m
 a�6��{��t���������n#�/��*� a���%���Z��:7�n���'�K�w��/!y���D�L��{E��~���7�_��� BIs�2/�ڝ���x���|*^ǅ�����DbK?�r�����M��{�D�܍t��؟ �vtA:��m�j���w�^�zn������)�W�F�7>�|c�A���e^��#����!����~ S֮I6�t��#_���V����O7��a��݌�'�⯾r�ƍOd�W*m�\��+=#��o^XX~�;Ҽ;C��o���� 8�w���7�R���U̗���O��!ŗ�a�/S&��+nmn>'���9��
�������>�O����  T��q^"�O����w��?.�����_��'_��b��"S]���W���XX� ��ӛL�.|�)���7�{`��λ����8�}~0x^�����~����իW/$�ٹz��+W������U����?��E���7޾�_�|㍗�h$Q����vn
�6I�Oe�w���v��gv�ѐg�/�D��W}�����|��W.����dO�����W�}I6���3�i}�U#y1��O�����n�^����Q8��U��wվ�h��H��
�?_2�c_P㯃�;"5��V�njS
٩�z;?'=�?��Ҽ)�H�(?~��pW�҉ߴa�X2�[zžhD\������?1ݦM}͸��������ĮgS�͠��3Yw���֐�q����A��S��6�􅜖֒����>/�5P~��,:�}�!�+�&d�|'�E#�DYK�����FC�w)��f�b{+n������q^��l��S��^?�EO��>H?pQ�Uq�w�y����i��0/gEh�����zh�Hw�nv����l>/D�o�����7������e%^���&y�{��Z"�t)y��K�.%��f�3����+�e*���ꅅ�o~2������P�]�$�Bd�{B�?j������3eB�w�����-��ϤKo�╯��~��յ&w�,��a�;c�����禉	7�����|AN@vJ���:t�Eu?���]V�
�Dw�j�����^�M��~l R�$�M2��ٔ4y��[2;N�������rK����dY��Kfl �K�U��rOn^t�`~�xs��/���Q�԰�n�jW&�g��[f��#��@�xT����+�O�}�?bX���wŔ�{���5�0�B��͜*����{����@j�8�����P��y��z�Ox���4Z��D��H�+���U��k�V�����F��*�o���O������˴��=U�Ē,�P��x^�
�+�?l+4�m�9G����� �zW|����wd"�;���e����@��?�'�j\c ���QzW՚�4�z����2�P������!��eq����f�?_d���Eyi~�}�����ٰz!�`1�<ߕk/m����O������B�+�Y�Nxu��b�&Qb�_]×�:������?%޶{Pɭ�/���Oa������ˤ����2	W�2	�w�ڻ�޽v�ڟ���^4��M�_Л���6��N��zWYW��ϓ?��>����N�ke��~�G*!ֿ6�5����o�T�@-�YV#����T�;o˫��7��Ti_u֌�͞�c�w^�M�e�-�-%��V�?��]�6H�����r@�����O��f�o:ߐۿ���Z��]HtQ�ﾡ����:��]���]���Խb �uzL`�M����k"�}w0�Z��7��G݄D�ד�t.t�:V�?��yquU�i ���|5:��<-����I�W�Y�Ϋ��'ɿ?�r}������r���X��k��Ձ����{IN}�嫫J����^��*��E!��ڻJ�΅��.��Ý%2���N���l���x��B���t�v�n��oZ��X��j�vu��5�����˿i�F>�n"���,$Z��g,?4��8p�/��J��x�H������o�e��U	��f�|n0���~4<�K��%��MR_ױj���U���H�x�?]��)�#�G�ӚM11���3����>fR��c*s}��ȍo��[;>P�]�E9�=�#�_R�w�̷���ֿ5�ݼ(�^1ƻ��`ÑzW�ΪyдR�C]�(S߻�|��_YL.�!wnޔy�����J �V�%?���7wMJ}I���wv7-,�K�|��Ϥ��k4S-'|"*��ë��S?�z���yC�����J"%޴��fF�3R�7�����mx���n&�5�v7o~qW}��;�V�����xm�ے�M�ӽ?��!���o���X�Fa�����ݎ��@L��!��j���6�t���@��a�xSj�Z����7m����eA���Σ/*��~$�d�-����N�+x�X^�����^bA�{tszm�M��v}�3FQ��9L*2�;�vO��Q�W|UH��y��-y}�%�U~׮zS����}W�����z�AZ�.�ֿh����u V�,ʵD���������4��LQ�;vN�[r!�@����\ۿ�J�z���K�xp�H��ʿ&���I��>7��/H���~_�W�9��mG�?\���]�')��d2�Q.�	��Z�{r��Ѯ�K�x39���G���a�큚�S�q]V��[����t�ު��ⴼ���z�ߧ�>R�����9�*�3�#�9�R�+���4l�K�:�+65I!�<�_�o˅7˲���D�M���V�7�і\t�_�]=�*����SteBY��W��-��B��6(����]�ş%aL�;�>rp�l�U�ѝ�DR����o?)�����1�D�b�7ur��6_T)�T��-Y�,4�.�$�Ի0|�����»kJ���=搊W�?���D^��+���I���n�K��t
{v�f�R�x������"y���,H�������Nh���@Vc�Z��j0���A�w�R�J�������{��_?�'�UY5q���	���)�}��X�Q&���T�(���z��0iKf����?��ߛ�x���U����&��rJb}9I�|ީ��w����������r�}���������vUoN���M�c�{���)����pe�f=�j�;����+�P��x��iP�M$���^t���$�x�fś�5Mn����`�����&/;W�ou����H��e)׋-ϻF����1-�њ�������f��8]�l�ҥ6ᕥǃ��ֻ_��.��/��.��X�*r�����j_��ڟ��ت�W����a���(T��Y���r��`U��h�\v���즥�ٸ��?�2I����|s Khd5����-L��ݦ�ݛ:!=H����|��Q��w\�Wp�iqZ���ř^�����g�j��,M���Ir�0�+����^{����G�kkV�=W�W�o"��+W.(���x奻����>%6��˝��}4�H� {�-���G��m筁�o�O���H;$:4�]ѹJ��?���ϭ�a���o��}��������OR��_�}��95�r l{Y}��:!N^��$ԙ��T���#Ox����[�̬���%2���GW�R�LM��u�j������YQ��s�]�򂧾O9^vVɄ�E�����*���,XJ�j}n�R�{������#�<�צ�Fl��?�o���Y���SZF�	P��e�ۗ?�'=�=)���5��J�I>�y�;>�+�&y���z�N��-w�mWd�L�N3ޔ4�9�����Ϋ�W�*|��י����L���M9��~b��}1��{N���f
�J�OO��O�w�%��a;IZ�Q����?��=����yZ�����Ӵ� �,���c����u������-9Ɵ��wJ"_��n`&t�-�e�b���Y�]��W}��
N��Hq����Eڼ�[�N"\�eN-�c��y�o?I�~�VU�B`�����qB���x�'���]�5	�K^��{�޲����]��?�/�X�`���d�˶Z��/�^|�o���W�db���o"v����vTEd�6��V�3G�5Ч�f�A��3���٥7gn�t�1b���K��͎�$k;�T%͟�l�yZk�[�c�݈[���;����tY��tDl����Y����ֵ�������ݭxM]eK-p�v���&�Բ7���Z��ڭ[?����<����>�K��|��_������^�}��e��p�����!yI:9��y#���g6��~���nW�����I��k�
Ͻ����x����_�9|�z����;Z���z����-n����Ι�T�����������R������������O�TwO�ow�s?�H�Q+��hG�R��{�l�Yw��z�$����n&���sG�F[gt	c�0(��c^�pF��hW5�e7���+��e0��u��z���:�ew�Cw����{,Sо%��wba�wl�5]�Ӷ�H�W�[K�"`��^D�M��d��6��gpI�T����^���>�Ϣ��Ι��4mO���z�PZ���v%�~B������+�oG�x�&
<�ҧ�b�aY����Ŷ���w�n���ve�]��2��m2:�ú�l瓥��%���k%�4Ur�;u��G�?���&⽥,\�.�ě�@duϽ��˗�b%[�iV�������c_��L5֠PH7uS�欔7�k߼
3�SyBm����(-3�)�a޼{۩z����w�xWV�Bަo'�er�Ԯo�P�t�#�^�l�yU�������N�Mˬz���]�nm,>���9��2#��[�I�-����2־&�Εy�q}���C~�M�R��oL��KN�YYjw����*bR�y�XC�НN�����O?��c7�����ߪ��,z��e��y�l���-{p��$��`�o�^%麻�xC��p�*#��l�S����8ǹ�➖^�ߏL����.�'�g��%~M�����@�����;�xuP�$����f~�TU�~���FQ�)�-��^�+?_�GQ�֠����I����S�e��x�Psk��S�]���Y˘���ٯ�FS��%�9�R���e�������Ʌ�`�]z�w�kY^K�m�K�RI��r����WL������t��,U��o��D�'�ܔ��T��jY7��:����;��-�ye����.���o�)��D�_W¾z;��5�m�޵��mm�N�ע����׎�&њJ����x����ca!݊BO_ӋڵO;��^���9��U�>�9����E����s�����8Dήr9e�";N~I�U=:a����;4f�;2�U��?��Q�C�M��u�BL���"^Zb�Ox�kfѰ��L�8j�`aC�;E����N&��N��krr6�u�`.�jֻ����)�ԋ� �^]�`ě���7��77(*���ZpO\c����d{�'���UNZ}�N_�����)!���|�����w�xל���ܔ،lx�d��g�k�Z���f��W��7?�?�^t���{���v�C��W�u�4��kR^}A�Z���]k�A��+d
��>�go��g �٥����{�b��:�]�	�F���a�E�/���י��ER����\kg��s���_y�r�]�~���]�~[�űo�ŵ��������x����?���o���z��so�7��ݗ2��x�60������}�{����f�/[�#;�����7���K���f��v��N��߾�ub�q���2�A�c�y�eB��tJ����8oH���<�ܕ�nZ�e�o���\�j�K��v��Mw=�6�{�:N-��H����uQ3�jF��&;������`��w
v��+����S��k�+�{I�v7~m��\�Q�RO9����b�vտ�"��)�8�]яl�3�_�.��q���Oȩ�+���,�TI��)�9f��^=R����ߕQ��&�<ﮑ!�zL׻٧h6�;�����y�j:�K�F���zE���e<���7�<�F_���M����u���'������2��m����b�^ﺕ���=3�����N��7�׼z��O����S�x{����z0s����yW�Բ�Vk�r����ݡ�Ի߻K%xS%!͚!�@�T���w灗�~.���K=3��n�¤EWk�+?����B�n���뿾��~��]�~eϝ�8w����x���˗mW���u���'�x"�����_����$�H+._޵��ksC'�O;�w~���7�i�<���Wy��<��#�����L��'������6m=�����W�l�3뗟{���DaE�7�����4�/ڢ��"�Scά]⁢�9<��ش�]6۱w7mx�x/��h���d2��t��?gA�>���l�ffc$�L��5��Į��+��r��2�f�9�7�te�����$'y�`0���7�w٭+(�ma�A���;���v��+�n�穕+�2L�՛ZL��=2���7%�"�S��u����tou�Όq�Vl����F����.�	���]��Ի%SE;��Ow�d����I�T=����]J�ݗ��P�C��l��\εzS42����׋�Y.Ԯ{s�L�.x޿�|��x�����'lʐ�o;�j�H��j${���R���z�`nڟ�(������?{���g�<���$0�мnj��I�����+����:��Z^�+|��-�fK�v�-x�_�L-qz��xޥ;]�`V��?��1���R�^�������'�d�Z���;ɑ?��ެ��:��^�[�;���w-��7����.�_C��/�M�FϻE�-vﰀ��v��]Z�\1�s���%�=�Q��ߴ�S���9�ys����㪼7e�%�斋�`�]�����_ɹ��`p���xo8��浆J���x����건 ,-�R�J]9�qgy�Fƺ��3�v;��
���f��n(�d��!�^��V�!�T��Ɵ�5O��⼙��dBF��>�\pǑv�g��{��m��[ټV�V�ex����s��r{E���wdHg�"��̧G����)�0������Sޅ��z3u)U�W�Գ�¬�޺u�ݯ�3��̈́X��h�7{JG��1̭����W��4�k^�pcR�����3�+�0Cƕs)��B���O��=ɼ�xDe)�����e�5�U�xQP�9��0��џ7��O�S����#-omi.�N]��=F�4�wi_�aC��e�͔d�FG^���;4�Bv��������M�d��y�~T���y��*2����5S���^hL?;���x�K�w��뵽!=�WF�ތ}k���Z�J�R�����/���{�=����7���D�7�d�̐�@UV���Of?�73�U�����>bY������`����O���{��~�����#:��ĥ:zk����І������d蚦tL����4��Dv�k��)�?P������hܯW� �̛M�p"�?D������+�FW��K�ٌ�D�L��>��V��e�R��̺��1�|��:{D����/��;y�.L�?���3(��^/������f&�\��(hXy�N���a���/jZ�ϥ���_F�}�\�٤a��[��,���YpVS������a��7�0��"E)Fa�s�˕l�_�E�;Aw~�;���!*qG��$�>�pt�37"ۭ8]��x�洘8��w��}���� s�$��t������R�T)��̬���arcg�k���'�ڥj��+���Sĕ����s���K���/to��?ԛOR&3�Da��_�AQ�)���?��Y�-N��NM����9�5�%�����X?���8C����-71Q�hM�MMV�3�����K=~mSW�
�SK�Flq�^�\�	~�꜑�n�*�v[�4�s������͐{\cqF_�c֠W<��/~�?�c��8����?��Y�-N�u��T;���Z�\Z>��p�zE�&ޟ������߾��3�'&j�H�k'UQ�����Ե�4N�a*�OMa"��-׫����y�w��'��G��K���Ͼ�f3�d�eX�/�8���.��x��.*�T�䯡�e~ax�xv�T���DR�r�����ؖ�g�{������'������!���ۏS�Sr�W�e�8�,S��~&#����N��ҷ��*�O�9�c��x�ű��zn�Y�A�q�u33�3�~��r���ԛV�I�'H�:�]B6�Gg^{��qS�^^�8h3�8���gĝ|�g��	�͈7��2������> b�ʻ����4h3�8�w8'� ��2׻+��Ff�t��j�Ux�D�_5��&Nq�B��P�5ٛĻ��C�r�<�:�e������k^�p�&M)-���XR�9&+�l�8<�	o�EAJ[�7����.���7��!Mx�i"HY5�U�6"�"^p	�8�Mx[�U�R:�y�Iy�Ib&+�o#P�ꄷCAJ�cS����{��
p	�8�iH^�=��?���0Y�]���*�.M)}���NC�+�s�� _���8#I�ۣ���Hy���H�&���L�3�+�>M)k2�b��/�a�<�+��U���J^��"�m5u�Y������#��+�)�5��I�D#^S��e�<�V�c�+�x��\6�z]9��x��.��#��}�&��:�>�O�b�W$��5d�s�Ȑo`�9���u��gf��-Ρ#�Gp�9�x��)f�bo�8gm�����sl�Usk�<�e���-�YG���7�✌x���w#6����M2�]	U�]�9�vc�)��@��\q�r���_���E�+�Њs/��9���k���qo����x���x�N�8gs��O��ucO��?BV�}����]�x�����O�]����E��x�"^@���RNY��/ ^����W�����E�p\Ļ�
(/K��N�^�r��^�x�Ӎӛ� ^(o����	��(�m!7�w�N��!a{�<��G� ❎x�J�[;{���u�o�O�X�a���z��JL�\k���#^�f�xţ��o�B�xcx����J�k�xw/h���gg%h&p��nV��ҵ���4 �".����`08���D��{�d��LEѬM����N��U��tY��u[��ug%h*P�qV��N /h�v�0+���� ��N��ծ�dY�	A^��J�T Ļ�µܕ�*k�A�w-�붂Y	�
����h�O��5Ј �b�P0+ASA"^Y�IoqY�J��P���J�T Ļ�D��$���`V��)ލh�Ɋ�hD��1}(����`0�5�/�|Y�F��<'
�SQCqY�	��<�
��SQu�P*�0Ӈ��MR�5P	���+^wV���� ���щ7;+AS�oLEEϻD����u[~V��)ވ���wIyB��tnV���� ����;Kӈ ��=�s�c4�g�FU�Ptgi�x����1�Q�xV��!�h�t������;S�MR��<�P��}��ś����@�7�']"^�Z�M����t�x!B�=�BV��X��K����T��7��a��we�J�;�x�j ���:^8"�YǛ��)޵����5�"�9���{5�,��B��xg��o��/�ڕ�4 8����1����x��/�ċx�x���x��YQ���4 8�+��F����_�ˈ�T��/d���./D.ކ-�!+���;բ:1���@n�E�]�U�]���̋����7Ĳn�#Ļ�xMQ�\��?����F��lQ�|�W���.a�x�x�e���Ny�6/�X�z�{���N�x�]��Ȕf%�Pod:��a��n���Wi4��:A�W�EG���7���*�&W�A�?��&[G�P,ހ�/�O����o�����M�x�щ�<��_��M�Wi4���A���0A�x��vn�ؿJ���o$���']"^(o#(�k~h"��E=�#�U��]S�&Y���o,�d�����m*^�gi"HY����B���"^��ۍO�r��O��u�L�9M�xc)k@��xu�9M)�ܟ,'��w#S�2⍡��B��72���o$e�b���� e#������x!#�n|��#^��V��F�4���AÈ�o�F�48�]����B��572�� %��]"^�U�-���m!^@�S,��!^Ȉ7��]���x!#ް�*�72����Z�����*��"^@�S��M�xcYA�x��E��x�XkIA�V,K�/ ^@��/�����E��x/ ^@��/��/�>⅌x��/�ċx��E��x/ ^/ ^������D�o]C��x�"^@�����(o���A��x�"^@��/ ^����E��x�q�'�=����E��x�"^@��/ ިĻM��ċx�"^8���$��D�����x�"^@����xW�x�/�Ļ�x�NK�m��m#^@�S�ƋZ�}���]�ҍ窃x����Bҏ�x�B�;{'Oр������J�&�xa~�/�&��m*�n���#^��X��9B��M�Gr8�"^8F���x}�Bڋ��^\&���-�/�O�]�E�P�g��P��|/<��M���A����\��u1G�~�U/��&^��bw�`3���vK<;�Խ��±��'�A��Ļ�R�k�+������W�{�Q/��#^]ȫ�/h�vK�x�w�v{7'��梣^��x�z2Y�@B�Ɛj2W���:�4�;+Z���^��I�^YB�k��d�w�;D�W�"^x@�[X�@�oYQ���b��K�
�aSδU6/�c'^S�@�oqQ���F�u�pQ>l6�1/��%^[րxARZ��zw�����^�v����"5o���[ż���x���x���.--��z������Z�ǝ����E�pLě/k���7_Ԡ�w�uE�CʧEƲ�<��@'�*��±�[�@BBIQ���m��Er��z\Lf^��B�Ee4 �5��]yD��zV�E������&^]�@�og�xbBv���z����n�����y/ ^x���$���+��cZ��,y�4���L��?��e^��L��y���x��d6��Vۊפ��2�u�%�΅��LF�� ��}��	��']��V����~�O)�n_kw#�3�x_nT0/��"���.i@�-x�e��ʁ���e#^9�P�޾�]����?*Xe���q�}�%Z��B��^�]+^=t[,ތw77�Ż��y��W� ^(�6րxa�x��=»ڹR �	o�ݭ���w�0/��%^�a�F�����cŻ�n�;t�W&�[[[\p�Bʋx�x�w�Be�vu=�S��-,�U�	�bkkssc}�j#MUB1�A��x���Z�#��j���HS^#��^a^O��S^��8�����xK����N��y�x[R��
w�	<��/O�.���h7scc^��:����w�C��`���k0�xM��j7Uoi�+̻��߫��["\c�'�M��xo���e݅��ZC-0O�k��ϻ�/�u�;j��������^��+�xo&|���xӄ��h�T�7ʫ�+<�N�!^8��C�0J�	w�m;Ey񚄷SQ���aG6X�k@�p�ī���( oˊ7��X&^��v��ws˭�uŻ�}����L�t��'c�w2��Z���dﻯ��f�o�o��xS���̨A^��I��~�48dśp�����+^a�-�]G����]��]����V�R�+��=���W�͜x����x{�x�B2�y?kk�y7�z�w�de��xۈ
��F�p<�+���CC�k��Y�<�Bݓw�H�#fײ#c4��-�{O�#C%�&|��S�������c̫��k������gNN��l'�-�{�Ef�����C���?�MF�]7��Xw��Q�F^���ko�x!aogK���xUGf�&"oz{wT���f�	���Z��ƺ��}.��=f�x��:��Ԏ-WI�'�Q�k�kԝ���N�OwG�0	��o�r#�����]_�D�f��+-A�w;��knQ��&��7��o�bCg����AL*^�)��${��Q���w�G�0�x�����k�k���Iī��6��4�ʢ�X�x�����-&����C.���+ݻ6�xͤg+�-[M~o����$��y�p<�&�'^���'���FL�d~Q�6���o�LT�S�;�x��?���(īG���|��a(>���i��S���X���7������xǹ�}�x�-j34 ��]m�*��s{������0�0�u�ޟX����f!ވ��l�n�x����(lk%l�+ի)�o�d�e4H��S��ZC��o�@������g�9��5����ˉ�X�e4Q5h�2Q#��Η�%���k�=�l�G�ٲ�	�x7�E��������/,/�h�f�D��G#^8�����k̫�^Ezg2���w����#^x`ě��)���͋w���;�x=�*���y��!^��]�T�}�x!C�:����-��8��A��x��ךW�װ^�ݮ�r��)�5���W�T�w=ծ�d��E�P�x�v���Mzkkn!Y*�>��K�aěܚ{DZ�{�+^݅�W���te�]���SW��y-y�ꄷ�O�/@e�����;C��W�}��~�{Rm�6�S���o��{�ƿ�R^Ǽ½z)qox���� /޹�x���O=���������ϱ�/@�>i���$�%s�A�r�|���'�9��x�/��/�F�W����PO����oV������k��];�k�q�G����xO�w���]C��S�."^x�ĻC��fy�ֶ��Æ��t���	n��w��q�Ly��?��&����6{�Ļ�x��7�G� ^�&^;�榼b]���`��K�k��?��_]R�,��skC��x�%��7��]"^C���w͹C�μٗܕfQ���sk<�rD�xw�U��5��W�g�1o!��p�#�cͭ-.I��/X���x���]C�0�xmʛ�׹'C%�{�	�iY� �KA�o��q�3�`z�{�e^}o�4�2�f�e�x��{S��K�i�kͫ<:ܴٛ7ؗ�����H���x��W6(����s�ɾ�x�Kx���K�#�.�c,^��*�f�۫�w�2�]3�;:�u�O�DP�]/k�<��B�'gR�4�5�Ҽ��d�Z�VLx�2^���I!/ⅉīT�kԛʷ;�]��j~5⅌x��'C�0�x��k�D����t�v�w�@C5��j�MNw����¤�Mͫ�+�;6�Z�ս�5 ^pX����¸�͚W�W�W�Y�L[hW�3嬨�1��E�����x{�2�ś�תW����h�*�t7�wGz׻)$M�xc)k@�0�xU��7Q�p��o���V�һ�Aī�MFAJ4�'C�0�x�j�j�Z�VA�EiW{w~�w3E��⍡�����I�R�p��o����v�y7SԀx�o$e9�n�xPI�¼&�Mԫ�k�[�~i]��J��5��D��KY�I�{B?qX%�ֽV�UP�oX�V�n���D����x��ac�'��"Mz�{S�VB}b1�n�fo/B�+�H4�xaB�ڤת�ڷ*�3�v+x��0M�x�#�'sf*�x�/��[6W1g�+�k�;ֺմ��%M)�<�ҟ"F���IbG�ڽ>Ş��O�;wb�/���x��"^(oiY�����a?4WY��K�'�8�w�{R�����S4 �>/{.���0����fW�kq�fG�6�v��/�*���y�mܹ����4dĻ�x���+�1�����ph&p��
���k���xǬ���r/?�K�v�OҀ���:�l��� �.[q���`���J���l�o��zB�p|�k�n*�/h�wwS��C�~=�,k�a������q�W�@������;�����4�\l�	<��#�)k�a���//�ڲ�� `�x���/k�a�#[/���h@0���҈��xݲB,j@�p<�[T�@�o��9���P��b�.k�A���x�"^@����x��./h����I���.wh@H򹁈�ٌJ���]Ҁ �⓲yo':���]Ҁ���\�<�\��#��*�7�%�4�����xwG��AÈ�x��!���x�e�.s�O��B���hk�v��B��j9dn����0�0����@���4���G,\��ia�#^�_��Ș(k��+�>_�__��_�+�ua��1/z������VY�����"ޤ��ٵj�"��sex�:N���K5�0����@��~��������#^U�Я�+��}Hq�E����P8q�������c^��f�q+��[3E�o��ug��66�vv��O�>s�8E������"�3<�Kӡ�����Q����\�2*Ι3����?�:nU���'�<s�����ݝ�M5��̭Q� ����������ļ'O�>}��Y}vj�)-��ӂS>�5{~��w��34�C�0~m�0��F�	4����q'�����s�N&���ڐ	��[����:^(o�u���A�ʔ7�¼�'e�k/O�$ʞ�'�������ӫ���k{���	4����q+��|��}���u���d!�����T=�k)�l��=e�#}�jNi}2���e����ۦWg�V�,����_�sv���@SݟY��q��,����ƚLx�HCD��^�o+@�c�Ǌ�m�}yz�6�rNiq�
v|�k��ҫ1(�s�9�_�'L���8�ܟY��������{*�f����A�xC�;��My��5m�ݽ=�
�$Q�N��m�V�zA��&�r�pGQ��q�����1q��?�:n��-�O+�%�5	o4����7���Kg��)�ۗ�M�+ݫ.N�E�Ρ��������3\�W�n5���G�ޯ#̐�1q��?�:n�őH>�%�ۗ�mF2Ґ���W�� ś��ʼ=�^���W��)-���,�wNog�J�#��Eq������T�#v������긍Gn@k��x7���B��]�3�<;�]�S:9��}��>����\Ꭲ4���A��!���;44����q'�ق����4�G�]����Ky�y�������5=��Y�t]�+�OOos�[��8���Ǉ3tL�)�Ϭ��Xq�����w#Jx���\��{�)oj^�^yr��Ssњ���<�(V�o�OO�tU(�s�?��f���(SܟY�1��-$�M�K������ޝ�r�U�'�ZJ?sJ����Ŝ����n�
�8�9�?�#L��ض����긍GoAh7.���d�2�mxoS#^i^1Ϋ��1צ��sJ���%i����mNow�r���E�(ޛ�gs����|L���Ϭ��q�&�J��wco�B��uԻ�^�Z��)�N熋s�{�Gn�1��L���I���������MGo"�n,���/x�m�y;ǼR�K���'gzњ���T^�q�o{z;�@A�����0C��Ę���긍�ncIi7��/�tB}��2�Uoý6Mq�(s*/�x����wg��8�p�0+��Ę����MGo�h7
��6qx�m��Vm^�^�Դ4�$j�/��ne4�8�ǻ5�)�G�SٟY�	��m(����\Qⅼx������^?5jd�Z��;_L6��6R�l��Er��aJ�Ǆ�����M�݆�n��5 ^����5�{nfӔ�9��\
N��VF��)��꫇S�?&Ĕ�gV�m�8�&�b�n��a׀C7`�z�u�̅�g����{,�-�Rx ���p�Ncfu���1��5 ^�ū���i��, sg?�Zr$�=�K��D�����M��¯&�D���7�z�!gf�Z62W)γ%G�5���'+�z�gV�m&��x͓.q��m/�!'�$>"�o�e�]}�b�ֵ?�:n�m��x{�2��-��v�|vZ!��"(�]C�P(�̮���+��z��P��B�xW/�wuF�}o0������ǲ�x!+^�~�BV��Y�w �����i��X�E��x%^��"vo��,zo��F�P ^�p�'����+�ێ�ܚ�/��[�x�\Գmċx���B�ѻ��ś����/�E��xg)ވ݋x�B���w�:̕O���"����G�*�-���x�P~�^Gl��6�FU�;e�\~�� 6�P#-���x���EĆxL�N{�����/ �
�����Z4ⵏ\C��u��F/ �k�o�X#��6�RNVm�����ӟ���Y@Q�X#���˒�|��j�����Mr��#�za���0�嶐�y����X��T��}$��[��x�N&^�3�X#��$�����bb~�}�����������"#��!�����醆3o~�����w��~�n#;�>�m�-��x�>��B��Ls��Îx�"�)?��~s��aG��x���,#�/�V�mF/ ^��x��Fb/���2�ˈ7X�>�H��{4����63�1�;Wk�-��>�b��[]q/ �@�;މ9W#�;7�8H��iƙ�a�'��{֝�P��̾k~l��8�=|��8/��ue�q�=l5ŉֽ�bo�����>�9F�D�z���cS�S�p�'>�z��!^��U���PȐӻ�^���8�xkS�i�7����VSo��l��Ͽ�#���Szql���#XO�!q^1m��t��z�j��n"*�"^�P��Ԭ��ӻ����Xe�8�5L6�9e�gZ���8��B|�5Q��˯��̩�c���j��0���c?�v�)��⨬7N�n�\�ڻ�3�F#}�^�6��L�T+��������_�v�)�����c^���WyW����aiiI��|P��$X��Xe�X��&�?�Q/7�gJ���8ј�o'�&�O�����x�A��?X�y/�%^�]�-�>�Gc^+�)�u�9�&^��e���bkޘ��F�P �vP����x�o<�U�]���#^(�bh��]Y�}�a)1o4❓�X��+Ļ�w�M	ۛ������!tg߻M���1o*ަ����>���o38�..*�h#p�cb�Q�W?�g}���z�� �kޥ�$Uh�i#�Ļ�Oʛ}��.�-޵���&��wWi#phF��f���	A�7��ki�+�ۡ����̻���+(v�/6��~�Kx�vi#phG��������&!��~Xe�sio	o�G�+^��F#^]ȫ�/h�v�*�uGD�ۧ��a��XC��L�5Є��Z5Y:Ҡ�5�<�q�ň��5Є Ļ\5Y:� ^�.bBb%�GbW)k�	A�7��w�W&��8t�XCL�kNYMJ��5,ؙ`qyF�+^;�cY�I�E:IP�d�یK�~YMR��5��qu��U���J4�͗5Є`�`Q��[C��<�v��Z�e4!$Z��0sk�2╉B�e4!�x�[� r��~YC|wk�	A���x���_��=�
���n=�x�%�-ޠ�qV���b�����D?�I���s�
:l,��=�&�4��k���x��.iB��m"^@���ψF����[�x̓�/��'/ �)�w��8/�/ ^�� �"^@�p���D��x�v�V�AI�E��x�x����㶐T5@T�]l�w'�ؠ�ْ�lGs#t�xa��Y@�M{*O���-�l�h���5�"޹`z꒹:O�+�M�٬q��{5@V��0��B���zh�1��d0�x��;Y��as�h�F��-\s��K�CP9s�~q�h�
������O���&W��ś^�!^P��X����Bt�U����x{ѕ�O�	!|�k���V����\�*HO��4H�G[M���|�ZȫVP�D��eQâ7�	�o��dN!/MZ�݈��/������&A�E4!8��9����D��wQ���*K(o�E�<�X���"^P�^Ԁx�%����VP�D �yQ�&M�x�*k�>��o�E������MQ���Є��7�ٵ�4h�F[M&K�iBp�*^�]/H��qV���&O���!ԥk4H����˹ܳ�iB(o0e��+ި�tI�+����2k�i"(�h�k*�iB���
���BF������x{�2�-�E��x�./���x�NE���
Ļ�x�ґa��m"^@�td@��W8.�.���"^@��p�R��⍬�7#^־C$�%Q�R��!^@�ܫf �6�����`����d������ݏ�/7��,����<���W�-��w�-�]Li@��xgyk��/�#�]A1�x�NC�=�Y�D&^��
e��k�È<��SO�x!��eW�>�o���"�Y?A��C'��5�Q�WuW�/ �Y��ESƋx�o��7�������x�H�Q�"^�P����'�xf�/D#�\/����;�2�-�<���*��M�m�C�|Y���k�x/x⍧��BD���?�x!+�6��;�����
:k����o�B�xc�]C��x��5�~g� ^@��f-�V\���?P&�`J#s+��i@��x/ag�!^@��/�����E������x!C��E��x)'���3��w��e� ^@���d�e��/w'�B�Fw����W��G�@��ʻ�E&^�+�^_�&^y?^�&T}��EɅԿ\�t��c��s]��j��1/^�r������Gu[H���y���wWg���	^˱���/���Z{?�y����L��Gvָn������x!ۗW��{ʰ�]���>W�>�k9V~����Uw?�y���v�#��"{暪IG��o;@񪲆���MN��g�K����X�q��W�����q̋��N�q9NZ��xYCŻ�x���'lm���<}��Yq����M��3����_�K�������C��4ԡw�B��v�q��O�9s���������Z�/j\����z1�����S�v�6ted 9�#�֪Ly��������gΞէ�����>-8�!_�'xz~��9F�y�Ư"��8&��v�|��D���ɇ��lon�%}Uέ�PM�=1[���I�1΁�m%�f`�Ճ�2��ؒ�=y�ý�j��t��W�|�P-�SḅG~~_{wc���H�x������9 Ż��5+�4��%�hҼ�{{��I�D�S:9��%[�w}��˽���8�t���t�0���UӇޝS���vq�ħ�w��ڄ7:��{�[�x;!��khI�	�&��UW���U�P�|��l$�?�S\'X�nE���G�8�?l�a�c�Ա;C��Cq��Oo	�I��i(����%ލ��,���ʼ}�^�iv�SZ�vc=Æv�s~��ص'�K�eq�����T�cM�;���M!�܀�n��n	�_ȫ�/h�v*�╉�g�yzn{8�tr�	��%}��緹���8O{��3bL����N��@�t��wӄ7|���d��瀸z]��,��Z�&�]7��EkzJ��'�:�����fU�ށ��Pa�q�ݩv�B����|�o�Q�'Se8�x�ª&sS�ԼJ���TW���5=�ř�Q�J�_�����6�P�$�.̰�1!�؝aq:�Q#��B��Ի�$��e8�x�*j(4�R�<;���SZض���9��mT�8Οf���|L�zv��q&�ނ�n|�-,k�9��ZQ�#^i^1Ϋ��1���sJ�Ӹ%iZ���	n�ow�!���̑�7Y�~��1!�;��ǭJ���Ү�щז5 ^P�!>.;c^�^sy��f���<�W2�3�ͯ�9^��8�Cy�a�C��D8��t+�0��m(�F��²�R��5h��U�m:'�F]��SZ��˚%���9����m��q>�;��0C��D�ewF��[=q�&�J��w�o���oPE�y����)M�V�m88��+�v�V�8?��{ㆩG쏉0��T�s��6�8z�v��naY΁������]��>;�����V'�s�����HJ���˓�	3lL�:v��q'��ƒ�n\�-,k�9 �^Q�c^�ކ{q��$Q�d^p�Np "e%G�8EW�?3�J����lwV�=nA�Qi�ڍȻEe8�x;A�טW��=7S^�P��_�2��8�˻�S�?&@M�S���nCi7&�"^�M�ҼF�~n�hd�Z�<_H6��7R��8w�����~=�S��ن�n4�-x�%�-���\�ι'�b�4irN�9���;�������W�t<�~wF��⸛��˻ϻ��9���WMV�^��t)1�O�	>�8�̻�S�?f���N��No'N�$���.q�������'s"g>�H��o��B�%cW8�qͭ����x)kS��c�p�#�)j@�����Bo�X����FҢ�M\�x)kS�[�4�!^so2\9�2��xO����c2�&�/x�ev-T��H�1�(j��5��E���w���c ^SԀx��.k@����`�a���w��v�5P$^��on��W��ě>�׀+^�ɂo�\}���x͓.q���y���77��HCdC��.q8�ˀ��:#�ϭ�']"^(/�k!��
#�@���
Ļ�xC�Oi�]�f�Ⅼx)�U��X�{r���N]��Xó�8�+�!^���ҵ�b���h�o}qܱ�������v4��x�N͹c��s�0R���q�~;����q�M.�\��=��3T:5�o���8�x��Jv�a��S�q�f�Qqbu/�x�[��/<�kԨ8�N5N#m��i�ϔ�[�ǋ�z/�*^�\(d�F�N�I)���t�m�������V%��8�/ �iW���F���g�����1�j�gLC}c��S�q��Jq�MĤ^O�}����ל���"{~�O�z��G�6�8K楝����[y�1��c^�1��dDOH/�ʠ2�z��ǵ��⼣^�;����qf�8*�E��x���ʙP�����W�A=Gˋc�;�8_T��:����q+3I��h̋x!>�*��s��^,--�ӷ������-/�M�gE��7����q+3A���X̋x!:�:�m�B�Gb��#�/d��C׌wEJ�D�;X�y/D(^��eZ��bk^��wz�E���7�"^�T�»++��,5��Խۤ� e9�"^�Q���ʻ-ZR�C�/ �i%�K�ˉw۴�╕���B��U	o��UZR�Ѥ��"�Ix�w;����y�@ ⅘��%��w�����Iy/D(^��v{�8�5)/��;�����i!HYm�2րx!:�.��:��w�W��N�����i	/��Ϊ;րx��>�+�uZR�v�!�A^���W��"�ݠ��o��2���o��mJ�#^Ȉ��x�NI�r���_ߤ� �'yc/���2���S� ���/�W�]9�AY����h�����x��Z��x�N��L��B�����B���sk���j�/ ^���T�=��Q��Ż�x�❡xE5�6-�x{�/�ċx��R��d@��x/ ^��V�����x;�/��K9�7�r�)^Rȋw���⅜x�A����5(oL�jXd���w1ț� ^Ȉ7���;K�k�흽��hAH��\��n��Yڹ��q��>���5-�(��k��ԃfIOF� {�o3$��U�w�BN�<��>KE_�!^�=y=}�OP�]27B��F�`����V5sS�^
̘���5�y�"�ӓO҈�����ě֝#^Pl&��V�G%^ݓ�/�zr���.�+����]�Z���xA����`uW
��UyuY�ݓ�A��-]C����q�ׯ'�2�U�-]C���Q�w��H���~h�9�Z������t�6nY��'V�P�'�Ph�0nY�J��p�k�
���>�l�߳z�����G��)��B����*����Xv<��[�S[�q�G��q?^���c��/��z�~Vq��oW�q���ԧj����<�Ԯ�h�ڟ��6n��n��=sm�ǻ_(;��ĩ-̸q�Dl�\�y��A9W�>d�4�������?]�TG�}=��?��%c��չ?C�xq����S���X��q~F��8��/���)Ù�eW�Ƀs�R�u�/�VO��*����?�x*&�S[�ԧ�t�~Mm
�$q�z^v�]՜��F��Qp<��[�SW�I�31�w��ɛ[;�{��N�9sV+�A���) =f���f���a�|�;/���=����è82�r�T��>�ȣ�>����}T�+H�a�Kr|A�[f��ڟ��,��|��3gN��������X˔���]������v�]ON�]�[/��r���L������Z�/jY�~��Ly���Ѯ��"��	��K�z�W���ꮇ�ĩ�,�xV��uC%�j`,����ݕO���3s��ټ���A�h����:s�23�S1��̩�>�G.�:�^mL�+����)f��~�8gl�q�z7� D�k���oz��%
����bw=to=K�#8�Ϝ-�2M��g1�׹xKR^1ؠ����ӖS�A�eW��!_҇����ũƋ#C��N/y�_L���4w?�(�'��E��]��T�Ҙ��]��7M�﮵�V��Y�w�$M�	o$C��'۔W^�ɮ����s~{�����lK�,�����_,��a$3�S-L6��a~x����b:7[�x�p2�Q��lA|Zy7�r�	oh�MS^�(���ar<�[O������	o��.�Z��-��I_��Y���2@�*�#�Y�>f�˹d�Ȍ��!(�c{���<���n:Y���vT�*�3���ƑH>�%�+��Z�]��k�P�����8���U�
�����UsՕ�z�ύf�?H�t^�`�q瀹�صG�%�iř L&����_�+���9]L���'G'�R�nG(����N�['8�ę�YAwٓe�u�����AJ˚��!_�G,=`�a$3�S9L>�پ�Y��亣9�L3�+��ɴ�N�ݎ�fsǭ��������X�k��v�/��˹H�80=A�A��Yz��F*0�8����v�f�Ү��K����d�8��[��mG/��]7+���V��YIw��C�]Y�e��*ݷ��A���YM0և,=`�6�0�8C¬*rq���� d�b�i���5<ά�'�nA|Cۑ� ��u�V��~�W>+��cue՗�l���$�O;�9f��Q�ũ&����t�߈u�`�ʉ�*7ax�Y�Oq�я���5v�:z+q��,���V�ɲ+��3՗;&۷t��$�KKҴ���#f����fg�0i}4�n����m'�3��)�#��Q�X��+�0�{��z���'Α��qt�1����&��f.�A�Gg%�=d���Hf�jG��?���}�ݟ����Xqf�?Eq:v#r-�?ڑGw�N��q���%Α��N#��]���+���t�V��s��qY�,I�߬��&��T`FqF��q�{{�?~���$/�u�!ձ��j��ћh�~�v�c�]���9³<��Z�+;}y%��S��ARG���3��#7��n�&��a*��zi��@o��I��jF�ћH�q����:ao��gzgyݵbW^L}c�ֽH�::������hf�R�EB�ם�ѷa~ܻn+ά�gx��%ՏC�ȥ�ue��QCo%���t��]��军�;8?K��,8xG̿dHɍ;��(��a����X����ԅO>��8�ڟ*q�&L?�#��]'�+�	�,���V�ʺ/�;���~�J�~�r[͌�����Ty�ȣ��gy�ݙ��T�c���q����z��J��<��讣���˙�md��!�/$�����hfgt�q�;�b�G>�R����`U�ݙ��T��n���X�����н�8Gx�G�]Gv�9wo3�ί�sd�
X~+��Q�Qa��T5}�>����G�8��7\5rwf�?�⸛��#�U$��ZSo%�Q������W��Sz��=3�3,̼�8_^y���Ro���F����Ly���P�sk�oMݵ��J��<�'�!�wn~8�'А6!3�S�� qy3���Ճ��~X�q/\;�ig6�3f���8��'�Ct��{+qj���ř�Z����&�Q�O]­=��0s��+'�:���c�Δ��r�	�8�7�S��w�DB�#<���
ǽ_$��⌸K��W��KKz��$��3:l'j�HQ�9�5f��tW�f�]�3����1��ݛ�:�3l{�-��'�2�-0ޟ��L8�Zi�%k�zN�z��܌�+qj=�O�1��I��#�)oT�����k~���d4} �O��6�we��]�k��ŋ/U��B�� 0��Wx�{,�Y��Ouiw�3o~8�7�]p �+E{W���1e�GyK1}|ƥ�b����d��.�G� 4L�𚔷`�a:�ss�s���w��/��7һ� �t^�`���vɭ�3�P`�ē�u��n�\t�y�����!���SB�x�^Q��l���G����Iy�$�~O��γ����9���e��\4?<�x6� �:	o��	T�Oy����yۯ5������Ƽ�3�n�G���a+�g� �t^9а=�J���)�q���_o�q��]�����M�*�x���������c�=�x)�]���y���o���D����׌)�w�ײ�#��x��M.-��;��=��̃fo�9��x��kg�v&�z~�68��F�o/���1��L��8�Q��޺�li�ޛ�T�qҷn���巔t�>ֻ����vGNb^�[�&�mN���h5m�;�]).��:7��|C��b����Ww�_wn�xE�xgp��3i^�)��O�qgp��J�J��{of�Q��v���ԓ[�VKj�%y���%ٲ-9`ɣ��%�Z2��"dK��p���B�&'!��rՃ ���ޖĔ��n�&�&^����y�9ا^��k����Ӄ��^��9{׮]�N��^{U�Z������N~	GC���>����By�K^2;��ɋB���F�Z'<`Ԣ�׀%��6�yc�U�q[��W5�A��N�m��uf!~����R��Rj�F���,�a~�\�*�6p�[�ɋ�(��1yJ�}:BȈ3R� �r�w |�-m��֊� oE��mlljl��$o����od��6yy*
��ݸݕl���Gpr��wK�&�[����.z�vjܦY��4�7���҉Q��&�*/�^äm(��&./xI�9��BM��+L^p�R�����]��XJ���n�]��0-
����BR|�,t��c����t/}Y������&��zތ�����B��.0w��}vG<��jN�W�M�����_�2�B���]q����
���æG��.�R���r?�m���dr��	�{��;�B�5xʀ��.P������>�C1�Q(��i`	�'>�W�9�L��� �Є!��G	��M�2�	 h�(����)� �.�R�`���c{���z���;�5�sP�7+����k����޽�c�c�jvzNM�'���@���fl¯=����o!�\�?�����}:�z�ӀĴ��
�6���*�x9zx9w[Z���l���nE/n���rs0��B&�f_���"!{�o��S������u`l9�)�"��ǥ�Vx����/�L��Ӑ�ʥ���r��g/'/�x��-�~	��w��������H�Tu�ę�fH�Z�(�������Ir�Z!͜�����5� /3^S܌�sJ���0��;��/�$"E�	�e=�x��o�w�Ws׵zB���-�������yM���~g$c/���.8�!>u�m�'L�7��̕�Bxҙ��I�w6���Ǆ3Wye�O�K��rYlH癝�]L��%x�fX����2���d����K���3��N�SpW�Wp�A]�^a�
WC+� ��@�W�6t:&��Ν�2�c��켷v��r�»vew�D���*x�$�\ar&﵆\&����'�S�M�r�s�����gp'�/�k�oɋ-p��2��h��
f�fy����,������5�]��&o�A�yMM��}�&�����ݛ5$���p[�zÅ@ct��&;d�x4{�Qs��@�B����4)�>��e��Fo�~��DN�<�N���NR�W����-���r��a
\�rQ�[�$�\����p�.�3���x]�xw�Qɼ�m�����2��*��x�2x׆ /������.�l������(x3x�Ct��E)f�6�cq{��R��V��[)9WQ����࿅Bt�b��C_���`�x��|~-������b�����/i�r��d�u����aެI6wE�a����H]�R�V���b|�:����"^��9�t&��o|�$�����<���&3��-�=�O#���C-���-+��$���B���.�rmGG���5*!�o��n����eOp�������f·$/��
�x���Aq�E�T�.6��oLG��������y�.dt`� ��000�V�].�T|� �����:�v`C݆��aV鸪��i}d���WQ*8�A�<��z{{Oo0�|v��F�-m)}�D�!#֊"�{\�p�ы��.^��&n�^k�/�s�o��7�L欩��1)A'G����>[��U�B��z���Z'�QS���̜�LbZ��)?������\�J��̆y�x�^�q�~����D��$>�ჸzU���"T����ʪ�����k�Q�ʰؚ�p,,����a��)��0*��}d\��dH��@s�V6M�rDl�a���E�A�ʱ�l�@��m��}GcC=�7m�7�ZwYaw���RsV�;�}�=|��I�m5
����٫��B��EQhhab��˹��kr7x���2� _��nd�Ʀ�G�q�H��qJʁ=LvBܷ����k�)#�TBF��u�[�����"d'�t-�9�`>�M��^��{z\�a9�x^�����G��jX8>(� ��e�0� x����5����8����wۚ�����+��J7ߵw����v�'��}[z$lzz�{�m+d�M;��_�N��f�9���y����bb�ԇY�Nj0����|N���Y���oD��цv�`C]3��oT��,71:3�Q�}�X��:�4@�Ob�d΋]�x2�o2d'TZd��!�
q�GDF��j����e�m�!<�B����ȝ�")�)�2̧�߄�E�Q�&x� x���������W��n��A�"}����[�����U>ާs� 'o��k�a���c"��Ah���Fxb����������:odb�r��&*d�vAENq�*m���M�o����7lg��{)�x�=��m���?A$�Ћ�#j��mb&�w�7+�7%���K'\�� w�:�^1��,T��L x%wPe�������'��5_��,����bNb��]��A���Fή����n�"�$DaTy�����gl_�!'"g���9犐�"�=L� 7t�T�N���Y��e�9-�B���3b��;��!�YIF�㡓�t�#�b"��� (���=����}�����(x
�����kq�!a�ȩ�ތV���ø��^�i�������7��)�M~�Fl�J��v# jŊ���2��s�ǆ����	���A�`	�:Jɳ���$��C@��Թ�Wz�W�ܲU��>���1��`א�,�\G�[!�+��F��Xlz�y�P3��6x��[��?Q5x�������W��ɧN3:��
��PH��du����㟻ų^�kj
^i�2�<�N_&���
,�-^�XC�i��M칿Qnɟ��7e��Ft�/g��ԯ����=���T��F�hG�o���C�3�2����^�����m���Mޥ���M������2��8�^�Z�M�T���[���$�ދ����]��`����F�O��r�1�S`����J#΅x���l��A�({�I]��H�B��a��'�>�w{6	�����O�
�u�WҺE{V�h��4��Sɋ�K൧5�/������mlRC�RPh�O�	#E�G_S�}e�`Am�w��Bz��u�7D7��ml��:�獞������&��0BY;��JqO�L��������!%���� +�xG?h��^u���ȐM9;&�ٽ{��M+~�U"�@?Z?��
>�&�h�攓׈�+���4y����Z�C$���E�/Q]��VV%C�c%���L����^�iH�z-�&  �r��[�����D񸎐�6v�`��N�Vi&�
��1VCֲU�ە���2ē�H�zt���Q�E�O^��1ѴaB�fu�1��
��B�h�N^�kx�*�~p~{k3s�UX�|ҒF��}M�5�T399����������P^�ސ�e#�+����-�a�Y��}b�\o}U �{�2�����p�_��a�b�Ni�JsZ�������s�rAZ�r������r��Ax���  ���E�n&'/�P��:��k~[+�4�5^ʌHT��N�/qE
[�Nh�NKʵ����<+|x�&x}��[!\Жƶ-Wȕ+�=����o�Y�������]
�?�\Y�����nih�J�׼����i���j͵�\��<�Wj��d�3���T�.*G�w�[��)�Y6)bY�LD�f�&�$x٬]S�'�"C��W����Ą=����1��|+=;��xxU��Jo/j���TުL^f�5���."�^�Q�]��G��7�<������>��K�������7c��"wxO2��s@<�ͺ8D�|>��x�)Ϧ��2y�\o��xW�1��b��Mސsy-�7�ǈ<��+ ֛�;R����57��xy'^��)��D�Ң������@X?_ᗲ�5(�f�T�]���3��j@�I�7j��ULl`sx}/��|읔*3[��憀���� �A�+�W�bq3�f�@��Z!���4'3���L��k�ZH��5�����Y����E�E�7b��lbC��P`��Ґ�%R���ZS�s�v���!:˜}V��7�W���k��L�z���(mG��c����]o^&�7�%��x
{8m�À���
^��������־`��ݰa��M��w��Z�ݷi��6���{niom�+�wh�:Z43�����[^3�e4�y���ψ�f�̶3��ꈘ�){w<9?���<��9H^i�
gC���r���K::::�::�,Y|뭷,Z8f40�W-Z��'����o!$x�̐1����Z|*��&d� ��.�UT�P�Ĺ:b��y�P7	x��5�l 7/���ZB����`~;���G��	g��z��K^;�#��zzW*eq�̺�K�
�P_6Fg��^���.��9o�fr�lP����Z���mj�G��f��S͒a�A�[k�+��d�BU����][�uD�t��T�3���a�ԇ�W9��y�����BD�9�֙�k�zp󶴶	�R�|��T�]�ݖy��e�'�l��x����f�����x�I�U�׽����02�]/����JC��C��.�5WM^�l0���UZİ+�]�n��p������׈M�7x]����9�λ�:�ͫ���a��gz#`�cp:86R�?�\pe�.
M^3�nA���ػ���p� wa&Y�2�jgy�8�Bz��m�R����kqÀ��;���޸x����������h���務(�؍L�jo��0y^�@�&�^�^�����l)��nF�����#��K^�z���˱k:�(���^w�ao`lc_ M\"W�77�EK�V9��� wQHޘ���*��|�\� |���z�]s�#`G/`W����[�|/d�F��X��pF�/�B�NI?����]�\o�gWd���5���#���ٺ�3x�z�qk��ݪ����0|+�1�>���C!�o��Y��Ve�.
��#o�v[��h�]���8�T8�z�;���� 9������3v����B���f#�^(t�&$y����C�zn��~��"/�����(w����aC��E
|��p�}�pd��y�P7�ɫ�+�+p�(@"�!y�ș5��V^��M��ƌ��Ղ��۷�)늿9����\��E���Ȉ�Sya̭��_���FF�3���&w�x�&��I55J�N)x��op��\���,�Z�.
�'/�C/%M�ޗ^~���'_=�@�7qˬ^����+ָM^F^!�݂��k&ޚ0����鋦\��E��+����ћ�d�����wd8�9M�އy7�Z}%�6���2���'�������+�����:�C�n6�����y�l}��������o�膅��������M�^U�^QE��D:q*OI���-����ɫ�K���#��˓s&��������N��_X��ZSk�z�WDW��a����7��E�*�W��{˿�b���|����O�W�o~�"�7'BOC7��!rQ�P��Ig�����2;�ɬ�k15oᥩ���i/
��yȫѻ����R���!V�  �kS�ݫ�sa�5
����ޓ��xu�\�p�o�P��ӓ��K��"�Y��BUE^>����Ǖ�;;FS��`9��'��k��X^
�A�2�x=W���g0� ��5P�.|ӯ��D�����W���I^
�Ku�>�V�ݛ�rZ��k+%�d�zO
6�V9ɷ��
w�.^
e������| '��J�\`���nJ;	�p=Q^�ϺV(��A���x�Fx7/
�j.����
�������PaZ���i��k���J�;�ڻ�=(J��,x?Z�������{Cɚ:�N}%x�7_��4���4xQ(�S+ʂ�B0w)^s��eoF:�&ݪ��S�kP
�2>���W������9�1
��N�˂�#e��_��u���C���2y9y�"(�DT�ܝ���Q(Tuj(��,��^p�&dΗ$L�8	N�5-�2�z�"I��8���$��^�4�P(�o�� ��r㔻fvã􀥰ȸ��7�80p�!�����9x��ഌ?rz``�������|�n�����ۻ��l�5��g8H���G�n�שּׂ��{'�4��U��&(�]��E��Byt�x��n�㬑�R���k'3���#�������s��:�,��p�碗<`�e��m���ܶ�o�);'5��H��Rs����)-�y+��]�q7��E�P-�Q0w��`�F���q��=$E_�˦"�p8Y��$d`y�<:��� �v��obevq���aL���)jl�7��wR\�$UI�r�	('�]�]����B���$���p�����*�Դ;8xGə��v�~� �P��-�-�F)A����X�mt列e@^��Һ�g�.�7m��_r��#7IO��Ɯ�����U+�E�P� =��/E��K-ͥ�@�nB��n�M7���%\dD�J�r��n�殉��(;�h
�\]��&up�!�b�ڽSD�̉$R"�ttLS]��Έ�uI��cև�G�PU�rxw��n�6Z���.ݴ��\�vk�����BT�eL_���-,dZ�Ѹ 5/�&|�W[��)���#��wh����D�f�Kz������H�"wQ(�S�5�Û|�t�l$�I%
�>�2D�'�B.	(/T64$�]j�oڣj��\R�i���S��{tj�d��2�7-�R�Ǯ�3Df},y
U��:�[��[�^�&x��ꦄ覾o'q��2Q[�������=ψ=�P��Y���YZ�x�e��	f.o�Ny�3ЛJI��; )���E�Pn-����W�L�w]�0�+��J���xR��(�>^�g���H�`��ыC����ǻ��O�f&�I;t�2�SU��-v��(*���1Ҿ�ek���w
&	[��n����@��|�����S�/xa/�f�w�x��/%���	���+\��*���؍΁\�(j����M��,撴���n&� �Ԝ�d(Z���s�����t�^����̼���i]>-6��e��[(���?����iż�StM�}��b�\�
�#b��]
��c��/���~������*�$��K�S2O`�+�2&���o����N�x&��B�y1��m1���~����*]R� sy���N~4���ūRL�@�9�Q(�t�\cO,��;�2����Rz��S�(@��,����l�,�Ͷ�-fyx�Ϗ��l�\����b�l��w*'m�hi�����R��Hd��hF�P�^=��,x_w))-Mz
ڶ��b_.�C_z�Z�% ^�x���bc��EB.ʅ
-f襕,Oh��vJȫ�+�[�� m���W{��F��`�M�>��}>-aP�ȁ
�0>��laK���<}y��3X[.�����}|�Mi.����0!W���ֺ��)�R��Z
�T�/�zv��ZYչo&���n7.��I��B��E�0ဌ��_��ɓW��S9/x��}���c?�v���P(З�[�
�ϑk/B��� �fO�(5�dG[>�CKP3����O��\o|�HU��51zC5Wze<���%K�\Wv4/^�)���o�[j�eɒ,}�.Y�r]���h��4��x٣f��A���Y���,���/�t5^;�u^��e��k�����^Q^�����k
�t�����[X0���̝xr�:�]B��(u�h	��z�n�Dැ���-�����葉��e������P�_5K_�&2j�X����^�����y���h_\_�[�@v��\��Z(� o
P~}�`��I�?�c/�$������v�]�l���[�R�~*Ug�������k+�"���Q{�T�ΆY�Nc�nMU�!�X�f[;C~U�Ƴ�@�0We�����p�*����==mFx�έ� \"�[?�-Ͽ��<� �s��Յ�*�m���`�j�^�īk_����oi��Wv��Mx�2D���KJ�Tq�������S��9�,Չ�OZ��֨��9�;��ɟe�q��*���	�	9R�f��v���1��VE�/���ZX^91���N�de�i� �D�'c�/�C�\�ut���t��z�r����^����i��Z,�H.��[��T{�D��_`'G�l ح�!]��l�q�X�|[����6��19Դ����������'��8ym�ɛS����ŷp�>L�o5xr��Į�����h�7�i�d����V���<�y�g6Q/�XZ&"ڙ?2�1�RK��tR�W���n����x���̩'A�k5���w��8�5v�����8����鏼}Em��5i�Z!k-�r/�Ì��y���-�c1��J�������niGH�
;r�;=�5���ٴ׀��
 ��G���v	�-vK�Yw2��5ѹ��L��ݍA_���N����R�����o��@���X���Kv�ٵ�5�&�kv6F�v�����~����H��ne��C����(np�qw�6<wyzOX���m����w-e�k�5H7��r��##��kf��N�v��FFeg(��� =|cBLK�����G�t��T��w��%zLt�6h)��^zV���m�)��U�K�(xwӗ��vm�2��H/d��x8x��یӋ/���7: =��bv�ΝYs65�o��	?�J$��R[����j�h�GG�l����C�T����T�g���p�zɫC��e��zM�tm^y�z�蔣��k����3�����!:&O���i��I���d�gA��$���D��x�U~H� ��T��#��r`�U���t��z0)i�k-�����"� ?<��Z o�h�&�,�T��h�Mm�P�(s�p�����g�<�B�N���\K�*�
�|�y�I��z�����o�Ўyn��R�B�����:Rx:퇯�e��u�-���ry�B��Ty�n4x�L{wA�q;�p���2��&� ��%�~n�}���s�F���,��R��y��#���QEi��"hh
�Doc;�2h��D�
�zD*ũŖj��n�(1�*�
�|2��"=>0�����g�fi���<��>�)� �1��ͬ
Z��p$R� F1�Ϩt׷��")��&�iu��:�?�z(��>�y=I4{%zM�Ww���u�De��성��L%6���dիyϹ��s�>zx�������^!n��7�A�.��t<ް�(9�t	����Q����&���dw*	�/���vH,Z)��t�����~�ty����nX�Z:�;-X���h5Ca�� �3�����`�F�Ef�'ĀN������l�6�֣:%�~_ Ϩ|���ߠȜ(H^�T(�IR�v�L^E^���¯�����I\�*g�4J� �wѧK���fg���x�ȿ\����E���<��N�} J�3*���*xu�bi���:*������K��=C!d����'o:N�1��+b�s�����wA����؉~����F�������8d<���/{�Qx@8�<�j�K��<��%�>��E��$�d�JۺG�_ƳGM���:��7�}8ʍc�W�j��h&r���B��Lrs�����2�V�$x���˄�v\�.pL�������w���^&�g��WY���Qz?r���Y��}�=��+� d���+����`Q�&9����р1h�"�k��EX~^��*C��D�V��C��%M"�R����qG3���ocCiF����c��o�@�8˓����a�D��γ3������"U�XM y��8|��֘��\+C��t�R�f�\��d�k���Zhff�_x}�~��]��hcc2��qn�.�F�x����r�4=�d�#@h��>8������_����x6gԮ2E�����^��-�OC+�
���g=[�Z����ؽ�����oh�&�O�	iX���H��HJ&/є�����ZJY6��q�ި�fG���O�Z�����0�
�7�7�R㬛�8=����Y<,z�o7#�%�I!H��޻�������!�������o1�>*S��o��݊�"fb'�;D<�(��c9Z�!Pv�s�{mM�p9\��g�7"r��n� �\���������Y�h�&��d���$o�9�XԠ��]���g�ӻ|"_;����(
����۫Z3���,n��d����Ug�l�vBQA�n��9���-�~���(ޭ�< ��[َ��x�S81o�F�*S4d5-e&�QD��-#d]*��k�����i��=H��q�FLB�u��<+o�D���Z�����F9��2�ް銨Y��_�(x�G���︈e�Xcm�q��篆K�3rJ^�%��t�Wj���P��_8k 5h��!\�l�W<�WjkY[̶��4�)m/gT��a�԰�vH�5\gt�]cEίU��9	�S"�2�D9�9O�*)/y���36�)@��7(Ř���"6�c�3�M��my�dRլ�����h�
���m�q����EMNL&��5y낲��b�\3�?k0׷P����ƪ��R�O�����<���Ϣ�}~^���s�G㬇3����W���24���WZ��2�I���:��MK��(+J���g�h^���s�c�;'�޹g�|�K��˪k.�|���ߊ�y�:>�#ax��72���=7^��b���e�*��~�@g���!xQ��W&�A���R�Ӽ�߂�d-#?i}&�(U׷_���gn��U�7.�;쟼LTUrO
��,�M�n�	@sK�j��L�P��rd�E�֧� eVYe�(���1L������r>��e-=%�з[���$�����Q	�����ԗ��b����m!���1N� ��	���X."�[��L�zO
O���:W� /#/�.Ƨ/�3
��6z]��f<x|�6Gc�UH��+x�{1�1��55+�L��O���g.كN?ŦA�]#d�^��)B��1^4\UƦ��.P�R�Z�ʇw�6�) ϳI�=,�PU������ń��x6�zU����2�1��9�$x�ǋM�V}��n�FsBL��x6��j l�$d�U}�Ü��*z�;1ftN��At�U�E�%���Z�2��}�_����HD�F���\*2{-߬��8���z�{q���7���J��x��-=đQ$�('{ �'�������:����|ۖ+Q�ҋ�4��t#%��-m���/R`7�-�B���m���(���g�Ͻj0+^��Xk�=Er���2�][�Th���H/�'���N�;!c9�Y6�@F�8%�>�Z/�Ӑk_���'�<��R
�ܻ5F�b9�q��V����6�m;�i���j�ú��v�*�-���ͯ6Jw�m#�M����^VeŢ-�ǫ�f��xN��-r���>]_/��g���lҜ��+�Vs��=z�q�U����Ğ~��bպ���ߜT6�+pO�IZ5x3�C��M̔'(o`22������)Bh�����=%��	P�Q��j�n�J�R��t�d�׶��[h�(��N/x����y\�^����{����'�����������z��������}��y�]���^���@'��e3�9�X [؍A~�+:��e5Hgֱ�¹xY�E��<���c����E�����9؆n��Y��ܨn�"PVDm�9��{���;oEw�ʕ��XZ�%�����۷��!�j6�^���R/�B���h6���G���kTG���;�˂��Qٕ`�Vơ|��-=��+W6�k������iW���o[���?��.������;׬˷��M+�ܻw�"4S����[{X�i����f<�16��"o��Y����S#�9��K��z����)�]�3�0GF3[O�P�k^ԍo9�8l�6A��Ɠ�Hڟ)��x��7��˫uڍ��J��TJ�IC���v;��#|���lTQ o�i����X
LU<	�{൭f_�W�B���'�^��uǄuw8�x,�0vn+z�Wh`��yC:UT��{�o4�� �&_�`ב/_�F3��/~�?|���� �Y�M�Ӿ��ې�bĭ_g6ț�����ݣ}6��Ձ�d�g/jf���[u��I�����������/�7� /w5�'e�ō�3�����ylTh�q�����k�7�.�Y��ƌ3��?u���]�cV�����v$�r���j��0[0��E�t쭝1�aS��i߻y�{��������˝�r}�J޼3�|�	h@ח4X��J��A�;��#�`��߮tr�C^{us=����[}/��R�P&�^sH��� '��˹d�P7%{g��`j��_0��Z�u�>>�- ^p6<8�T_�B�nz�Ϊo��{���LMu��Ar4yM�^w�倧�s�Ks+�sJ��ٙ�S!:M��\O#a~/��8/�Bo&0�4������X;�os�y��ޮ`�Eq�<�T��������������%��#,d��׃�%==�c���w��%�we��x�P�U ��n`�dg�'�_��BU����4�nM�ƻh���{e�w��8�AN���q��ww��H��W4
�{����P�}��V�-�ɛ�iB3.��le�$`N[�|=�z�Th ��� �'�S6$��A���l�3噺�l��l�͞#����7��ArP��w�)�)��O�����H�#���d6B�C�ƣ26�2�A�Wo�zr���-L��8��:&{�k��6�_�w���	U1,$
5Ô_0�n�"y'o°�|f��6��b_��_.��S���P��UusHzs�X1�|~�3�T�N�D�{���k}9��D�^��w����2c��<�dɦҾl8�dv�Ֆr|	w�?%�L���R��jM�pV�t&J8������ًw�ӀB�߷I^_�$�|��I��$J��N�,0l���)�\^�rJ7�-�N����� <͌�����8�g�Uu&k4xQ�YCވE^��u U�r0&�������F��d�M٠�:�7���y�v���n���v߰x�����u&o�Ε`|��2���w&-S����b�l!f��x���5oh|_������������=�m|[��>�w�ӀB�6�z��6>�0����B\ܢn�l рLOe1�q`�~�5=�R��hN�=�LoF�"xQ��B޺�4u�|u�20�-_�����x�������K=�Oz�?��f��Y�P}��E�f/y#A�M�}��ٙ�����5U�������u�S�l���*w�*��;�^{*ڇ�E�fyk]Yꂞ�|	��,pQ!ws����̢A������Q��{���'�s�׍l��v"wQ��I�:�k�<[*�`��:{�jD9C�T�l`S�?U�u8nβ�o�#����B�6��VDW�G�I���H�Љ���{�tz�@���2�A���Z/
5��[�j�̱���l\�J&���Z��m���)�ohV+�o��}�-g7�j2�ĸp��'�
����YcU��m�?Tjv���X�(3�s�Խ ��-�*L�0.f�.��i�W��_���9��� bL���IV_;���u�$\3�9w
j��}/�^�7;䆲�DF TE�r5M�6SJ��+Spb�3��DM��������{��{S_����P�39����.z�'�������������.�_�2�4Y��u�w�P��A �7߷�>����'~N?c%�̌�
v�4�ְCP7�O�)f?�昱)s�Ǆ����B��C���r���f[[���A�P�iЯS�������q��
-�՗�����+u�?`��P���+��׎�?"�?a�����!%�y���CP(T�>H�73�=��C`�ȎO�V2�ʯw`��P(�j�	9�ޕ�!!�=�?ʍ�o����?e��$�
�rj?%Fw���B�`U�⿠6�k�������'�M7���Q�
�j�O����_"���G�j���1kӇ�~�
���NjԮ��ۄ|���ΗH��=���S%
�e�9(ʧ���z�0!�����Z*�>%'�%~���?�V >����7Zg�7ǥ�(Ԅt��/�}�b��������r�X�WJ_�<��Rx�H�|`24�٠��P�pz!���������/�~�V~����%�����4}�Tze�4(x��z6]�p^���3=���f�@�p� �bz!_��fB~�}T^���Y��m%6���yc�!�*qv�N�7/i	�om�NBvz�F��tO���s,ч���,3��Cl��G��r�Rk;�:�-�TC9_���]h��PT�$���{��/�{��=�4)����_]㡆�J�S�^����Z�70�wy��x�<�����O$�:=��l����9_�~萱��ф~��8{����Fm��r��_N��A�e@��R��|�k/����?�55���Ҁ�~ Л��5�Y�9L�*W�<(f�u�H����m/xw7�)�B�g�ߋB�,�Ŗ������U]+�
�{�l|ɗH��͔�T|������$~���(x�ttvv���e�p�s��9BH�'�-]67��rA{������(MG	�l� ޥ���ơ��XI"vG"���t6���s�|-�/�=B�T|8�Zce��� ͞i˭8Ct[�T�_�@I�cH~�����3a�+�Z���2n�i�齱�o�dbƱ��9�q��½��D���RZET(��HH1����n�|s�V�jnk�#���}*Y�`匘��7����Qoo�n��{����4��JG��"��Ԝ	^ɳ@Qr,� ��LA��Y :�qm^r���,H�����.S��@�r	j�.�&ƺh1����&�N���Q�]�0J��^�B���OB>����cB~������r���l�]H�)��8�x#���'K,���%X�w�Tw���g����x�7�Z�W��E���&�is����`m��g=�/���h��Xnn�snDW�l��Y+x�B�X=��6��.�G%���$y���ɋB=E�k�4�![����y����R�7inH|���ƺ_}�+0G�7JUp�vWtP���vړmQ^ˮ�B�]G��.	^x��@x�>���;<�UHd0���h-�O���#H�F"����	*��K���W��1ஸ���9hH^����op;�D������@�<~T���1��#��u�.@�o2�n��#��F�7��o-��^�]^eA{2Mj�^���������b�Pt>�br`��#���uf������|����!������(���
֠v����&�2��3 ahT<�}T�E��U#�G�+5�������,)!G?wR��L�^���k�.
����^J��ށ����n/5|���`"o;00p�~�pooGm��.���fG�T�7e_����"���K�[+���<��(�i����|(�.rL���c|Ћ�V���5v�9b��K���"=W����A6p����G�*6�t���r�7(�������q"�^��60���(TM�[_�6�ǶM��W����]x��W�Qy��g���ѷ�_軒�b�}��~D�.?�$�1|:7·�o�Ϋ}��>�s		^֓�4(*��N��5��M�8��>F�����i�8������L߄4��%��"�T�ČX��$spD���%�������=5E-�7%�������u9p�lB�!8za�C����y#%��#o�a�;~�����
N�:�t��R1&����}������Aj�0�rx0Q@D�p�¾b����|��M�y�U*��=`��aPH��V2��Y�ˁb�Q�Qw�3|"�2ύ̺dF&|b�ߠ����v�9ΰa�;�k6�O)��0�]�F���qk	�%�*��V�R+ �iP*���`�o���?�a�^ ��^����ی~W��9v?��<�`�X��/fe赗٣�7�uF�����${e�{��-]���KF7tt�n�k�.R"���	^e�B_�Q��[��r�Gs� �l��uH>߃u�_���|8$�F�����A`��흥�4!̇�`Rn4zD,��U@{vS�nZ�0H�L���<��,4J����!yQs]��_��4A���^��kjt����3x�c'XJ���;��'�郫M�bp�*l([8.�/�'�v����<	yi��k3�9
�?s�[�Z�o<>d-�}�S�����|������ӗ`�ȧ{���y��݉�%{��p1o���U-�`���:lle&���-�� a�� �����5�����Ճ�S����c�
�?��/��s��7q��,3��E�.��H L1�X|?��%��HN,��ia���c��5.�~m&?Q*��~�s߼�/�����A_�]&���O��X~T�}ܮ]�a{.-D�ͽ�u��9��Ȍ�1Z��0ɜ�s)�E��d~p�r��Q�܌�������-���� `��.d�{��A��"xQs[��.�{G����o�U���u55u���x *���.Rj�>��<ʍ4\n{��[A��>9�LO��nK>O����/�+���f�s%B��w��(��w���KžTZ�����֧��$�4x���!��Ԋ��BN=A˜�f3����K
�q�#�n���+v3�Y��VFa�}"��+���E�eE��h�֯�5�~����W�d���+��h��u�PJ���p�S��d�	�ϛ`�Q�^�W�c/�>��k�8co,zs������;t�G#�=��eP�D����z� ����4����eB���L��T��Zji�rg���d�9e�a�>�<�?�ݛy#�� �9&xWїL�6���n ��0�B��^���G���mSp��3_�ݫ��8% �T�^���:�/�,�W�y¥��S$�����R{��n{���R{�/*7^�ń�P�+���~�y���	aJRN^�@���]�Ȟ)�i���9�����Nx-��:���v{�`5 v��9�D���p%��jd�ӌg���BM��WǏ�R��i��v;%�1��ImX`áLv1�j���x�����"Ns$���dr8�c���q��ej��aJ|J��szV���H����p����e�dV���[�`	�D��k�[b���w=��=�Q�HF��/�^^uaL��#�ٸ�����9m������-��n/�a��"�%�C_j��ٛ*�����2����i��e��	�B/�}�샫�!#`~y[�D'��j%W7�8�W���f�eBJ.�[����'~yu*ڼ��/SK�>KDk�o\��sdUqâ�s��E�����U�:�t�̃�9���b2��f*%J�	�=��Y���C���˗53���Y�
BHx��q�
���y'x���6Aބ�����ս�xw?���NOC��lX�r{rWɵFz�'d^?oJ���O��2pqx��;C��0��5��N�%a�-闏�j�oR�W�J9x��;n��+D�K�о�C�y^��Ǎ���d���5�)�+ꇧ��zq,ޝ��
��&ds��nj3�ǌ���^�!���c�cr>���a�����MB�Q�l!����If�f�����8��
����g��4��Ы]�̰g����;3��j//��\������7x5yzW�9����I�9ڵ�/қ���/^#�n���������=΄b�IMp�߃�8�
� �����}���N��\�k�U��w�/��a�*�
s��!n���ԕ:yQsWc��k�W�j������7�~�Q�v
��_}�� -\�6���\�".�%�å����t_ػ��K�6�W������-����)����jH��͊YY�������b�ɺ<߳nc��b�Z��^^����%N1�^T��{�0s�b-Qœ&xm���e��� /,��wU/j�j!�
W�Ͱ�?�DK�Nf�r���iނ����+[��@ʹ�D��mW�7�ҋ����L��sf��ٻ��qx�B?}u)���>��÷嫨��g��P���Sv����!w��E���s/n-��n��BS�u�ŋ�k�-���[��9ԗM��j*}hx�A��\�yz�=��S灐W��g�T��Jy���fU,�G;�.�f
�fÚ��4���=�Df��
5m�mB��,�
5�ʀ���o���;�A�O��3����=�-�_M�cX(|e}�иRO/�n6�L\�3�*�~�ڵ�S��?H?}6;��8k�Ҕ���`�Ǐ��E�-�!oY�s�� oJ�7�}7� o=�YM��/��D�-�0���� +�tޙ���I���I[,��N����� ��
���W��oR�7)��g���z
��yxټ�l�|���W���^��,�-d�r�2x��[����[�-x��hzQ�����±x�#'�[�����j]z�?z����M^��e��w`7�uX��ɛ�V@/��:�]��&�g������9���^Ԝ,�oY�^~�=���ݽ����zu;o�5��]�zu%C{OO����zV��B��~��NQ��_ڿ��]��L�{�"�3��L~�Dl�ڿo�x�u���)#^����2>{���]=����a�]U+̡�5�v����`��1�LO��v xQsYk�"Y�!�u>%�ǐ]���,2���/�� ,,��0�~FҺ�Mt�,/���`���yBNV�����E�]�+�|���u_#�J�����Rl�F��35�98 ��(J�'sVÌ���}���N�ūɛT�j�Z�k� �Z�Yi���K^��^����CF5g�e��Xc�u��>��x�^�QsJ���N�߮AHK~�&�א���>�m���ނ�n��`�.��Oȏ}������j&A^�-���-�^r�Y��rͰ��u�d����?ْ�����4s=�
{tJ�54t�swF�XA��W�Oy����Ş�^i�
��r��e�h>*m{fص����Q��~O��vr2�Uэc&5}Ӂ�a�p��O�@n�1qH_��Ԉ�/h0���T7K%m�����j�"%��+��w���� ������ c�1��v:��Y�᝙/W�JF}�%3|o]�$�+�1�G��5�^EGפ���s�Bo�9u�Kp���F���6�m6[�A��2���W��{�7h����p���$y]s��O�tN�O	GÌ4x?R*���T~��;vlo�L�f�P�\ǠoR;�~M�f�����]j2�p]`�P�P���g�V��W�n��ݞ�J����]�.
5y�V�B���%^�n�0���� ����O�qx*6��ϋBM�uU���]��u�wr���p�<��N�����P�b�M\���
����r�� <����?0
5\�
7���q����L�,n
��F.�59U�|�~��+����Q��N����'*T}���P3���)3�Ǚ�Z�oQ(�~�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P(
�B�P3U�?�v
endstream
endobj
33 0 obj
<>
stream
x��	�Uř�qɌ+�"�12�ҴJo��F���cPH0�?f�l1qY�$���2�`L��4�$c@����&Q�����u�uΩ[w����~��><ͽ��{��s�{�WU�:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    @*)/��2F���߭2Z�.g�]Ч@��h      t4Y9d�~����_W6�-4��T�;p�X��OӶG�fc��f��^��ryy}��>I��S����ѾW��;��v$�      ãB���1ty��V�֏D5��t8^�9��SCY���T֏�8z      PF�Gxn��j�]Q!益��<*E?T����w:�}U�~�׍��B��j���h�4���     H�j�WI�p�KKk�-�Ц�d�sm4S5hQ#�����Z^!�v���,T	��ʺV�FY���s�?��S
g�Z)�mU��      ��v�>�o����zWT�jp�ZϞ}['��rX�}fc�����p�H�l��j      H:�=�$��_�b���5�DE���W>�s�q�2*"�&a��k���������-�+*RY��G�j     Hcl;R�]^3Խ�,����#���V2H�X>x�z�/b�q�/1����Z���Y?�9G"`<�Zf$����a�M+��/�ie݈ʖ�	-?��D6��N6ctŐ��S!q����8�#������j��G-&�(;ղ�vS�ڳӁ,&�S���#�OX5� ��\���Y��U9LvAwBi.]��Bw�gi�26$���]����F�����\�Z�@.Ja�$5���?3�     ��Qa��/*ǈsu&CY�IWg��
�>:K!Еc��������0�S ߳'Hp��f�o_s�2.�Щu��������ovD�ܷ�9BcԁJX5�I]<t�`�� F�ٜ����      �Htl���t�sz�yf�*���O/v�Y~�aDh�e��(�ЩG?�0­�0�9��9�dh�D�}�&9rE���b�(��V�7��"Ǆ>�oNf�y���OV�>Q�'�UCcY�<n�_:q�gM�`e\���=��  �8��U��%p4   ՠBu���f��n��@i��_�#^�Pa� ���
�����\W�S^֪�ޑ�v#>�A��+j�7G�=zȿ:U#�?B��R+@ŏ��́��C5���p`�F���=m��RQ;����x��fY��f���������B��GG�E����<�Ӊ'&V�e7��]v_��
�X;�$)K������^>��̢�Rr��G�T�2V\9,�I�`  �D�3>  �j�����컇�V�dt�P��N�QRS5D����h��G�����ȯ���A�V�׏rש��������8�,ʍH�l@e	Zѣ����+�6K�	�0�u+&^au
�i�_Y�)//���:�'�Tf��f�a<�e̱�f_���,�Vq"� 2�l75�O[LC�j��Q�ԨJ�cm9�� @{��$��?��@��z9TCAQ�^�Jx�G9�*Z�����x܌U�!��Ha��(=�A�5HcEm"�O�w͢�nD�h:��Y��>�:�C����y��Q�N<�"�׃)`R�>ݧO��0��4���}�*�$�L]�P���"*���S7�+ d�jh���Q�y0=��Z����H/���%�F0�3 �4i�ز� ��n�P���+��W~�B�7�3Jj#���Q�$��/t�˘�A�O�Co�j�'r:�T�[��������C�j�;7#J�$����v�8W�2��|�n���ɲ07)��W=���!c��G���b����Y.[�[Am|T���J���u#*G��G��Y���������θ��Y��6^~QBl����Kb�|��B�w�1����h����7p��/i�C�Q�OAߪ*f���SV8���U���y0[�WZ5����ZAy2���Q0 c5�&��u��}�Ks�G�B�jH"H?��@S!�� ǒ��#����[���H�jhi4�p;f�������%_�Z���dl�(T �j��:�̚���a~����;f"��Z�}�W�5C	���ݪ���*�^��{�j��~�!�!��sn{c~��s��y��W�\�-%j�*��I e%�[a�Q�F��;��/o=8��)�j0�;ĜAl@�B@n���Ҫ��Q֒E��V�|BQ3)B����� �\5D��P��~�KKc�V�j������l�fL���hѥM5t:���>��@"m�DUC���D��j  T����2��h	��_+V-��odf�u�����	4_<�!I�0�fxpF$	iu~��L�:DfG�}��7�u09!8����Pǭ�e���v�HV����|�nn�9�Qe�.}��М�3l��n�P5:7$yf����j]r�����N�zg_	4�t�w��f�ٳ��y��S �Y�����'�����\�>���.\5��Wv�u��H�G�e�
��_5�B8J5��sf\1���}�]�Q5�{�V��e��3�j\��vx�	�E׮�pn��Y*7�v��j0�Uf�U�&���V'Y�;Ł��Ā��ܸe[�U�٨����o�{�����֏Q:�xbE��@t��;�Jx��0��}{��v)r�){�n�#�_]�7�1GE��}�eH��6;eسH��j0O�5���`&<�)x�dy��?ۯ�YgU4�ʉ'Z[�B�)h��e�(�6 �ê��f�Nc��~>ܾ�PC�U����T�1=��&3l5�D�C0op���c�&���;���^	���텹1�l�t��0(1&��Wrv20<s&bފ��`��V��.]�����<�  ��<.M��CCs���7�{��L�0߯mE�t��Yw��{�j(����|�]�z^�e�V��h����2f���e��X��QJ������3�@�'���z��6R��ƜqFY�]�y#���߲~��s�Ӟu���oUW ��Pm_�{�����)2�x��j�_�֪!����/�c������N;˼��j(�;pO�;���-F�x<�����(#��^��O�G�گ>hf�/��8�X���.�)_����S�c�.n�)�j�ƈМU18�� @6�����(o��\�xb0��l�~>P8pH����N�S#�9{�:)b�CӮ$��}6"b��z�Q3a�8������u�:�
ǊQ_n&�Ǔ��)��'��e.l������-�z�-{;�'�6'=o>/�߾�O�Yt+�f��Z�k��)C��}�}��m���+��	�G�`>��R��3�9�Ec{�� c@�7�Ԫs���:昐g�QE�[��7�8h�b��-���^���]�uچ����[�
���G���=�C[z��ݒ4�MXc��+�+�U��'D�����܀Ї/  �Ϊl]���N����������Ơy�D��'�F�Q�x���"��K��ܭ�Ш�x��#��U<ۺ��s
NS�X>!�f��:4ע�aWy�Q���fb��\Qr,j�(��lEt�5ָ�F5��a�4�7�& @���Й�
+[}cɄ6Uf��'���Sy�P1U����~%g��B�A}�����h��W5X&A�͜�T�����G@ن^��8��Zuxt�Hx/J��Q�F�V�R%�;�טg9t�~�3�FƮ"����������/�u�i*��Fʹ��>���6�Y���`ap�����۷Pש�Z�  �Tf*W���Y�g����v�kݧ����f�WPP��4I�P��{�:D���̀7J5X��}\��Ⱦ0�Ĥbϋ�O�bǞ#�U2Ɉ�U�9����G��,�V��9��e*�}��kř�<��2�;�Ĝ  �TC���ͫ���P�����^
U�ĉ�-����඙�g��jH��V�N9%�PI628յ���^��KZ���`�d����ژ����5Ti�(S͏�@��$,���Z$BE��ME��ҚaV�g`z��,M �Q��\���=�����}�U�nd�4'jb�cd\`��f�g�Im����p~����]�[5�KƎ蝪��*i-��qJ�bn�φ�P5�_j�w:�8���[8�f�[V���,f���yL��)�� t�`L]]q�L�jh�b�P��j�k+����	9��a�{�4��f�9��9�x�lv�Α�w���G����^�v�Y�X�Fla�`�W���nK�9�e,��f��ի_��i~ѹ��P�̙�\�7 �
ՠ�A�s"G���9.���@����0�x�j���v�L\��7gw*T�X=?���TC�qo5�/�XI����jp���T5�<�Қ��~p}W�.�ό<U�c���s(s�s8Pk� ��E���jW.�w���A�˫oQ�����\�@��*+�S�|�*A��fXy�<ԣ�G�����Տ~�:"߬&��?t�YR=T�h��~�s|�Abl��G�+9[�DYF�5�ȂҪ��P�8jS�MOb^��*�ny�߼���Q�רՕo�m+�)�8t́����f�z�4S�kG��f����Z⨣�WԩR�'=���B�U���̎������Y/����V��&=��lw���YJ�T�}=/b=� �ՠ�)���+F�M��=��Z��W���)T�ԂР�o�B��Ř���0��!�i��nb��G��^��hB���,z��Z5���\�Ŭ"�7�|���^��WT+�4E��VeF��@R   ,25&��@:xC��1� @���Tq�igI��QfDdf�[?ѯ�*a�ЩU���U�KSJ�K�&�:��ly�q����,9���?��Ț:�<��	�}�:u' �Ł�	u� �ܠw~�8Te��1)� @5$D`=(�g�E��c����s�c������Hs���={��DM0s���9�3��Ҧ��<)�N9%t�"c+u�s�t�`B5υ�W�! :&%UC�s�sg��W��T ��w�s��橈��~�3�w���q���~B�1UCh?���o�xUCTS��u[E?do[#9��3,d��{���,��9ޗ�XdfAR%���ε   W1��N�د�l�Q�� �  ������j.�֘���e�^�Z�l�����Vxk�=tB���[�G���g8v�Upmt�L�j�]	$���J̦KjUÀ8o|)Q�@���=8��|�y��S�J�>�Lc��3�(�
 �1���hZp��}�ZϽU�� �  ���~�����9*�O�߻w����
�c[+���0��a�H}�5�`|����Р��xPI��>}�4����hq���M^5�.iV�:w��4Jo�fi��E��Q���t1�� ��@��|ƜI3r�K T ��13�C�{�z��f����@�l̅-˄�%Թ�^���q��sx��؀����"�Й��cZF9˟(z��g�5�@+���t
����%T��9z�T��\ƚ��W5�}���ҳyP ���/:'W�d� � @50���K?�QX^#A\�����s_�|v,��򲖬��f6?
�mm��D|�V���e�҈(�XR���'��m�Y��S����^!z��
���[���<ϑ	}T��_�yzn��4���!͹���e���Vf��rUR5���Gwj���G5�V��5y��O�y�N8��  tj�pP-"ռ���m𨗣� �ê�S`���\A���XϾ�V������?]�:Uޒ�a��
G]�\]�Usۂ�n��
�f���h�H��J,�1���b��SO��R�ε>R�v9T����GQ�f�%rb     Ր�(N���z�o=j�ϔ�eE~iT�(�]�g�"J5���G`�s\�"j�h�l��]O>�̾��:�Bǫb$����%�Uj���jP��vxX��Q�����j�'��m��t�j0��WXŵ     :,E��+?�8U�)����*���#���YXVQ� a�9��k���>�ˎ�;w�w��T�ߵ���g>#益{�
�k��ߘyn�N9�g��2n��s3�cM����;B�wꩧ�Q�^Q_"FJ��>ݧO\eC�پ��PJ
�9/%UC�տ�J%3�uT��%�S�5��%���3D�/������1>�9      �jN���1:%��c���%g3p      d7:������9�h��=9       ���g"�������b8      ��^����Q�ӄ���)��!�      ����.��t�1��<�c:u�     ��s��h�3��)8���8,      ��T�^�u#�+�:{,Ǥ�N����C>                                                                                                                                   d��.8n4����    �j�5N��q��r�P     ������q#��QIs����>    ��  +��    �  @5     �  P    �jH?�� r*� 2���q�ub`�� ;U�?��0:�a�" � Bf��Ǎ��qJu��V�\�����������D���!����믿�*����@5 �nA5p��8n7�,U����v��u��#2���^x!����%�;�oE�U����{���� @���qk��Ɣ��t7�҆�T�H�{�I`��T5gA�+���xk����'���j�.� ��)  �����/����j��5�H�v����q��4T��UC�Z`V@���@K  �   40 ����GG:yyy��#*K5Ĵ\4�M+�V�����/N�"X�!f]�$� @5   �@�`�2���?t�#��ߣ�G41��е�o߮���0�h�� �P��w�X]�Zš� P  @2�=^#K5��oK,�Ҽ��[�OM�`ko��6��\�j����Z�h��`�������}���  �  h`@����JX��o���t>�_ZX�z��i������.Z���?��ڶm��8>��C	�t��:V���K�qHyE�eo�����*�{��U�`�̙�VyV���j����Jql߾}��ŵ��z�+��B�7�- T  ���vo�����a�C-�۶m�6mZ�������6Wojjҿ+a�V=�Pԃ].#�`���FU�:>���~�����3gZ���i���3τ�%�cǎm������bIK P  @�]5D�Wf�3nܸ�z��L��¢�S���.Z�����P�Pӂ�cQV��H#�J���j0��ՉYty�A��̙3���_ӤI	URk�b�%w�}���|�5D�u៙
- T  ����o���+K5��IT�e=~ݳg��P���A��k����os���F����Tvl�iE0U�_<�j�U�kjj���?�O�o�T1?�P}���d��իW�O�oߞ�m��?i3p� �   40 gT��$���HGB��~X���#�w�>�AVCC����{̸,��X�~z�Ȩ���	$_ƍ�K�O-صk�i�򜟟o�����G���O?�W�뮻��.V���w�:Յ;No��*�@K  �   40 ��QOr���z���x�4��,X��~�34kll��n!k�C�c�-*�V���$U��`-�%����S�L���;��+j}a�:�ܦM�f�y�	���x�- T  ���LSQOru c>T������%h�83
��~^}�U��o~���8kÆzkbA�G=�Ѕ-` Ɋ �.^�p�Dr�;�"h� �ꊠ��"�ꦱp�B���d�^�5k�Ԃ�}�{7n����v6�aHR$<���|� {�  �d�j�z�k�o���߹�;���$K5��'?���9�i�Ԃ�����m:�2;��	/ԎȧW\q����H�"h�p�k��|��SOE�;w�9S5�Z`�y�uי�@W�ޣ��U��=��m�����������9�p���  ��Y�p<ɵ�+�z��'� J�D[�Ms�-[��e�o�M3�ҡ���nFX/�����t��@��|EЪAj�Yz�h�f!�Z�;�.�ߔ?�j�����j���|���U����رc��ŪF�s�=�Ά9�����ζ ۷o뭷����  �  h`@����'������Պ�|���F�´7�xC/��+��7��w�pf��KvA�3k֬_|Q�͸�|EЪAB~GE��Q��\��?��^F�y���[�k�7]C�t�z�TեB��=�ܣk�i���m�W��6m�5�lF��3�$0�%- T  ����U�In���xeYz/�x���^~�e����ߔ�5�MY�jж!//�^�}پ}����dE�r�C~���!�`!��Lx�w��Z�*����������j:Z5u�̙3?���755��T��9��&��d�`نБ`s��s�T  ���P�'��jp�W��B�Jֺn� aW0w����Ǌ�헏T e��6C��~p�LOEЪ!��1�����j�̛���Z4�_/���Nu��ԧ�-ʮK��1����
½P  @rR5XC�%a	z/��X}��ʕ+�ݺu�h?�7o��.+ȲT�iT�m�6�i[̀��L��gUK5��d�jx��Bג
�k�~��nӿZ�`jzMk��RL�:U�9s��A�G��d�m�ƃͽ�n���  h`@��B�J��?ď�#����A�������[UV�ev~��X��!4i#��IۃvH�]�v͟?���>�ē�v�֧�i_�җ�����wQ!J5|�.�BUUU�2ݺuS���?��#�Gd�=��_Z��EvM���?���fr�:V�Ze	�{��{�  �t@��x�k.c��7��M���
�?���tӦM�G�֪��	m�j���7#,m���Lՠc��v�
)�\QRf����>}N�t�!�:|q�QcǞw�-��ٳǡ���j��ؚk��V��������/[�L������U�9��rU)�kjjd���F��!��}����kcCCC�6$S�i	 M  @5 �t���$�:ߏ�n�IYz/�C��.�l�ʕ�6m��/~1w�\�$���ʌ������j0#,m�jH�qg�z��%^�Б��6l0���0�W�jЯ#��!aK�wo���'?��a���3����¢�.��K.�tذ��{\P8t�r��͛-�˖-��;vh�fq��ך��T�G0��Tj��?Ȗ?��S�S�C���Έ0��Hl`��|?V'�e���  h` �!�j�hk�޽L�9�s]v�e�3hLՠFo�",�jP�AwB����0$���s��A�����n��~����_�������5ϯ�;v���#G�:�Oi���Ϟ��/�V5H�޸q�{S8H��;w�Y|T�9E�R�6��ϟ�R��ySA�eBwJjV2f .>�ó'��<�3��{�  �d�j�x_�$B�SN�8�T�	����#�����?�
4B�ZS�,��z8<�����m�v��wO�6���[o�t�6�>N�<YK�A��֬Y#%<fE���?gΜ�D��p�q��{｡�?p�T�F��T�1kAhE�͔)S�gx��7M�`�E�Rs��[��aZ����u���Av-�m�% �j  @5 �E{�_5$i�!��ë`b�V1�wxK2ȗ�^�Z�|�dd������A��{�WVV�=���ղ�qU���ח����n�!�xچ�7���jAT]��A�x��7�o=�䓦^0�?T5�w�y�1�;���K~MMM.��}�j   ���a�Ν���3g��8q������,�ڃ�a��!4Ј^g������~��655mka���ĆP�`J������Rf���^x��q*rc@7ӧOמ�߸6.�;��/Ѷ�Îx����QY�H�Pՠ��1c��R��+�X�;������Np"Z�<3�o�B�-��5q����9�a���  h`@v��8���o��}Z��GqԘ1co���]�v�����x�Vf���Ș#KD��gP������A�y��I s�6���{��Uy�K.��ǹU���ׯ?��#U�P��Q��-L�`ݞ� tJ�?�Fo�����,B�@P��t�6�m!^����?$,-�i  ��=/6l(-���Ϛ�o�̙��N����p�W�>��<���SO�`bn��G0�A�Y������,���CA~��=��x����D�M7ݴ߿)�Ǫ���������o���-�����>���Q�a�ر�;�2�A2�6@��aP �  T@j��f����¢/|�	.:tXԬ+e�j����y(S੠�r��aժUY]~L��dو�E����TìY��K��	��8�(U��/�|�3�BwgU��>�U���}�Ċ����gc7
�}�j   ���V���M��������׮]+-y3�V�+�w�}֬�|𑮏s�{�y�f+�	�p�%�PA��E�HG�����0������w!9�n�3���nW����ٲe��jp�})Hw�}�������1{I�w�����U#�!͍ћd���V*�o����dx�����[�n5� Yg���  h`@&����=����}�o>ϕf��7�5�_�s�>��硭C2=C\��i�޽;���q�����rI\p��-_�<8V^��?�)��E���/�ܧjD%��A�ҙg��j�u�]g�^�H��(~<�Bhu�C����j��A�ϐ�P�Q��=�dT��di7
�}�j   ����Y�<�� �׿��5�j�;7>�T�0X��JiU*��A��N0��3YX���t?�v�QB���1RCC�ý�mX�~�.�6m�W1+¤I_R�����,>���Nkµ�A���$�C5���TC���&6X)J2��B�Aۆ�Jl��mל��@c  � �L����=�d	[Y���a��9�C��,ðgϞ��s�3o޼��~�JiF�f��+s^���g��_NF�����ې�̕+W��~�]<�³"�x㍪���W`���sH�dn��!�{��Cgv��(��aB8BS�jX�t���t?7��[n���[��ow��W_U�1K���  @K2�m���/�y�di�`����<��O6�C,X����z���A�v�ZO�`y��:�C~"�c�)>L1���w�y��)�m����Ui?�����xV������sLU0��!��W-пu���i͓O>Ll����xU�[2�[2�`z� �}��,/k���K��ٲe��n��!X�i  �	  @5 m��p���<7�6������f��v>����ěo���y��=�ف"H�g��U�Hʿ�z2n�1)��jж!�QoVۆ믿^�����k�T��zH�O}�_�` QU �@
�?b!M�81��>���Ć`J�"T5�{�d�s�"���PZ8h� W�����+AՐE��� �   �4 �1g�>�Y�p�����/f��<�����37�t��ܞA}du�л�<3��#��#�ĥ�)S��)p�_Yg����?`@y��QZ&<�ׁH�(�*�d�Y�I�&E�ֹs���)QY>�!��@���>�jx� h^x�Pՠ�p�&6p�T  �Ҁl����m��{����ׯA1��;�
�
��o����q��͛��:��Ҡ�E�l����>H)����H�o�����ީ �,]�T����^�z9wE��;T�?��O�Ø$Y��k��g�̙�U�;����=C\C��'6�UC�6����_~Y�@V'6� T  к��jx�����8l�g��_��pc��]!�b!^ϠU����~���<:J5�>�z��TC�ن�n-e��Ï�k�cV�o�۪��Z�b:�T�y?�߄�t�5G�4b��(��#b
��m�هB[�P۠�ٰaC�j�Jl@5 M  @5 �x��/f�e	�/}i߬#F�����s�$U�-��;w��J5�z���HZk�3;�ޏ�{�Pɐ�j��.��Yt�|���t���O�pbC�"\x�xU�����<�*��bւ�	7'�<�*�A�2S5X�������`>�|aڮ����6���͛7˦fu
�j   Z�Q큸f��
�B���2*�*(8�� Q�bvo�,V^^�s�n����|�(��Ҡb4�j�FKH�m��gІAO��j���;�!Xvن��A�����G�(%�A��.]�S�^W0��_;$V�_�Щe�˕��5Xḙ���T�#���tb����i  ��=�xg�s�+<�я~�g��
����;����h�w��};M�;J�C5�̘����)A� �֘1c�W9`�}�Y�����<��C+�̙3�%;w����t����/�X��,"t�U2ݪ��u"ͪ�g���9�+��M�d�s��D@5   �Ȅ�@���3@�px����QN���oQ�m�u�Y�-����ڵ+(�.���{�z��jH�@Q���I��4��3�T��K_�r�[�`۶m�v�*�'N��[L�d-�Y�MdI�׆5E0�!ՠ�ah/�5�C5��C�j �  �j ��$6럏phyo����+.���穮~�%��4ܽ'$N�Tnɐ�4�A�����;����2jyY1�{�wܑ=�Mx�U�9�S���/�]��W��3ϒ#���
�d�$`؄뮻n�;w�-�ܢN���Hl�TQ�'Ҭ��S5�Ć�.���   �. �	��jL�p�w�Y�B.O�`-/�͓O>y�m�-\�����~cc�o�!߿{�n��L���.�-Ԫ!����jpx��!�6X�>���m�Tٞ�P_�*���l�����M�6̜9K���>�����(��)�~L�h�5���o�o�}7|�T�c���UQ������������C�޽{�r�)>�K�O���Ċ)񪆄%��m�T��^�6����o�=��-~��_�:��>�/Y�`A�7����#G��}�/���ܹs/����ꊊ�s�9���/���;�z�-ϠK�)7܉fIK@5��q���'i�sL�m��a�ƍ��jP���� 4-   � ��If�?�p?�*����pG�Q��t����sL2G��믿�	%��
�Ȑ�T�S5=CP |Fjm�#�\�ePYj�T{l��WO
9�_>EנSO���+���}�rxW�Xq�gD�:ȳ
����#��E��P]��n�5'�%��ßFur����{"�  ��dH{ �Y����4���w�u�g�D�g�ȑ��_����&؍�G5H��Pn�ot�%����ubC�j��g��A�{�9m>���ں��O�˱ʎ;n���}�T�.��"9&Q�-�*��o4(�b�UW��t�jMlH�j�Yz�z!�b��jȁ�!�'�  h]@�����/�u]^�v�J,�6��Vª��m�9&�[5��i+->�AEj�uo��6�3��Rhjj:��O�Z�^}���u�]rւ��k�9�OYˏ�����W[�?��	'����R�n�>)Q>��w��6@�6�
�6�U��>��v5  к����$g��ؾ}����pҤ/�3Q���/:v� od�_��W>�h��fP�c{�jpx���jv�Љ��!f �]�A��'?����_p�QG[�@���_?���TUU]R2�[���%�u��}�+����롿�ϖ-[�t��sB�%��_�z�H����W��!fψxy� T8�ߨ T  к���R2�j�뇨o;���8O,�jllLF/�|��_��x����CUCpʉР,m�%؍"j*
�jЉ�ۇbǎ�_}�>�Y���N_�h�9����z�C)��1�t���)3g��ڵ������ˠAU?��t������N;-%�m޼y�_����^���`G��q��$Q�A��j�|��=P  @�2�=��Y��Y���o-����JN���|�����>�$�����7�jp?�M�j�9�ep�e˖����Ǿ[�n=�H;��K��o��f=>CSSSaaq�d8�#�͛�˕�����ׂ��3ֳ��̜9���g��-.�`���j���G5�@5 M   Z�RB*g�ky�5:�y��W>�����s���޽{����SQөb��P>��er,&[x�w�ۿ���3������x�����`׮]�=���ŋ%��������{��֭����~zҤ/u�z���^x�4�-�Bҹs��K~�g�mw
���W� ���	��,��{"� ��?�/к��h�vֿ-[�$�%3f�8(���'�[F
UC�.�iV�py�g���7�|��I�2��g�}6�?!g���d��_��.]�|�?����l�����P�:{EzTC�6(P ��T
X@5@ηR>�_b�"v�ܙ��!�ԖVL�93`��;f�0U�5�eV�b��կt=��#���m�sW]�u�sEE%�k:4%�~���m�̂��UC�m@5 � �N,|�4��u��h�Y�����


.k�_�~�1��ի�W5$3'�cZ@�)��?^Ր]#C�1B�����y䑶�99 �ƍӕ����Y���-ƇrH���?�p�b?eʔLP�L���`�G5 � �q��7��u��H�>C����[�G�\�򨣎�s-]�4�T��d����ϯ�TV��U�֭Ӆs�����Q9>g��Xb9��|�G�t�MJ��^�fM�޽c�s�=7��m���t�_|�ET ��S/����Ƥ�?p�����=Ў�������<	~���\�2f̕@\���1�L�0�+���TC�NB�}m� �''�rw�q��O<�{�ݻw[���C}�駭��,Ǵ����Q��!Xh͂g�ҨAB�6x�������*�� �j H�-��O)�h�u��ȨY�L�4�`������1�ڵk3S5D���5	����\�����~�}���?O���)���jA��E�c"q�Uz'N���5k�ž��&���ݵ��3�AL�`i��6m�d��`�F5 M�6q�����oɑ��H@;P*����=���Y��%�>��O�5�`2�����O^58<�C�V8$�2-{��gU!��?'���f�]֯_�XR��5JɪU���{܆�/���U�Ut�A��P�y>� T`B���X��={�455���kk׮]n0Ώ��U�{�Z��Ex��к��nd��֔���w��,((p\uuu	ߒҩ�VZ|���o.��ɓ/S%����]6����i�;�ý�5�ʺu뢖�޽���ϛ7/CTChJC�g��K5(ې�j�lC�jP� �j�n�VaϞ=6lX�|�4qǍWSS���������rJD��>�� �. ��̟�O�>X�M={���=���fx%G�
�~����j��XV���rI5�r��T����e*+��1c�{IY�,�QjB��!��P;g�jp�4����j0�ġe� 4- �Z2��3~�{�S�NM�UH@A,\�P%B��+�<���u�jdŬ�G�6C����ں�I�ѿG�u��Jd��j��|TCP8�w�K58�CΨ��}�_�$�l�m�җ��6`��/��|��W�2\^^zo��&G�?��3S[�P��nհ7��;?dɗ^z	� �j��)|����-H �u57??_�\e>D��к��kdŬ���ۏ<�H3��ٳ�w��[�?��oɒ%�ܧ�N5iw�`��GΨ��[��/�k�lÌ3�\��d���G8J�#y#��!sʶ� �j���:m�aؽ{wccc�s�ܢ��f�6l��rL��9P�P@{ &Y1�⮻�:(QF���U1��!�m�2-�%հq�F]����vنo}�[j<;�V^^.�gݺu�V��8q⡇�(�g�}��ȣP ��B.)�$��%ohh�����ZvSvVvYg;�8�к�=Y1�����mI��-]��ꫯ5jTeeeqqquu����n���Գi�\58l��4��X�L�9�^y��.�|J���׿�u��}�TUU��d�֭�o~�k�,R�ۀj @5t��I�9��S2D�l��*ƍ���(��`���s�����@�l���
����n&L� a��%�sӦM+***l���ֿBuu��y�����!h��_wl7�����Ţ��7�-wl��j��pL�s��I|���;�����8s�,s�������& َ;�*��B��j�� TC���O2����1	�1�hZn˗/� 9���Ԙ�!4��Б��@���?Y4럕�0z�hsN� �iEEŪU���
��CM�:��������������S��0j�~k�<�j�٘�D�,U��.��pB��`~T���n��ָV�K��~�鯾��g�,WU��CC5 ��H/�D��h?R%�9\1��J��k�I���*HAA��V����$�`4g��f��=�g�V�ܽ{��8�F%9 Hf � 1ɢY��H4�t�ҡC���:�:�Ê���ۂq�\��O�Lc8��s���ŋ/X�`Μ9�'O.--��)))�K}TCp��x=��6$�4�}���۲7��P\\���3������v�]���o>��#��t�!.L�{�dsK�Ν;Ϛ5+����TC�*�j @5d�^HR)�=-$� R5�O_	%R8I��
+V�X�n��FH!�s��ӲW^y�lI[����9hV�
��h�$�f�s#���ݻ%����|��	&�\����ɓ'���?�x<��܌�H0X__�W)--]�t��iP���g�0J5�ޛS�=b�H3͠�b�Ę�����o���{�_9��2��ꫯΘ1������ӆ���:t��>� �&nzTCT�j�(�f�J̡� P��1U��ڌ�-D
̓�dH~F����ٳg�Y�Fb��,Z�?(� [��Z���Lr�)����m����/a�z��/|A�(TTT���?�\����L������~��Hi� hP��;q�$�6v����weR����&\b~Ϟ�.'"�C���ݻ���5wӬ|�v�r����@� T �!����U� r�jjj��z�ڵ�[X�p�8��(0W�֑�Z�@�Z��ED��C��
J�K&#���,Y"�E��+V�HI����<9�1�����Y8�_�H�{C�=z˖-qEs���ת���l�֭m����[5�#1�5Fn��=��s�]L!p�i����QJ�;�m�v�_�ڵ���UU5�v����o[���<��4��N��� ��^��S/�r{���$ޗp�ԩ�9�"Ѩl�l�l�ڵk�
"�y�k�I��rŖ�]wݕ�^HT>{��u��e�^p ��5k�\y��h9��Бn��u � �����%��իu'�ɓ'G=��8bٲe�G�4hТE��j��}�ٚ��%C�ݳgO�������7s^5rBg̘�o��i�ȫ��d�ܹ?���|ƍ���G��$�����ӫWo)]x,ՠ�jɫwYr�S8(�`�W/��g@5 �2�0��BP,lذA[�l)3�?,\�P�@�e��!����k[�n�׺(Ð򮔙�o��dɒ����Ok�\PС� Y:�_\�Un�ȑ*'a���Qϩ����?_�3f�ĉe�����_�l0���?ֹ~�n��6��9�)$����e��:��9rԢE��v��ŝ;w>����_��f�׬Y���ư�j����TC����d�Q%*E� �jH�dHX/�޽{�ڵ��C.����������F��&�Å��a�K,�k{Ə�AC�ӭY�&1琗�'�S�-�m@5 m����Y���pX�"TTT����Q�M�2���P�J.�S���wee�a�6lؠ�rٜ1c����������#�A��}��7v�y��/Q�@M!���z}�ӟ��W�<��S�k۷o_�t��W_=j�()�������_|�7����X�u�T�Oq��+z�g�� TC;�(��0\�|��q�$��%J�<�.�޽;�1'�4%��-w����<sD�9���}�B����m�,����/���U���_��\We+�Bn�r�*))ٰa�n0�-l���*��M��L�j� J5h���{��~�˓O<�NN�`�9�S�W]u�#�<�9<ׯ_?mڴ����L��_AJ�ܹs%�oS��6���t�zIπj @5�S2xK/Hs(��0f�v�:u�ڵk�������W%�B����Ƴ�D���W�X�cC1��9,Y�$���/_Nz�h�^R�t�?7+W���Ժu����kkk��h��j�*Y��/��t�a֬Y�����6�ԅ�3g�E7ؽ��~�������Q�C=$m�����~TWWϛ7�����TC���"1πj @5d�a�^hll��4�*�Y����e?� ꧞z�'���4�Ǐoz�u��6��6@����%�\��#F8�)���cǎ��"�у>8`���.�L�u�|���w�j����L��n۶����#�<r���?��3/��o�);��m��ӧ��=��k��f���,�3g��ɓKKK�eJJJV�^��|l�)L�`���t�πj�U ��v�1G,�Xl��;O�����CAAA{mjuuucc�\�M�����'����%K� ��7��yyy�T6��L�j � �\��O"gIT�Xr�ڵ�̕W^z�����/_2q�D�Z�R�	��N5�G̳�|+sZ@k��@����D���W_�;G�%%%���wv��l0��{��.���?EYY��~��4�����"1πj @5�S2��aPr`���+Zxc?)���w���^�h��ה)S��y���ٌ���b�FړR�<��]w���L�m@5@�m�̬,���{ν�9sd����?�c	��O<�'NL�j�kX���a0=�R�z�z���9��\s�.������͓��h6���nݺI�&����|���TCb��m
�#s��ǈP?��j6�h ͌%<��!���3*3A�|�2�9�\He�$8M���y���K#Gݛ^��nݺ�W�-�y�������Fu��6��#�r`ֿ'�|R?ҕ8Ž�\��N�*K~�{�~4b��	IT��nH�j���9J^�m�<�cN��|ؚT��,
�r��~���7��ѣ�l���[�r�n��&��PVV���/UC�Qw��'��!�PϐXJ�|���Ӄe{ǎ� T��d�1ȥc�ڵ)�Q��5k֤6E!��T�مx�������͛ݞA~���b�v�[�ΧC�����С8���hm�l������g�sy�^q���9s�	8n��y󪫮��ŋ'�1����h�!���a TC�����kQ0|��daÆ&L���{�g�6��8i
jM7n�8u�M�p�e���#�<�ې�gp�4He	ZeQ ��$�JchhhH�<�r�^�d�Dv��y6�̃�ZS+�u�r�eR����<�]w��{o��T���Y�֬Y��%�Q��b8e�Y~�ԩjțo�Y����ϗ�C�.�ϟ�v�!����$��s0�L�3��TC���UgaРA7n]LN��ٳKJJ���ǎ+%��_��Ts�l�ӷp�Bm�^~�eK5,[�,X�;�]�v%�,`9��G�Z#�w�T�o�1tG�UCf���K.�D@5��d0Gcذaøq�R���:Dt��Ui�Ԏ<YWW��m��Ҙg��6�PD5@Gnd׬?��ϴjx��7=גk��ɓe�aÆ}��_�?�*�b&�Ϙ1át8&Kb���6X����xTC��f��u��?�y�b�gϖe���9;RV/��r5���w��T�	\�G}��h7n���H�Y�n��Dyɏ$�\�p���Q9�˖-�v���P��1%��x�駟Nr4��@��\u�^�|��!����+�t��;�Ӳ��h.���@�����o�ǲ<����_,\���������oܽ{�՟}���m�b�S8�Fҋ�3X�!�(P�DN��a�T���׾�����KJJ��?�S�c+'E������TVV�3���I�����_��ϖokll4��*��;�֭�TT@�TQ�m'$F[�n�\j����9��O��[�nU�Q�����=���A��'�_��דo{���]��w��jp�kp��a�	�g@5d#+W�ԣ4H�5j��/����VN�ծnllT�ru+���A�U{��9�w6��sϩ*`��`�g&w2��4-2\2̞=[.ԄÞ�aŊ�}+�w�΁m�H;�K^^��Ucچ(�����H'��ַ�Cޒ����z+%���{�Uߙr��s!�6g�����=�T93t^p�W*�0p�@���ԅK/�4غ�s�_��_��4�ub�O~�(� ��Ȝ9sTq�̟ŕ{дH�3�H����'&T�pblڴ�g�E:�d�m�2e�����`	�d�
��H/���~�{뭷�D5L�4�-�bF����?�Ԗ>�Ր���/++Sl��َ%o��vYf����tX��k��V>�������o��vqqqP5�B"�B9�� �UMP �i�NfJ�]�v%0�cAA��5k�%��0�m.�P/Y��C�ɶ��W_�����������h/�:����;u���U��͛���Ҭ�0t�~πj�F�nݪA}��'���_�%W�\4irƇ*�>��3�x�_�T�NlP��wߝ<yrV_'��655�i?�^���M��'3�a���+	�;�D�.���82��c܆.����F	��C2.��FPqy�+��R9z�h	%�l�HH��$�JL5���{���gǜ��$�̟�߰{��P��XB\��ر������f�Ν�j��u��W�Y'T���k�j�C��ԯ���ӧO?�쳳��x��O�<��[ny饗��L�g@5 �|�"�d����������ݻ�X���i���Vǜ����1��+��b�[��-����T�N@5��gP���ѣ%|H�Ar�5��		�b��e˖��������n�`.��	ϔ�o|��}ټy3�!Cx�G�X�f�ƍC����/�K��-�-**:�s䤫>��U�VY%��C�i�.��$���1���4dŘ����EJ��d�K��)S��+���9_+V�`��L�@Qu����y�5������-ځ��+�A��{�544���k�S5<��s�3ҷo߸<�cZ
�p,^���� ��y���m��իuV�p�U6l�PRRRQQ�mû�;r�Ȣ�")����`�K5D%6���$ 
����1�3�Li@5 t�d��q%3  LV�XZS�u�o��puQ$)"�5�P�j�k��g�'L��d>����x\[[�����/��<�����=)}��}��GUO���>�!
�/w{�ݻwϙ3G68�UUUQ�!��]�V���{�z��e˖.����h���-�sZSS��c��&�*�3g�\�jU�����l���$�BUC�38R�.W�{дH�3�d�뮻� �0R�Tߖ Ҵ6ﶦpP��]�vmݺ�5�Z���]��y�9�� T�����ǎ��iӦɕ'tIy_�[o��=�\	gϞ]^^��s������U���7t�-u��� 祂�=�Vqw�_�lY�������jx����W����K.Q+Jزe�nu��x�E�^�:����(|l�����	�ٞ�@K hZxz��d�0VWW�
��֬Y�= ���B�Ν�cǎ͛7����_~�xV:7����ZX������!a�j �P�cǎ��֥�^�$��0a�JQ())�ꪫ~��J�%������_�nݼy�.��B���vʔ)�Q��Y��W~hϞ=93��Ґ]�s9���<����?��������r�����j��	&۴�a�K8X�?���Tд�.��Nf���u�V�NK�,a�G �3��jI�7n��,���΁; t@� �ĉ�;v��Q�&L�A�b�7�ͯ�������j}��+Tݺuۻwo�	Qif���*�fȐ!r�i����O>)_�z�j��[���I�i�45��,+F:��4-�w�y��?~����} {�G555���{����1�'h�g0ǁ<��m���w�ԩ�㡤�d���7n����5���s���%���c�%6z7�6���f�'�H�)n���Μ9S�M�ې�X"��001�#�!���>�i���G>�3�c .�^fyyy xj���B�Rf>��7�� ���_lf>lܸq�����աY�����*�H0�W5/���駟�����.{���={�3�e�Y�j�.��^{m��q9wrB�� ���C���aBG1m_b���|RP@�"=Cpp���h9~�x�Jp��GjMv]����֮]�;Y�8��#�B�QV>�W\!�D-)���رcw�ء�!{����/���KH��Onڴ)8oEhz��Ȑ:�y��wo��V�@��駟.��nݺ���N?�jH?�я���T�?���U�7�����=���.�A��spϊ�3gJ��%C�yZ@�"��iB� >�ё� � �P��k�ԩSc:��&�BQ�6���Ku�ĉ�<��`���I�d��Z,��!�p��MMM�<�ȭ�,�#�u�_�x饗�}���@��	�Q<��EEE*]G�x衇�o�?��:Gb���ڪ9l��s�4�F������f���kZ��3t�ޝ� cŊ9p�S�A�	�s�Lr@5 크�g���K��n{PWW繤�%f
�m��?�n��m��?7�$�!����T���;�&'��4�l�C8d,�d�=�@K hZ��3H��i& ң


Ʒp�W��fɒ%��Ӧ�>շb�����:�p�9��~cǎݾ}�{�pccc��-�5b���{)$.M�ް�)�Ў�R�����g��Y�;w��xeeeMMM�~��(��p0���|�C���L�`J�P�,̨��oZ���"�3̞=�@2��wYWW7~��+V�Y��R��r��\�n����)W555�$���!�U��g0Gw��RСS2}-�CWbCن���g��ҀjH�<�Hii�*��~ztS7r���o�3�.]��j�[^�-L�eҏ�IzS-ɐ��� t䦅{H�3ĜoB�n4 I"!]]��RشiS;�E���l�l����w$��˗Kk�C	êA�W\qE\�
�J��'�!t*
3� =��a>����G��p���{���կ~U__���y�;w�. �nÆ,<x��)���K�.�s|&h�-��?f �&i=���h	@�mZ��y�g�?>��##m��K�,I~:Ά�-�&D�	��A"\sȸFwLaV�c
�TA۠C�6Uq����P���ҀjH-�<�9��?���ի����Y\�z��W/Z�h�ҥ7�x�ԣ��k�Wy����^��p0�S`m��ڿ���3� 2_5�o�O=�� 4r��Z?{��d�L����j �¶m�Ǝ��~��_�C��?���.��b	��X�vm[�a���m�+���m�맃��1J)m����u�	a�ܹQK��W�*..�4�����_��7n����ޠ��spȇ�cm�e�d��@K :f����=z�Ν�]c�	��\�,YRPP�r���!�T�D�cǎ�ѤI��Ab᪪������1!f
[2V7
�6��!*�� �pxR��32D���馛䰇.��_�R
�^�?��?TzC���ӦMS�������98�C��6�qe<� �̦�� �����;vmӦM�h ��ZzX$������.k�ȜIo�9��q �;�<����x���ǵUUU���w��8������9O�@�c����;�U���RD�� ��0HZ�JDŪ�$��LBB��%��OPnA�@�@B�@B�	�;r�vjk��k�df�̚���k����}���^{�Yk��y��z�w�=�#cF�F��pp�h;��2�`Ҁ������i�&ٖ{��y���,x��ɓK�,y饗������+66��'�|���׮]?��n�,sP��%�J\�
-*@M��Cu�̛@�P�ZZZ233m 0�s3�Gr6�B{�_JOO�^���Ԥ�	���ѣ�v�2o�Dj�4
��5v��Wqr1uC|$�	Hl��	�rȐ!tKu�����C��1y���b$�0(V����>T��â����S�Ԋ+p�A�P2��RTTd5�aĈ'O��bP(�\�޽{�i����x���,�aM�6͒���Md�A"sp���q�A�������
Z��mE�����=͛��`�3���]+�I�����Lbu C ��8��BǴ0-I�b�����dg����
��QKKKJJ��1s�����h`��pR4�A�c"�$���{&۴�8p��U�-��
�AZ����"o��z{R��9s�׍yS� ���Zd��(��MM� �Wjj��t _���B�lcKY���uuuAހ3 *�Pq�d�ڵ+777�C�?�8��ԩS�BD�c��6��8��A��;��q�����u E:��Ү��A��AS^���-T��1���s��)N��@�P� � K=ڀ3 *�PCNN�lپ��Mb��t���ӡl��t��3`�#2Ƞ�5x���r�@�;��v�Q����t���!��=����P�`Zh�h��l���s�(�sࠟR1b��^L@Cg@T�&Pp������Jԃ>x��A�U�̙� є)S�-[�aÆ�g�*��]�v��aW�����#;DJ��9�ȃ3��H���Z�j΀!^]�Vw�\���`5�G���z��I!j@�5��NTWW�N$11�
�������3����WTT�c;�Q�� �èQ��x��w���l?MHH���`���ɲe��6�+j؈�a���to;w�d+���c���I����T@��Syy9�iZݱ��u�ƍt�
��M�K��=��j1D(��M���𣣣e'�Sk�B��UUU�3���0u�)��@�=�;���C)��e魚���!�-��0��322�Nrss���-�G=�����$6�#�r���s�3x�3�u �y+W���ȿ{���2�{���P��B8��B5��4=zTv��
��`,����K������Ӵ�d�!--M�I����>��3C��um(jX�l��p�ʕ�v-]�4<<��`��5E#G�d����O�N�p����A�ؘ��k����,�h���ǎ��g��?::ڰ�8P�p��d���Z&hÆMMM�#�C���a�;�n�q�Fdh	�д���j�g����'N�hx
��
��ZZZ�w�n:����p����Zڀ3 *�P�ŋ��Ҡ'r�<� ���r�#G�$d�ҥ�R�`���抸��ȡ�D����"p`��>8���$u0r����H�&@�<�z�W�-�8�޽{'''���jrPss��x���3g�-�͠W�"�v����@�ܹsxϠ%�B��jP�4�p��Y�)`5H
�t���ikkS$S����d���2q��/}��4�����G,j��n�3��2(��3<�W~��ْ���;%%%�Ȅq�Ʃ9(++�l<m�4{��t���&K�bE?mll��3P� jnn��-��g|uH�g�}�p�Bi@�P��N��>�6��
5�`���R԰d��_���N���)j`�����s�lH���WM��!с�'zKdiKPNN�)g�����X��Ȉ����F ����݃"8ΰk׮PNp@K ������iH�g�}֭[7������(�B��H��S�@K7��6��B���D,jP�-�]��CDj ڹs'�7!R.�BL�p�D'Ѵ�N"ޒ�z+��A?�A��靬�7������r�
�)�CCCw/A��8�Nh	�д�d�7iػw�����
�r^���A@pD�j���[9� +Y VJrr2�z�G�/&o�1���;vp�2�]���y����p N�p�sss�:��㏓�L�:�6g��ZD����Ɂ؏D�@����ߟ~ZRRbʯ�N@K ���b�	i�5k�a�q�@�P~Qii�)m��O�LpD�&jPpЈ#�Y�x�b�0N襋��a?*,,����}�v�3�4f(����-�K�|�#�@$~��_>��3�%_���mC9PCC����C.]�D��b�������N(��ܹSr�@�i�_��駟ʲ'���p�@�P��i�p@`s-m�:�A���G��]bQ�dt���4z�
�Gjضm�����)[�! ���5F5\�zuԨQ�J������;}��=(G�R5���h�Brr2��	�C]]�����Y΀5@�@�i�Ԡi�!Ѱ�`����B�����ϫiC||<Y�ޅ�g@T�Ð��,E���,a8~���c�jjjRSS��	���"[R������s�8���fMMMgϞ�xW!�.Ap��5���ߞ={�3����C(Ǣ��/^dq�}����̏l�՝;w�8�h	�д�4�!5p!�7o6lyJJ
�(���!--͐6��(D>�b�&���RԠ����+W�|q�-Z�m�����$�"!!����9��eK�Byꉎ��T\\�)X�����Y��V/����-�o�#5��aǎ⚪
���-��q�0{��4\�z�駟6lyQQ�(* h��￯��2�pD�j�yO�YM�Y]]���


ؤ�����U�֐ܾ};G��'�4//�n����~��d�C��⨕���%G�����+�P�E"d`�����-�l
��\$Z ��Aڀ� 
M�C�aH/lHÕ+W���[�kO�P� �Ǐ�h���(pD�&jP�4��!>>~ѢE����GA��l�R]]��\,j WF� &MLL�7nH�b���			jp��lnn�q���L�BSj��t��Ep���x���'655�ʁ�����שdJMM�"�Gl� ���'h��i�I2!m@K ���l�W�4\�rŰ�ݻw������;�/W�+z���r��-�?�vB��=�%"]BpD�j0}P�r0B(jX�h)E���(j���'�%��z���L�#G��O�-[&F5��B�
j�'�7t0��)����AFX��HD�;ЮA�)2�����%%%�'O&ߊ����˃/�̀� 
Q�b�K� �ѧ�~z���Ç65��0�:s��m%�z�x�^[�)����/��V������˝W��е0�S�W��6��6��
)� >��B�����x�")8çrQ�0|�p�@�����;�7=���דFR���L+ٌ̢�m�;w�w��LzJmm��wxKK�a���[[[����~��K�7�"��.�r�P(�VCdv��+pp����ŗ_~��d���G/�^y-��0��8�kZph�WM%b�4��6�ڿ�N�40P�|�@qjٔs5h������[�ne]*�s[5��6��hjj�'��%-t�e�p����n�gĢ�xA���eee2�"������'�c͚5,�'K��7�e1�����AR�d׮]�6l�� -Th���A�p������6�y�n<>R3$a�2��g_ʸt鲽�]m�^[D�(4Q�����pI4��}����p�o��Sff�l����%�g@T�u��!5��ġ[��.j`��9�r��R����s��yڠ@,j�Z)���i�88x�V������l��f���ѣG���v���BJ����'O�v��ɖn �yyyX(-T���i`B^�ti	�����n9�Y�h�J&,Z��G[w���W}���߆����
��x�|:j�s����y>RC��Y4��[0�0@6�fgg���%"qD!j0Eꐆ��8�@6c�Q�K%�K�.���n�_P�:ޠ��Q5��x�$���ٳ�_�wÆS�L	������X�~=\��jhjjZ�l)�{8|�0ΰ�t��5p���*�95��ϖ}ضm)5������,Y�����w��vBԀB9oZ�RӐL����_����O(-{�e�_�u%��f���eR�[0����3:�����~�h�I��1�3�u��y����ڪ(ڀ�����Q��a�����l��إ ��2�5Ȗ��g אEUJ����=,))1�-cccE��"����/�>qz�V7a�d��R=��#G�p}���\xx����E�`Dn'��6�%�
�B�3�UHH5/^���=��`p�UG�O"����%�_��)+'��x-[<z�58��|RNr����M�***���ˈ�ΧQ��B����Z2�EbT�!mhmme� k�q��X��0m0������A5�DQ��ɓɥ��M�_���(0�/ҏ�����@MMM��,NO�t5�B��LD��v���f�6�?ޔ6�B�gΜq��!j@��eZ�����	.��O>�ڵ+���0wXnp��i��G����`'�^�3g��U��tp�Ő	��G[w������ݼu'y�e&C��=e勖���&��4�a��M�wI�L�"��&�����d�uB�4�;l�y^�|ڱ[vu�i���s��K�f\��ݯ��D�ػu�V�4
40P����zR���V����ŋ��/�`��걨�/R�"�zODJ��[��������ïF�ϒ����(�є)STg(ߡS'C���mbbb�+jڐ��[B+����� *(M�<Ņc��A+6��ܹs�h:��qd�3�_�u�	d���})�|�8t ��JJI�>ه��<uZQ���HSVlT�r���^�tIf`�Gϖ��Fj)pgD3;HX� �H�y�N��63W��Ԙ�.Z�R�@W҄C�Q�w���H� �	�=0��4
�pD!j�ܶm[a�jjj�zw������wI�(mؿa����9jɒ%5p(ҧ��3P �����5��{N�&M�<A�`���I��{�I�s�`)�BDUUUlIU��deeq��2�@�`���P�jZȼZg`�A�>}z�ʕÆS�Q��~x�Go/�չz�u�MQC��S��3��ב�����K��G�2Ͷ}�u�
5�:]��]�s�5��"m�p�Ł�+�'��)R*�)��*\���@Q~~�l(����o}H�Q!���(m�N��\�~<n5�({\+�q|�jPph[}}��{����,j�|��W�v��A7�t�}�i'*++���rK``x��P�~�5�hCRR�255U�)pP�ȝ@�6�%�r�9��⊦�A�Ν;�jժ��h��#j�g o�z�ϼ�a5��8�źҳ������d@���e^�54�]���v���鈅x���'�N��'䶡����#G�9o·������	��cq�-mkhl&D���3\�H�!)ݻ�^����@�>"��̗p^�?�G��;�C�vذh��"�SVA7�|�
�؁"�"""����x�e����@!j��̹Q���s����!j�h��k}�`�@uuu�Qш#(1`��s��*�K�gc!�8�˗/�9��ܵkל9s6n��'������.յD�@Q���$�v���6R[5==���&Ǹ�ʿ���
F	L`�`�DN��f꽂�̚���ܨ�>9[�W�m�F�?N�?��U�?ģ�O�����bK(m�0�;��m$#�e/
�B�{\u�O���4(�`釸9��hB
Y��� ��>duu5HX����y�4�6����9��C�@Qu��o�>�C�� )�H�����g�:O��cQ�=�o�gF5�6\5PCߤ;�ݠ����(��r�!�k�9�q�FtB��\s�k��}
ǒ��jnnV��;w.�хHg)//'U@���9֤�rhA��
8s�R0�N�8�����
F�����>�`c��m��E�n>�5�9_�%�{�|p�ta]u1��Eϼ8ݰ=,ʠN=�
8����m�� �.���D���'N�2�3\+�)l�͏\<ƞ�
�.�&���_�68��%N���Ej��vP�Cq��P��ŋ?��׽'K׊}��?�DQCaa�lz�>�@|��a�ݠ����B	��)S6lؐ��A���Y�+yF���(�cǎ��7==]��%6��
sB�&`n���=!j�
g��T:"�u���iN�������6o�&���u�������~
�����6���}N>�(��`Q��O?5�Vߢ�k��z��~����\�k�ٶ�E0��������< �b�
��,,,�ʕ+\}H���4P�B5\�x,��շ��]����Z~�C:όD��\��A�E!�mc�8X����lZĒ�T���H�ݻw���j駷���ѩmB;+--����ʆ�Q�6�M� ���Ȱ}�v���"""�hǑ�s����п�.5o�;�ؠ�';j!r.9�	�xC4K��p���A?��j��Ɗ�i� �ס�Y�l��3��P�͵�=([4��^4+dѲw��v�6��ߊ8-���U����!���}�/�2�,g���>����d)ӄE_�]W4;;[v=�!Ȃ ܛ"���9��Ց�/Y����b����X�,!!�_����'}"���4;���&��Ъ��S�I:��:u
Q ��6'4�2�qi���K�SJJJQQ����qL��9�(���i����2%l��l5RHg��5�2�X���L���� �|dµI������|R���y����_��ū���-�~�)h�V喇�"m8effn'N$� F~���B��	QD�
�&j� ������Z��&���.�H�\C������:��Mð6Â[󂻌p$��T�pfV��+Ş��ѡ!m�q�N�@[�nUe4ks(� @�9�S���<I�0`��+ZZZ�5beH��q����ٖQ�3/NW|�u��m�_�%�P� ���d�6}��6����IP���ne6��4��_��Ř��W��V�����hi�QO?�X�+�܁����ϟ��u�/_�o`N��PC2�ĚSLd����\���P�����l���J�PCdd��k	 �8� �C��u+�PL������Ξ=��YU����t�No0M��<�<�_���X�j��9�c�Dh �\nNXʘ�x�bzz�=�PTT��ipp�ҟ� X�x�z���tolZ�����vJuy3��Y�,C?� B4������[i��☲*��l���N�b��ZZY�`�+;CĄ��[w�#z���ܽ{wE���c�8-��5h����:6O�<��a���5Ȓa����|���ܢ(j ����O�W�^M>cߧߒ-����z^�|yɒ%d9�MFF��*�#U��D�ޝ�A�cQ�!j@ (愥5&֮]kuu	0�e��a����/E�ߔ�8���L��J�Tv�I���S�`T6~�0�mONxF�,X� {�onܼU6o�����B����j8]��KG�%4?��3.0�fO���;����~/��2ϲ�(5�5�tfT��ɖ��B��.AbI@5X�0�>��!::����,O���Ӭ�,j]Q���'8W�]�TYY�0{KS�׎K���E��fn��A�|�� Tp�:������Y�����)˒p	,ࠓn�m]ƭni=a�(*ٽ���ˊX��b� �몋�{iʘ1~�2P֜��m1H��������-��Q��Ʀ�oQCs��rѓ�a�L�Z�f��xh ��ߐQ����nݺ��TE`�Oۉ�"*�Q�?��L�}+u���,3Q\]�度z�,j(�":3���І#G�\j�޽{)g 577�+��e��`{�"��I�@�D���W�^��Uՙ���>�)y� ���uڬ���"'�PV�D �BsB�9�q�bМ�Z�i�c�W�P��qYq�0u�I(�f�蝻?&�������	sZS��sɿu��{���2�i�-Y� ��oMԐ�B�a�[YE#5Ж����-M/ \X2o�U[�([-����Ov\՗e�P���68��%N��P@��A��Ӈ�T@2i�uYHu�C�`I"jx�7X������3�]q�*� )������ד�rss�raՓ�3H����~���7����$#�2���T1� ���	�@�5����I��m��k�魸�6�W��S uf�2
�I
�X�p��V��'�f+�{�&���̫׊���)���Y԰aS15<v��c�6N/~۶����Ƌ�5���0�ZT���D�ˬ#��啇h݉�#GΞ.�@m?�q�/;ٝSRRGŏ?���~ɡ�i��AӺ��,�=���b9iqL�]H�5���'��Ό5,\��ҥK'N��裏�`����nPSSc��^�I�&�f���_[��ex;]�r����ޯj�2��Mc~l���Rm�QEԀ �U愦�
����M�2CDDDii������R��x,����666�8X]����.m��:��� -��wV����G��KJ�fe�+��@xBj��>�wiW�O�)\p�S���y��ɲGٶ�+�d?���T��6:����I<e�ٔ6�D�c����w׬��@��ā��� Zr���\TTd86.X� ��Pഈ
�`J��Wy�<�����dO��j�Uݮ�$� �tYUU�]�jUSS��ā�ݕ!m M��������������r�68p�����Ӟ̪���������),,�ԩS\��oOR��3���Q��.� @�ܜ��۶m�<]O�<���8e7�峔=Av��G85�����&`�g7�_��s�93���$%O�OQ�����+��OE�C� �
T�-3�T'O���m��ZΡ1��m!E��,j�g�҆#����K��|�
;���.�	e^h�o�***���,+�0l�0r'�9�C��"*tP�լ.��R�煉�i�5�(wY�ߧf2D
��#�m`SI1��`�6���`VRx�Ny�\�n�k	�H��2��h{UU�M�P (7��Iе���t����"[�R�766������9Y���D�Ϝe�(�2Ys���ᖣ5�M-����i-G��:}�˒`�ൽ�mjuT�f#"9��㠹��Og�~���^�O� ��f���RX;����6P���me�����#�0���z�Z��޺cW}C�.]�$� 54%	Ѵ�{ee�{��ҥK���2� ���r(pZD�j����N�{0}
,K��0e�V�5(�1-�M���J�n�J����\^^N"r�,YB�<p� �������PNN��ٳw�ޭ����K�U� ޓ2f;����&2΀� �;�	_�tm�QUU�oǍ��r�<}��k��=Am��ـ�W��/^4\���A�����|�`)�>.+�E�v5�PNl� ETe�+��?1>El��sE{FD)�R��6����bx��{�v�����R�y��QӾ'��L�R�βʐ�N��P��'�ij�A<_Ƕ�eZv�y� [��C���*j�$j� �E�1�\���6��믿~���Vmf��үf�*�p��I�JGz+��jUU���=� ��&g��<>>��@�����	u��(sv�����L9h'Q�њZ�ɾ���	�l�p�W�&�yt�S���b�O>�$5�j���˗Q�X԰w_�h�446)�U�64lX� �BO ��2���'�w���FΚ�/�=$ړ���.��ŕ����<r�H��sbb�aK��gs(�,׀�"*4Q�m�GxRmRV���e4QK��ϖh�)j�DD� ҆���'''S�?==������'N���{���ٳm���\h���z}�|
�z˖ȃ��&��&��,8�Tp������y����࠹��]�֝�`6P��L��+�/\ΦK<9��/�	.*!��m۹�킥l�D�ﺢ��Ν���k�vÇ���^�Ǟ����e���DLA,�mmp 򢨁ӥK�����Ie����/����2�H�[چ��!̓�^�z������|*��5���gϱ���ROt�P�5�����W����ɓ���;v�p�;gff6����b�3K^ⴈ
Y��E���z������
�A���3�rrr��z�g�N|�ھ}�az��{����AҀ �=�&g��999Y���+3hr7�������*�����y����L9����r��h���`�tXˊ-7A�a���Q���տ�vg�Ȏu�+V�g�5ഈB��#��a�Iӵ�������0s�̾}��u�;u
��.O=5����̙3��C�P�'�6PCkk��3�����]�}FFF�S��቎�n�z�j��d��6��8\@Q
eÜPs6Aϴ>�N҄�(Gܱc��/crr��@��	C���^�%m`W̜�B:��������Z�v���szz�c�Y�4�5���B�pP�e���Og�1:���q��]���;��[n���C{뭷�y�� ���%,Aj0�5p�Z�>2�����J�t�����6�R8�=���b��PEԀBY2'�+Y�`B{+NfŒ@���-N�{��fTTTp��i��(�
/�4�D5�}sw�M�`5lݱ�]#CD�[Ώ��z}��/*�sUU�c�YV�T[[�Lw��0��6�K��Q��$���3���}����u��0��[o�����3g��!X�j������CQL
��AD���"�-,,�~X�+A'��u�J������خj���� �KP��3�*��8��t,�p�*F���H�u\?��7ͅJ]K�<yj`	8�[��W����-���,b_Q�Cn�j�\�]�u����dw�aJѝ�@�ug}� �AԀB���A�E�L�իW��7�<�G��'&��'�4藷�v������	Ú���)�TA�(jhii���u��{ｧ��tcбc�Ľ���˜�p��R!��%֮]+N��i�W��:"9 (�������%��jkke����I��RRRd�����tO\ͮ��m�4��:��:�=�SW߸v�fx=1>�]>�ƕaT��Q����~Y��޽���Y� ���Ё�,C0��[��ʐ8-�5�$�BS����>�K��_����u��3gΰ&Y`�����_?z��e�///W�
:
h`C����͚�a���p)�vbV��Ԉ;��)F
�KF���Q�u����������"j@���	MO|���H�8Qq8�cyQ0�)⮏?�ڠ�Li�)p�J|+h5��6F�j	��ݸY\p���$���Y�A�/�G�uj|ѝ�م|ݝe�a���`���2$N�(D��k8�eShз���ׯ���{`!�f��믿~�M��/�qǝ˗/�J��@� ���Z�`r�K�z���G94[�l�Ķ'C�p�Z�;��4V��{��b��g!j@�L�	MOFˤ�$�pÃ�G,,,�+11�_=���H֪���)p	mP/ �	���;�K^�/�<D
�d�9p�!��g����
~�bjn��);;[�qRRR�՝e�>(>>^��۝eG?x� A�W��i�������&�?�w�)g�:�y�t�jH��w�M�0c������x�#G���3�8q�p��|BGM���jCԠ >"}�!�f�ÅWh�'���UM5�P�P��� ��bW��{%ܚ=E�����Ӏd[�f��=qg`�������2���繢���OTΝ;_��D^��_`��jp-Β�����L(�vgE�W�|ڝը��k@ԀBԀ��/.9�/�H)�K/M���#$9C��7�t˙3g�U�5t��	p�'L�0p��|�_�~���o^����r��n��fӾ@P��Ch�}�R�a��ѣ���ϟ/�7S�����*++m��6x�{X�ď�Q
ř:^?�����y塤f����x������Ο?/k\%�V.��òi�h$��"�^ӝ��{��8��B�������l�R�B---V������XD]]������w�I��QO�Q�ⲃj[���o���
<S��
��#zܥK������o����_�N_0D�v,�0��P�%my�3�l�µ:p���AC�^1H\^�Q
���h	CeVV�l'�T��[*�����/kaRR�L���O�A5(h�4�>s0E��C��\k2u��u����.���5k�(F7t���LYa�c=}�vgj 9���.5�5�|�瞛J�:�p���+hgN��`֬Ydo��rkee�hN�
�`���ƾ}�z���٣�I�i�f �G����`��Q�!g`	��UTTؾh>�x2 j@j0-ϝ;�~��ɻ��0�)R'ZZZ���͊����ju��6�i�8خ�`	Ax����msꟸՂ�la�΅4�qYU��Cei��iwV�{����ug�(������w���/L�>]�"t�kT�|�-�D��T���:�*++�ܹ��]`Ϟ=����4�IFr����͛w�H&PXE����{�d��/,[�h �܏ԩ0T*�Az�D��|\ff�{����Aԭ[77�QX
���<�^��m�jH����C'���.	i�����#??�=ݹ��T�Θ��8%�3|��p?�0��P�P���]�7��S]]-�ȋ�kN���t�RZ��ZE��"X��:r������.`�L#�9�U��a�p�P��ε����2e(4 P.D��Ұj���gu�b�aAa)S���A.I�P6X�������9���5C�Abk�q���_֞`�({�G�vg���jD�?Q
Qʿ�1�?������$YE>��8p��O�3Z��4B�X�Py��z������W[[�i�̞ ���ի���D� [,[8F5���������s��!h����&����2E�5��5(�J2N>�+��:�31&&�+���"�\	�x7��״��a�&y���-��b����`hh��ӭ[7Y飯�r[wV�{�+��aw�-������M�>	i��2\+� �C�0n�8�}t�iB�!^��H������֭S$$���d�኶��0��Cg�}�!ۓ51�ϟo�0�Q
��4��o�2�ě-Z�Hv���DwvL�ru��ÇV�w3m��S�c�gw�++R`��.����#gn'�ԉ������^�S�բ<p� ����j�*�n��v�ႃ��o~0s�L��w�OM� �T����?��W8�ڵkL�d�r�s�`��ؒ�6�8ڠ@��?D�P��8$K�I��𩇏A��	��_>�P�5{��՚�����a��%��E"����)����R�V�q����e��R� ai�pR�r�eee^L������B�5���o�f���������!s`���{�������*e����O��W��~���9��P��8zpU)S�I�JDP��r��i�Th��8II��b�
}1u">>^�NK�s^
�
. ��N������A,�+���6���a,y��n�9��D4���&^Aw�<N	.��!:w�������i��z��W	j�ӧ�ږ�sظq#A���������4h� ���7�x#���lj0Eg�':���6Xl ���ۆ� ]�5�BԀr�� 2H�6�T�M� �۷Ov��ݻ��|����|Y�_~�e�4
�I/춨��ԲӌH�̵��=z�B��jK���;Z�p�]D w��H!ͧ9���j-Y�(%%E����,��Q�
5�7��bm��*=��pD!j@��1cA�{?�cN��;k�_�����n��^z�w�n��ۥ�o߾ݔ3�5p��5�8�U�2��(m0E���E�%�r�Đ���~�pK�ý�����HY�ZZZ��=��!�=��6B����w��Z��L���b��1��k���	�A������N��`�(2���;��^mwg�ذa����5w�\�~��-
�PXXHP�]w��o�R�J���������Ԑm�E�,���Ÿ�H!�ֱ!
Ԡ�`?�t|5m0Ed-��?�_�P���AF6���_:^��NQ���M&�֭����	����\˯�$g\{_4�k�I?��4�Ð3XBU�����A�$ܥ/����#�!�;ˢ@��ў�{Up��������6l�@P��7�j:��]Ct��&5�5����6^`������7�pöm��-���Lo���\��j.����ϟoX���ΣC�@QH�0�Q
%�ihjj��$�4pcrkk��I�O�`Erd�\3���'��)*O�@��8�24�7+��X���PpOP��333E��i_=z4���ի=	---5�m߾}�����5���@�P�P�S]]]첸��ӂSb�oj��o��-�f���j̘1�_�q�S�N�0w�\M�V5�x��d��I�`��5P6��P v@�QҰ`����׸4� G#kRQQQ`uL�t��k�e#�{	aP��5X��m/��G�uL�+tjD������%�9�W��֭�l���P.�Aٹ�����e�ٍ,{bƌ5�SD\��m6�QhZ�8=���5�sO|<�.@`^�~�5,^��6^`��M7�Ģ�u����#c����ׯ7=/��O�Q�,��SF�b�H
�ըA��1�Q*�ņ4�7l�0��y͚5��D�8K�����M`�3gNTT�՟�j���D�P��Qd�9�fs�����`���
�I��UAA���O�JQ�u�ĉ��C�68ݠ5�ܯ��ذ{�nOvE���3g�W[[�m�����cQCii�l�)S�\��������*~A����j�r�P(C�@C`��j��֩ ���|����.�"�����=9x�`FFFxx���CW�CZ��ԣ�'��n/�°^����j`F�p��� �Q|ѓ6�(�ݹ��L?N�[?
�����?JPøq�=�[cc��7�Jv8v�8/�355���-�m��_�B��t���C4K�A'��a�@i�������4v.D�P����'�xi�SRQ�'��ǉjii��WXXL%t>p�����=!�}j�w���F���}���N�4iǎ`Q�h��Ç�6��nwV�{%��R}H��(
QʿZ�z5!7��ݏ?��Cc���"{���z����v;v�%>����������~W�f̘aɸs	}�8)���,ץku��'i�(�
j�yXQ
EP͞0��.ԠSr߾}���)X��D����ݴi������ҼB���9x�.��t�:hF\X�e��H=99y�֭��K�s�O���
���,K%�d!Q(D(wj��_>�o���r�����W�E-5t�P����	r�=���n��/�A�=!�g����������o�h}!�~(D���=�r�JO�N��4�!"##e-	��q��|�!}!��»ӣ���8s83Jl4�������@���r�p����*V�@�5�\���rZ����oؿ������Н2��lll���[Yt�������v�����*:񴎡Cڠ.�频d��2�_{��@Ԁ
q�@F�`��tB���d�HII	�N��/Q(�k\���"�9FGGk�U��*
QʵZ�r�m��Nc,�$�����L9��Ǐkjj|��ŋ_oWC��q~���
�
.Z�8���5�PVE�'�A��iHCkk��Z>�P�ʂ��P� ;�5k��6���BԀ
P�ٳ�҆�|������z�ojjz��������r�����0B��������Я_?M��I�`(2xB4����k5�z��P(�Ȩ׼y����t��������(��)\R��P!+�rc�������4,,FNujjss���={�2d�0(D(ת�����~H�yu��x�b0E���/�p�w��G�	c���
M�2)�5jݚ;�/jPp+�"p�2t5 j@�LQ����d��ÐE5Ȉ�������xk�BP����L�C*,����/v�ܹ���,"�X���$�ie-4*P�P�2|�������O��q����o��ޮ}�>ӫWﰰpٖ���;&NLjnn�i�����|GA��>}��[�Ngos��}����C�w�}111O<�Č3V�Z��)j y��4��Q�ʪh�6e��*�eQ�a��֭��APA����!Q(�(��3XΊ�ۻv�}��7�<{��s�.\� �A�`�2|�늷+
Mk��ꫯv�r/�
knn�/~1��߿Y���?�=))y��N����o��{?��[o�4��ֹs��򗿼��;)a�馛�����cǎ��b���={��y�z��������9s&�+�A��Mg�\D�P(���i0����K�|ӂ�0������\bH
Ed����Y�f)��﨨(�/���QIH�o`s�j`�Zsl�0�]QhZ��jkko��c���;�~�mj��������� �M7ݒ�����x�����{,Ι3�q��ɓ.\�MRF�6L�4�gϞ=�\7{�����������D(�)j �_��^LQ���t=��Ç˚��������Q�P��aaa`wQ8@�+ָZ�l��o���3g��=�F
Q�zً-����,ÿ�뿽�Ҵ�gϊV_[[��͛���O����6cƌ�˗����8&�|���cǎ�ԩ3��?�s�^z�%1�aРA/��bnnnvv�����������6�z�Z�v��Q|�_����j���BԀr�hMHF<G��t=�S�N�}.k	X�A�I��}���DQ�����28֔�q�{��s��Ky �1�O�:w�|��	u�G-5�5�|�1cƲ��kPII�w���ٳ{��y=S�����Skk�Q�h�BϞ='L����R��>P�!���";;{����+��~~>��VQ��6��܀X!j@ԀB�@dLS�uIyYa^6{�t=�������a�6l�T��������9..�E�F�)��ڵkϜ9c){�w�������M~k���ͷ���*�n�����z����������(��ӧ��X���655����˳�8����0j�����Q
��p���m��К�4M���5&�W���T��;v��)���Y,))	Q��ݗB�`����U�V�>}�Tw�k׮��������׸<~�8��X�@k9�[�N�݇z�ɞ +��1{�
���G%����wӦM�p�G�Ai�G}��ӟ1c͆:thMM��35�g͚EQ�< �j`�z����ąv�o׹v�U�\��W��٥0Y��h�D(�����f2Ԡ�g-��Q�k�����p�d���[o���pA�mۖ�����_l!tȃ�����|�*6s���"Ժ�ܹs�j��.�nYY��ӧIH��,�dO�Q�BԀ*--�^^^�3�Q�{��$���z�q�]�~=M��0a�a�	��:�o߾�gφ��u�n�
�$�ɠA����<G��጑8�`�t j@ԀBy�`�j��kB��h���^�(%%%�fUU�����S�N�O0��ܹs��Ɉ���߼�P��P�N�֭�����,j �eܸq�=�����***��ؙ"%`M�o��I�����P�fO���מ@���z��:�@��ǎ�h�"�8�l��s��u���$&�G�Q�p3x����c�=6z�h�6���g����4�L\QW��*g��Gl�*D�P(ۨ�e0�n&��h	5P��v�ΝeM2][�mR��ۿ�:X��p�JJJ�L������	|��a��Ke}�F(�p��IEw�r�p֊L(�Ά	�;���/v�ԩ���U�hT�5�"#��ٿ����޽����E�УGO�̰.$�}��9z��l��������eØ�`~~�C=��_�j߾}l�i��
�:��4g�0�A�Nw�j��-D�P(Q�,�@VE�j�Aoǎ�&��X�ٹ�3�tU;1X���sԠ������C�����؍7).%�F`�(v0`@`]���Lٹ��`W��P�����w��ŧN�2͞px9r�QhZ��JJJ��?p�/�?�7�c���|��!��꫊F�6o��&k�VWWGGG��ի����@�>��#$���A�pZ��F���V��aÆ��ۨ���C��Z�.D�*)��u�����^Ux���4%%%�Q�)d0$��t�C�j���܍�}YDp�2Dv� *���Ң��d�JCP ���Ⱦ�裏�����	v4�o�(D!�	�&�~zz�_p睝I-Z��W�ZES�=�����0,s����_9r$��taw� �>j0t󭢆�FtP�ႛ�5�P^A477˶�a�C�@k5�q���Qwmx8
<5�),Y�D'^ZgU;����@G
Ƞ��t��84j�;�}�5(ʕ�M(�Y�	�u�VYL�X���	W���ܖ=�F
QC�����'��;��<�P_� B>�SO=E�}�QE���ظ�8B�(V�Zջw�	&��N��͛7�}�F�r0�83rC���Q
�!j 3�o߾����0��|�̀~^�(7dȐ�'Oz5��.33�0��EjȐ����1r�H�9"p��!%%����Ь�5�:ujΜ9�+�^�Н�߬J/עE�N�8AFWeO�Q�B���Ɠ��_8x�_�0n�xҀ���8y\��~ޮ=z���(�ܱcl3e��D�;`փ��=�8�pI���PC��Q�J�X�|�r�-e%4�d�B�0��z�ҥ��m��67�KQ>�СCԹ����b����4�ت�� 
M�q1�����=����0�!�h�*2 ٗ	j�$�5���*�3����Yq���q�G��]fee)�{�=�477�h ��,{��h�F
Qʒjkk)j [�/m�&���<2��9��q�g���3g΄�`�Q��O>�$|�i�&2E�`	o%P�5��Q��j��(	hjj���k�ٓн{�����s�G)J(DEEi��v=��cq�֮��
��K\�LK��͕�߿�{:�Lp�YJ����x!�,U𦋋�7���sbb���s�́SSWZP$P����CP��u?fO�Q�B�����@0(�����
i@߾��<�֭[iT���h<i�$�2//�C0t��׿���߿�L������B:��(��Q
��@!�رc��]�=!#0����B�OB�{2u�TY�233]����_*???(9W�aɒ%n�#����)F���iؗ)j�}ٰ�+��mmm�G��{���T��.]��I�&C��������wn+ԀF
QC(��������d�g����{��B��7n�H�`�5���)S������= ��O�7�}�Y����|��҆ j@ԀBY��kX�n�~`�9rk�Ѫ�j����EQ>u[O�T����	V�@gm��{8#�K�J��JY_6R����Vѝ]x�9*2����C�0�� �r֯_��K�����k��3f���|�F����g?�߱�f��
:�>���^TTD�`��i0l����'''�D �5��0l�0�)j ����6 j@!j@já��^���jr\��=?���ߗ�Ѕ�����LA�=a�@#F�pg7�̛�M�а2�X���'
eWR�l����)k�s�=G*:*
5���������-Մ��}�3 
M��o�8��;w��Ɂ�~�2�\o��z׮]5���jN�0J�?���_�rܸq�ǠA����)���`ڴi5���5��wI���D?e��$1u�2�W4��Q
e5��]�V�q)
�ouE[[�������GA˝��={3��r��7��_�+�i�r}Y�Cq���>}�Ȯ��j������ٹs禦&��	ָ:u�"2�k׮�n�LD(D(	��z�?�i��7���Y���߾��[�ᮿ��ٳg�e�	�W�֜������ݿ�����k���4��̏`�j���J����C�`�s��� �3 j@�U�򩸚�������(hY�u���C�(""��n�(�;z��)g�;$22Rv��J���&��lE����W�AJ'N����Ttg�ԇ0`���`��	� �I`����E_~��5�5��#�}t0fЧO_����o����z�;��r�J�t?�0�jx���mόl-#�a�'��5P��6p�ADΠ�p�]�5�P�E�xE`�笳���ס0���~Μ9
g�}������\���p�����N?%%���*�c�����.S�?�,��lס ����S�V�X!k�����d!��T�_�^ѣw�ލ������3f�X�6�t�-3f̀A�+��mԨ������?�Տ���+����^�z���PXXH���`JX� �nc�3�h��(D	��TH��ȼE`�owͮCawM�v��EvD�3vs��|����e8���ww�pu����Zv>ڠӗ��4H�lhjjRtg��{�Iѝ�;FC���lEG���������5�5�\�e˖�v��,��ޮ.�q��>RR���)��mtt]�{�$�i�M�0z�h�Q�ʒ��,m�������N\��Q
�E�`�5��]VV��.���v=W�[[�bR�~Ϟ=���NII���[n��o�w��S� ��b�@���+V2�����m��ˊ��͛7ˮd����۝�2���bH))�4p���x'66Vv���~�B�5��&��RSS��_~Ȓx�w_�Y�f�ڵK�n$�~�aRR�=�t�����}�=,�����رc)j�4i�����={���dQj��N,dP�4\5�>j��Q��5�S^}�U��Ok�l�>��s:�KQ>�S�Nuuu�G���t�����N�W�s7�b�?�V��C-Z����MMMp��/�9rɒ%;v쨭��.���%��఻�ܫ�&u���-.<!Vi��4PJ ���k�	��]�5�\(�~�9�@^7����������@�w6?��#�﹧��ᕑ��۔�Zr�С��������!C��&$$x�Lid��5 j@��%�Ԇ��VE4[����P�5h���͝;wvUܵ:�~����(�c��{"p�����8�,�����P��������a:�i6�>�d��񩩩�766��l_�����S�N���ՙP�w�&�:Ud!�ظq��@ݺu��ְ�$�����;�7���'Cd		�������ĉ�۶ms	g;v,	f :�t�9Q�~�������{�+�A�6Ȁ������-D�P(�A��@P�ݻW��@h��q)
.�����UO�M���g�G��۷��~��ݻ���������aֆ�3�["99م,�?:8��||��6>**J���ڵk\\�ܹs��߿:M���͕}�/�^�?�z�)Ðb��4�6�"Bf������pD�i�R��˗�?ᮻ���H�}�p�w��yh�ԩ�6mrϒC6�LQ\���T����i��6p��PtK��Q��[2Lm3�kC��A�[��-�^�'��&kI�N�jjj��qp�^{�5_�p���>*�@ڀ�۶d܉��!U7'�P��[�rS���c�!!!���tȐ!�G������O*���r�L���&�;Ӑb��6�N�"B&,,v+[�r8�дF��`rL���.X)�W�_`1���(�i<�;j�(�x5j8p�@ll,�gx���?m��P�'�����N�rD�P(ۨA�����
SQ��0�����
/���6����@��v���/W#%%���ԋ�9�����S�n���H�I����-'�� .�@Z�f�޺���J���h�"Y5H.�AmP���"Bf�~,׀3 
Mk��H������oڴi�ʕ;w�lmm�A̝nll������'O�!�pKx����S�+`��������x���>�;F�[�`f��F���9\�qD(�
P�6 �����v=��Cj� f�f`WB�)^^��/]�>}�XkvE<��x�駝lar��'a$:%`2���V��{F���LY;���4'����RA&.��)�4XEL2��W΀(4�QA/����Hq�=z�=Z�`�5j	Q�ի�ԩS�}�ݚ��aX�a׮]o��FBB�� ��8q"L4G�������M�6�s�m6���*g�Y{�[��[�n���Q
e�4Kʫ6���ΝS<Ѧ���(�Z��p���~-G8[>�}Z\\C��m�����s(--w�����7u��Z[[]�b*u	���j�y�םD�ۊ+��N͆>"#aee�"uB�i("d^~�eu��,4�QhZ��[0��3�2���8�e��F�� �~�����=���9�@� �5�8� �6��A��É'"j@ԀB)�6��5������){��և٤�۳g�;�[ff&����q�@���������)))�_�4�A'u���xY��ܷ�^�����=�ևt�e��N(������T�4���X0z�#hT�5�P
��ց6lXCC��0O�4������^���`���*���3g�c/�A�j)���%̏�'�p�BD�P(Ԡl���0��9s��ׇ4����S׈����I�8�3�g��3�g�l��ŋ-e˖-�����\�~&SƢx®�:�f�q�ثpW�^��镅�%0���t��YĆ��	�j���~)�3 
MkT(�3��	Y<��O<��p��a�vbbb�{챹s��ʙІ�����u��ӦM;t��a[:�����?�0a�l 9r��g�2E��8�ʞL�(.QYYiJbccaW:�!Շ���X룏>R�Z��	;�����H���栈�חz�
�|�Z�I�N�eQ���(A������Io�Q�?���>|xp��p�sWS'L�A�0%9���/�!qD�i��M��r�S�L���$�n�-��⚚�襀Ia�޽7n\�~��-[�y�I��1��m ���,Zg�,�Q�JD���Շd�(4iCxx��L�((�5<� V�|�����Zsiݬc'>y�dӣȞ�WUUeffz�9�KW(� r�jE�T������$ۡ�i)�8q�W�(ැ-�����T�{N�E,G�h���b���	�?�Xs����X���;g@��Hl˵�#6��4a̘1��1rrr�cǎ���{�"C`��<�	8������Ȟ��5�P�eZEA�F�I@			�71m��);���/�Tmm-�c�M���ڵ+<<\qӀy��7�y�VE���1�Z�:�555
��ʇ���)��ѣG5���Bz}|qR---p�+V�O�X2X�W]]�iw��(�(Y`��a���F
Qʏ���F�ѣG�d���8Cz@s�Ζ�u�90�̜93Ȇ�={�PsW�=��! �c�9�#�`feym�ӧ��Q��^�l�,�L�FAháC�w��k�k�y�u�|��_���z���\N�,����mbccem�_�.����Ј��*u5H�:)ۏi�I7)k�n����	���YS��vUQIKKKQQ��aD�}�݃2�ο��/�����,�e����]g�E��]�����8�;�,dhn��ݻ�3ڸqcS���!R ���I5sha���
\�D\\\cc��+t�kך^:ۨ4o޼��g �QF2�P�2u�żZE�����z�)�cEEE���(�(��q���x�Z[[a�"s��������y��'�oѽ���QZ��y"gc�5����۫�G�/Ϧ_y�8Gu�DAA�":"PdE�N��~�T��%��"������z%���:u�c�4��Lɡ��,Æ�M�`%���x�á�w�qD!j�HM�-//�ǿ)!!�l�|�rE�Xt������g`�;���h��:�T'tS�CA��������/�G�iӦ�,I#xq�	D(�j�L��(�����\�#�9|1�B\�R���=!���s�=�t�ԩIPs�Ȟ�c��g ��X��Ɛ+��\{��[KWh
b�οpq�!n3S��K��e���
"`n�������?����<j�(��9rD֗Y��1C64L��J	�)e�1�
_<���!49&��<�d�aٲe���v���>��)g�2e��x.���Al�خ�Λ7o	]�v���_�~ӦM{��wa�+fr!�5�P2Ԡ0�(��lx�P�y�uuu��S��Ca����r�flڴ���	uL�����-Ѡ��!6`ɀ�b�KW8v;��aX�#>>^����Rԇ>|�:��_j�Y-��Vn�/��\���������:;/((�ї�ޝu:���IN�z�3 
QC�q
��QRRB����e�����̚<y���
9C�@�q߅��p�ց�Uw�<�AVR?��P���e��仲��lF�Hu�.?���"2ų\5m�yJ3��(22r��톇S��C�N
��г�>K�*�P�D���W"(--����޽�/F/.]a
����7Қ5kd�K��l��*����G�)�`Cqqqйh_�ԝW�Z�s�>}����l<�NeW���  ����^��B����E0=Qz��k�s�N8TVV�P}��׮]�S�L�]�Ȇ��_hp�3�<#�lch�O<ѫW��v��a5�l�.m�
j���,��5�P��A=frUh�Fv�.��?�o���hdNN�+��Z)��P��B�P�.]tݹs���~�ne��uLD�@�h�!�=����tH���������bEiK��#h���d�`]E���������HLL�I^Phذa������<z�h�c������;+�x����>���V���͆3 
QC�p2�A�����U.��l`?2DD%%%�[���$��kU�pG�3�xg���X�@���X����
u`�Ϋ9���	���!��C!j@j���5Y�`����
s��$&&f˖-p5m=���_�����6Ftod��1��e����iiipqRSSeЌ�@Tff�켲���� �Izzz �p3$&&�X�a�N��5��~��þ�ߝ`GԒ%K��e�x_wgؿ���_�P��B���AD��6�9�}����K��3�ֳ���:�ÆS�~Z�z5e,j���>z���%U��,jP�M����n�q��	,Ԁ�ʒZv� {��ݻwkFp�8qbqq1�M�0|J=�IwC�XS�N=Ɉ�����8���D ƏA�5�M����V<.��W�4^����~cq����B���(����kjj�';l_���|���qǌc�/�cC�vgYNUU�fqH40P�P����:`+����Sz�fϞM7��,j ��:�;w�d9�`\b�iCzz:M6lXSS�z���l���ѣ�vhӦM��tr(�B.�O
���Nps%fO j@���jM]C�@<��8)����|
V���,8|��8�y��U�۷��!:w���#��'��m�h`A]��?胳�g�~Qbb"p�m��?Ј#jkk����Q��<f�Kg
#�N_f!�N<k8y�;�ꋮZ��6�:�g@���F"g���w����%''�-###�m`��P��t������B� �{�&�	�Ǐ�Y�*++��1L�6��j� m��A�׻M\��+���'5�P���j��/�U"e�ZZZfϞ}�wz��aÆ͛7������`S'������ꞷo�N��ܓx%��ܶ9�;GZE,������]��$4,33�Y�}^YKT'�&**
��i9n�:�w��#��s_�n�����\UUe����~�-J��
�Q�B!�A�0�p����#؏X� { �/<<�r�ج
_�Ҡ�� ��=Ԡ� �
���{]����&�(D�`B6hX�
�@�C}}}NN�����k׮qqqo���ƍ+**��OQ�E(�/�p�C�;D��11��Ht�:�������]�Tn���/**b,8	U���JJJ4����b#(s��yÆV/ȸq�,�eaC��֭4�+�u(pD!j���3�������Ȣ
��7�E�/��r���HKiR�HD?�޸J/�6صkWnnnV��q�S�z5N|:�A��_q��vȐ3�6Z(gL۴����"�� �����+W*��m+�]w�u��/���]`�I��k2g��|�=iŊ�4D�@[�HV�����ϗA�ݻw�D����(v �?��U�!�R_�Wx�,V��M'���NH�`HaQ��жm�"##�f���0.}Ɉ����d��8�Vu02ڠ?��QCNN��[2##�[$GV�\"�6p�Ad�{�w 
�AҀ�Q*�MOh�zIJ�z�����������'�t�u��V\xH\DXQ	'@�Y6a�O9Ȇh��>]9�%�@QQ��S�޽��#��ˊe�=Q�R�B�6m����Og�ޝe�"0r:�΀(D!���~��{LL̈#���l��"��%��~��X�p�С�����(�ʔ)S`Z��Ysd�	��ж�_��Q}��z5X�,pp�hSY&/ΘҀ���1-<���2���.����ϟ� K�9s&W��jzZ��\��'5x(�R���/�6�O�X� �7�v����A�7�	��2��pw���>|�-� mCԀBԀ�0���0����-��Hj(,,��0Ʋ�b����&'M�`� c�Q��x�oϞ=ǌ����]������e�8��!�>g@Ԁ���LM�@GNm0o`�I� � ����������u�f#f,����L�/5&Px"���%�%""B��L���.6�A|���������f_c��β�~e�\�/r(pD!j���3��!&&����㓒�


�0[�s�(j߷oT�;��%�b�wׯ_O��6R��+������=�����,xr�ٜ8��AAd��'���Z2(�<�4 j@�LQ��6�7��-I�@�ڻwoVV֯~�+�/4�*��&�����]�e!��JCh��r��L���˞ *..�����βE(�ϟ�L��Q��5(B`T����c�X��I汲������������<99YfA0�����<v�]�l��������&�a������v������ԟ�Fܯϥ�p�:�Q��Vi��d
J��>Es��U߮�������Tһwo.EVV�b��(�b� ��F�;)\�2�.�~�05;��WYY�'*))I�/��;�:����a,U�k@ԀBԀҷ��_�������|�΢v�MMM������'��,Y�t�R���t�r0M�U05�D����x���'®���j��V�dSQ>w��4v��4��3 j@���m�`8�@8�4���������]G�ٺu�o������'?�ť �3��Vgt��4ي��~ 7Y�k׮��]UU�BQI�o߾�Z�r��c�x{(7�0]̝��d́�`��jO�}�_��5�r>��3 
QC��4ps��ϢdP�۳�A��g�2�mۦ�td�<y2�j�pL�My�|'Ny.ї�t�N,р���dZhV2�-/�S���.6��fU��2����cǎ�̸e˖�˗Ϛ5kҤI�����Հ6�K>qQ��1�X5�7��= 7���e�:""±�}!h�"����n{�l<ܺK�,�;v�ȑA��C�l�5C�5ø��l���\�/+�%�ug5j��5 j@!j@��,65X�@Q�� |�X�N��4L� ��A����l���a�f�My:��H�����=C�FԀByŴP�������p �5Ĭ
�@�Cm���&J���rrr�����C�1c��= �>]��_�]�������r������5���ᣦ���˗ϙ3'11Q�n������b���F����
ϻszz�N_�cwV�©�ʐܺ�P�P:���Q������"jP��@k�����6q��i�H&M�D��9��qe	��A}2��/���Xʖ0��+����� ̭a'처4��e�ʘ4΁cD�?���W#22��Gd.	;��gP���ÏN~q�e;w��^�U'�1Ap�a��# xv^ZZ�bŊ��D�e4���=��8�؁�t���wgRXL�/��;�n�y��q!1>��3 
Q�M�pU��Dڰe��Ă��h|6̯��%%%���jv1��c�n��0�ې3 j@�9A��n��<[U�o��T(�8Е1Y���VP��.�䡠������l��5���Xr���x�ٲ3Z�n�Ϛ�A3�HUU\Ɣ�����@Y-���2eD�gOUVV��e绳�QZ(D�Q�H�a���k&���c��Ĉ��`�8p`I��f���A@d}���$6O��Q
�9�S�F\D�]�Nl�H�9Ь
�9�؁��@�r�Jo]��K�~m��	
��U��NjB�@~_�Y�*����8S)�	�&ܽ5���@��	j�Q�}��7��A����Fou猌����,[쒠6�Q
Qʋ�A�,�:��E��h[�7--MQi077�l�i`-j����h�/����b��n����gNh��ᘹ!p`S*� �9��Ad;�5�[��tM�$�FWۨ����޻ �Uԋ�<D@/T���Eq�u�L�U�CH�"Z@�wEX,�D�"���U ��O!�U�1�*��a����c	���WH����c#��$�$��O�����}zΜ�=g����3������~N��_~���uuu���J�CuTT92�!�pP�U�M��Tw:th�}����i��{���7�4 � Ū���#�Q�~���!ŭ��[o�F?��ߴ�j�A|����?���t��В��8�w݈#��8q����p��L�ݗn"E=�P 	'|���$�9ȅ�T�9�]��B!��X��X@!Ro������ohh�J466�΢��Y\�R5$���Z���<�̤x���f"UÊ+P�j�UC�m�vZ,(��M5h;`�����J�6� u�i���Ǜ��C����!1� ��p�zC�p�VU���v�$C�:<���ɶϣ�>�7
F2Ū�7�|�N��y>�O��ۦ���v�ZTC)�!@�^��y��ɩ��6s���x�-���T�,��l����d��o�QU/��B���бqov��|��q���Q N5�!T8h�b�;��d�ƍ�l��=�����S5�x�H=�쳎e>EJqx��A,Y������(��_5�	��ŦO��lw:thj���
]}�j T�b�O�`���7QmÍ7�\xÇ��;�Ν+w��8qbh�̍�<���� *?����.�֦����J.�М��Ԓ����~�������L�6mj?�v���0�ߢ��;T�h�D��,�	f�\~��i>qG5HqRo���8�@5��T�Vٯ�s���Z�x�l;��v"�^�)�B�峟�l�}p[TC5�[� �d�������jP�Q�L�0A�Oeq�L��pH��<N���2É҅��98��YFR.��{e�$�����7L��A�T��@5�H�ADG�f�ڵC��ED�2�g-�v��tV�Z%.9qv�� �:P�ܯ��o�Y<�N�����Q�j�dU��mP�������T�-�1N[�l�=��3a�s���Q��!�� �f��`@���	k�'��I��
U88ڡ���o��UC\�F&_��M(��qA�g���ק�l�,H�2VO�� �=P��+HE+��'TC-������s����oP �jD586��>Ր-�@�B5 �d8᳹��f���L�`j��I�.��68�!���S�j��wi+��r�؂��֖�Snoo��g���o��'�B�J�jV5�
5���R5PPc0�(� `����|VD���|�ZV �`8Q>���lS�<9�!�6��"�3��2��)נ��x���_|�E[D���į��|�ىCr��y��7m�'�50j�5��X�#.$��f��j �0�g~�jB�CQ��&l/U�m�U�$� ���ᄏp�t>S�A��`E�����Bny��x뭷n��&[P�s��
q\<��u��8S��	T�!���-�D�����ؾ���`��v��K�sp���@��`�I�PP��	wY]S88d��9h��f�MQWWǗL��z��݇B��]]]Æ��%�ϧ�Lm�����٩��0��`��!��y��n_R��P���G8�����0_�Y�� �j �n��3��g9�&d�P��)�j�8�1UC�>fqȠb����mA��x��惂?����� �#OLv�=7�l��Ca�kI��Jn_�mPU�"�Dj۴�b̓�3P� � '��spk�H� K��6�5����l�P���&6�T���/�ť��y`O����vl\p��u�d�mJChAH���jM5466��řg�9P;�r[TC��m�e�n�9�!TAh?�<� � 'J%:U8��A�mr[��8d�h���(jbêU���¸��wT�|���ԥ�4�z�6U��*lg�����)U\Ee�)��"�j�6؜����=��D}��l��u���Dl����6'od6�,��i�C�bdq�Њj}�{�������:����QM�:uݺu��	۔
B�Ll�F���WQ��>���-��ZUC�c����.;�����9��[' �N$�4۠&��mP�Y�l�Tm����L�Ԋ�r�g�a�K[[[�O-��ێgذa�҉Ѝ'�Ҁj�Q��w��]p!�l?�j T;���~���:�d0=�' P�p�L�!r�
uz�j���m�Ć�Q�&6�*6H��.�&6�\������
ׇ��x�b�d0�A���Ui`J�a�s�Lgg���Ie
50� TC���p��bk6���	 T0���s���2
�f����'F�"'6��H�Ll��(��۬rAccc%O����v$���w�)�g��ΔT��c��O~��|�Ơ � ��<�C�e�4���� T0�����[Gn��,�\�/�x12��	�?�V��>dWWװa�l��K������;;;�j��g0�]_ϔ�W�p���YE�`�HP[8�6�E&w���
� � '�i���(D�WTˈL���qGD�?�e���Os��9s��t"�����-�Ҁj�g��R����VN�	]�S�B�4��T���Q.�46[��}���pPm��=4�-�e�����2��""��Q�"U�Q�,��.Hg�9����r�D�Bg�k�!Sj\5���َ|Ȑ!��*~���@5 �TC�덋�NJ�ԸjMl�j��}���8����CX���VC#���F,�Y��U�D��.�b�
u�	�D��$\�===�������I���r̍���I�i7.6ڍv�e��غ'���Q��(��VC#t7��h������_����h�K'��$��vT��DØ1cse�=Z�|�p�-�qRfڍ��v�� j\5��FLl�5³�>�h���vҺ�"b.��E�e�h�g����2dȐ��.swKY��\:A5HT������Kk͚5����{���     ���m�l� 2��/���S�6ċHd�Nm+�ТK�,IOg�?��DC��	�A֬jp��̝;W]�#g��S%WO�     �`�mm�,�Ad�k׮u,��6�o��h��7�tSz�\�yuM}�X:�j�����ƍ.���RC���U[q[    T��Ć ��5B0]��_t4T.��Dd��(B+vڊ6H۰v��%K�<��3���������,0x��O<�D[(?���=���7�\~��\�����Z)H5+<C��	�Aֲjp���q��֭���_�     ����`k� }֬Y��bC�r,�0�6��!���f?"/[�vmw?]��<��K��/����N�n���OY�OP��dV��	TC��aȐ!�W�6�[��2    P���=���r�E�Q:�6`J���.�`�r�@8`m?���R�4i������D�O𶡒A��-i{ ͔��T�"��/����W�E9��L!Q    �j𜱯f��F�X�Y�l�w=�uYF���JD:l�:�A:�����F����5���@2��5�,��YՐ���Z����[�86���bn�    �j(jƾ��]�Ć���!C�8�*��U�cE�mP�D��AsR;V�X�s���o[� �G)4� �M�[N�Y!� k\5���E^~�gж2�u?�O�{1�E    @55�����A}H�i�\�2�6��yҽr��!����)�s��!�sǊ���R,H�a��~���)��ĕ���y���/�J�[�x}Qn�    �j(jb���dV+B�b�
�m477��%X�Aې"�6��R8��A�z"@W��&ܞA��πjhkk�\4xq��U9�V&U_TV��    h����N\��/����>�����B��'65���9H�f����'�P݂fT�P�g`�D������$��D�����*,��    �!��ۉ�E������m`1E�lC��@8���A���������O~�a?�}6��!l�&(�Pk�Aĺ����b6l�ʕ+e�Q�38�NT�Jw@    @5ě�o;� ���բ��A 2�7�.�iT�9�_���/x�M
�ݤa��πj0iii�Y1!���:;;�M��j�l<    ���Nl���LcC�6����O�l�\.���M�̢6�*�s��A�v��b��lV��|D���!�3�)!��*U���d��G?Z�n���ڒ��o��    P���N\n�����چ�����?ߧD�@&X�m�s��!�O�S�����J� ���� s@m2��30��ZU��~ss��d<x�����j�A+i�h�-S�    �!�2
ۉ�"�j��D��D��v�کS�z6�HIXO�o�̺��K�^|�ŏ?��&4� ��Yg�U�5�ǪbA��0Hɠf�x� �Y����\����Y�A���~���3�P��Z)HG���me�    P�RZۉ�e5 �m���������g]]]KK�!�mxꩧ�.[R4{��o�Gu�<�0Ż�y�-��o(�&d&��o�M� �E>⯯�onn��v�����'��劺��d�H� KA��nY���    @5����N\dLr~~h�Hu%�� ^x�����VR�a��#F���p�С"@rI�tR;z�x��m�ݶMA��4�d�&3�=Cu�q�����Mh������$*��X`lg�f����zmw�)1�    P�RZۉ�A���@+i�E-�@8��چ���A2r�H� �߱����g��?�䓥X����_2Ԏg466�4o.��www����c"����MMM��4�?���^{M|3��AցT=���� �h@5     ��L�A����m������7�\�]*�Јf�����A2a���Ti�S)W����^P�Kh���=CKKK����r�������������D�,v����X�x���3��y�J.�@5     ����P�f��A�� m��V�N��Y�AR__���^�^z�ɓ'�n&Lص�^��~��+��;��=�)��'T2Ԧg�n�_;�|hnnf>�O~(�{L�n����ŧ��+�-H�?��@2�NfP=��o��3�     Ր	�`;q�������m�v�\׏�2֬Ys�u��h����|>_S�!^�=�6���Q�F�r�>|�������)�IQWW��O��B"�K`$l�����)���"܈��x�bq�d�3�/�3h�R�P    �jH\5���Aݓ¶�B$˖-;����eU"3�M3aT&N��[AĨ���Tł�l���&3T�3����O�4��W_���=�A�r_K�g��    @5�hl'<7m���B�"kpۆ@8<��c�C@ccc[[[YK�W�7���RJ�9l��W` Z[[KéS�������$C-x�Z�z;v�9s�	�dp{�`�D�=�    P�m���� ��6��Ԧ7-ZT�p8��H�ʽc`��B�%�����~��ѣEtD^v�5ה~�1����%�h����HEv����w�yUiV�^*|&3d�3�     Ր�XZ�ݶ!XL����d�C@]]��10��AV�/Q/H� �tժU�a�С˖-K��Ѵ��P�P#�A7rً�8E2�f?�=���w�-��3��L�	�a_{���apKO� �8���    @5d]5�؆�B��6������+"s)v�
�yv	~��h+��"nAr�y�͛7O�wo�g������M��ojd2Csssd�566��#�U�V-X���;���w��f� �m�ر3f�X�lYWWW�~��%L�{2�O�
_c�    Ր�XZ���mpOo"��3gN��-�����e�~AQ�l���&��'kT,���^Zc �b�aĈ{=�W�Lf\{���*t��p��|pʔ)�w�i��6�n�������c����+]���A�]�!�Z4�6πj     TC9T�i��f���p�̲e�&M���'�e�П�|�;mmmQL�8�2�#BY�!pM���gPBW�����/K� ��~����wĂ�,�4�`9�!t�D�d�LxT    �K�A�iJ��`
��C�㈬'مYa�ر"�|�7<��wtt��W���O�^�nA���L̘1C���6��0
"`�ҥ���v`�6z�����b%�m2�Y�!U��     ��r��mC�pЊFj�A�E�&M���`����^{�c�=��o8R���S����2�\n_MR�dQqt���!���R?Q=U/��A���-�(j2�Y2��     �����bxj�������\U!���_~yƌcǎ����r�E���)����}�7J�ѣ�I�IѼ��Ap��/[��,h v-mWy���B�\��C]��8U�j<%�m2�m�DJ<���{�_����W�    Ր~� m�*T�����#�]*B'9�i��/����^{����1p�������83f�(E����%��ۋM�DXCK&j+|�a!4l�L"����a�k%���d�VL�;MDz��~=B��A�s    TCm��P�`[La����IfZ�=�_�p�H����ڴ�����������S�r����j\2������b+��~��˗/�$�;g��΁���E�5��Տ0�s�~܆!R2�ng��������W���>��   TC�hlll�c;q�K.ُ��B��)�]*�I�s0�:h��e�<��O�4I$ݕ��X��cǺ+�GV�}�mf�!|ʜ9sbLoY�ȵE�]k%���}���-<u�� ��d���2mW�`�7�|�;�����~:::L�`��0��C%Che��{TC%UC��)�   PY��U�>\s�5�b
G��pP�F�Nr��jS;8̃Z;1���p������g �H��ߏ��3fo��S��6������So[��5k�86#�t������"�U�J"��u�]'ZX��}Ԝ=������?��|�I'��ٳ�`�d�)���ʫ�9�s�9�   ��<9<�6Y�h��V�m=�M8��*�J�c�H�Z(��lx�����X94�4'T8���+").%���������Qκ^g!Υą�=_}�U�d�UMTsv=b�����v��������xB��i��%�F2�V5��A�s    TC:�� 7�;�v�0�S؄�,iNr0�9شC�y(j��D���ਸ਼�%���Д�]Z3A� �CSSS[[�xϬ,�G+�9��sR2�֖K��l�d����m!���/'؝_��Ѓ|o?àma��)���4��   �jd�����"m�!�G4�����p�v5�����MJ,�_�oM>�Jk��AV��4iR�����������%�ϋ��+\�8q<�RwT )�b�d�ed�͙���Zڮ�A�������	~�����M/�C��6ɐ������9|��_�1   �PMk(/^�3�c=�9�A��MrP�9�jm��C>8���ó���2�Qm��ٷ��[-�)'9h3�T�kI��Sr����E�/�������-� ���m��K����Æ�3gΚ5k�ڏZMS2����;;v�(�[n�E�8y�z�fJ�i���t��   ��r�H"�4!tzCQ��6����u�sl�zn#��"�*h�m+#��C+�)�jBKk���@��@DH���[숟�/.�L%�ưh�"�X�V��&B�&ʜ���q[���:+�����PR=�P��0U&P�W�s�Md�    �a@�P��/x7�mЦ7�����Bu���mB�u���[�V��J�����ce�So[i�H�@��1v���{LV���A|C%C� ��kl7p[��w�]�)�|�ɦXPR��aЦ1���!�AU_��s    TC��P����7���ppLrp8M;����cc�Z�Ѷ2½���;�eB��Z�A�Ȋ,{ҤI���gj�w����k5àI[�GM2�h��?ji�O��Z����7��0݂M/��!tCv%��
��W�r��g3�   TC��P�K�=��Y4�tjnef֚v�f;�u��[�8�A(���m+��Sm���[�45��/l����.]�tƌcǎM��d�8���L��l�2u�Ruw�Й6ɠ�d�m����&;"-����Klq����K��0T�d@5T�{.�   Pi^CQ__o{������!����?���a�umk ��Y�]m/��w��1��V�A��S&�]��� �?��-
N�4EIu2�M28�v>"�)��~{)m2|�pS}���P��0�!P8    TCe�P��'�m�C8D:���Z]�Z1ϱo`�����A@d%Ǽz��o�a��,���\mPS;���ˏ=����EΞ~� ݂8�W^yE���L�`�.�Imń�\"rk|,D��P�q�6���M/k�+P�    TCe�P�l\�#l�B���\����y�}ͭc`��V�1����ڞ�ٷ�B7�����@��Gs�vtvv.\�����y�7�����N�0iҤ3f��z�7�C��`9�A~tK9�A���B���v"-D)k(�����L�PM�P    TC%�P8VOD
�b'9h���n��u`)�;�Zr��-�?�vl���h�#�[��M;8�C � �ҏ����O��P��x��̓z�7ćjG�d��0��l�A]1�-�0%�-s��-"D;�k�#F8Ă�B�BUNc@5P    �����x��^=Q�p�qn��U�s�����!hhZ�߭lS�#�t��j�g8l�{����H���S>hBea�CP	}g� �c�f/hzA5�4�К�d��dpeL݅�����u�'��B�z�����.   PE!Ҋx��z"�p�9�v5f��B�K ����\���>�m�����#m�!�<h���>.�������s�:��6���\�_2D���%"F��;�\��S,��B�S5@R�{��X"�a    TÀ���Xl#�z�|�A[��u`��a��o[�9e����&~��^��7�m?�_�υa�3&T;��A��
���!8��jT�`�^ps�[2���1C<1mڴb��СC#?ho�j�iV⭾�կ��Ъ   �j����'����98���<��to ���V���+���F��N��oL��y��lۜ�?8DDQ�o�}��
�[��m��������d���(�icҤIŊ�������   ��fE���:s��O��]e#�r���Qn!�9�
��˗'�ZZZ�$}����C��B������ꧯW��i��a0�1�d(�E��⥗^�-�2����sΡ   �Pk(Y=Q�p}��_7����a��ċ����C�СC����A�.���	���p��HB�G�,M,D��aЦ1h5J����P�O��Mqm PR   @5T�����
R���c��]�7/��)��ͦPOp�ĉI]�g�u��+3�g?��C�K�|Í���z�4��b�d(k
o^]]]��<y2Ր~� ^���|�    ��*^C!��
^���o�O��ī�%V�X�����[Wȴ}�B��&���� �{��4��6��B%��*&���y4��#P�U�a8��i(   @5T��\.7�YzݼʌOi�d��{
���P���;�^���ǔ���Ʀ(l��}����*��T�B�^PC%C@SS�O4�����t�   �jjEsssJ8���壒�����k�)��#��oݏL�M��SA�\D$�j�y6�`N`�1�\|>�Ц�&��!U�����6   TC�����r��KVD��܊��<�E��~���/���e�n�U>�
"TD�{a�Z)��	���6�!����5��@5�D5`    �x��b`WOTF>���=w��d�􋿧�'��e�n�U>�
"TD��|[�s�y>z�f�%<�P�z�     ��4��H���*�4�����K��G�)2q���P((�y�6��N�����#Bł�8����!���s�'P    �jH��Ԯ� �x��R���s��x��N�|0��E��nA��b�O��0i��k(X=�j     TCep,����	0��H�K�������K�&4��10�v�A�[��C:%��
q��T    �*@[[��īc�D�{ŨQ�Df��@l�A�6�#%l��L�����c�,"�P466�P    �j��B�v⬞�<�45�6m�Ⱦ��aB��[DK�;�Ǡ�v
T�a�I�Y=�j     TC%�ٯX���{��Ǝ���p�W���Y�~=�F�����dÆZJ���0�w���o���AF���tgT     �������~�s�����Gy�%�̛7O���#�Dnij2b�-� �>;�ˏ��Cu���0tgT    �Ґ�L�:����l��?������v�PL�>=ȸm�N�*���uY�tgT    �R��̝;���|��p�G^v�e������5�6m
M��D��@yT{�Н�     ��ؼ��;�\���8�S�o�NR�k(�MN����H�a�Y�tgT    ��Cgg�	'��H�455��T���MN�ɞ�S�!US@�Ψ    @58�B�S��TRr�1�l޼�$[�|}69ݛz�;�tgT    �����:�69��x�	ҐQ__��`�Dl�
tgT    @-��^x���N�Y=�З_~�L$+�����5t�D�`�Ψ    �����}�K_*Sˌ9�L���P��� �3�    ��U��?^��Y�h�Hլ�(q�НQ �`�n4Z�v�>�����P�a۶m������8Æ۽{7�H&�\CQ��@wF5 �Hah7ڍv�� ���L�R��Y�l�H&�\C���M+ѝij�0�j��H�h7ڍv@588��*�>s��!�
�5uuu�ݙ���o�Q�~Ǵ��F��n ��HT�������G��cESS�Cw�;3���   c H�Т��/��c��͕i���F������V>��}��tg��j   n������ի+�V�����.�
{��]�bŽ��{�7�;����+���~�zڇ�Lwf��  ��-��꫕i�K.�����{������}�s�8y�"����c�30� T  �~ ���Z��2m��o}�K��S�w�q�=������i7�30� T  �~ ���ݕi�q���]�Z�0w���������#����Z[[�[��ʠ;3� �  ��Z���;wz�h�n�����;��r��{�)�l߾�Ƥ;�E�  ����E����
�լY��.J���'�pB"�eL�30�`<   ��ZH����
�Ղ�.J�B�S��TR�=�c6o�L�ҝo �  ����B�t��
��ƍ�.JW_}u�!>��x�	���x   �~ ���cǖ�����
��R�/�p��'�C=��_�y�Ό7��   p�`h���[WWW�V:�����}����޽{���/�)�#G����Ό7��   p�`h!���{��J<� �B����/k�X�h�Lwf��  �[? C��{��˿�K�Mt�9�w�[(=l۶�ӟ�tY�Űa�v��MSӝo �  ������롇�T�r�!�Ǐ߾};_A�bʔ)�˖-���Ό7��   p�`h!�3g��)i����|R�y�W��!.$����x   �~ �s��=�#Jl�#�<r���|���A�U�k�v�m45ݙ�0   n� -$�?��'?����r�'._��o��y���t���FZ���x   �~ �*�����rK���ѣ[[[w����N:Y�zue�Ʒ��mZ���x   �~ ��<��3�_~���h���>zܸq�>�,�6)��W_�L׸�Khm�3�`<   ��Z8X�f̈́	ƌ3lذ��:����1�s�I']x�3g�����{&�Z��2]�[���Mwf��  �[? C�z���+�5ƍGk�`<   ��Z@ճs��C=�]�n����0 ��uǙ_�?��w��Z(_ ��bFm|�[?0� H_��+�5f͚ES�`< i`��M�hT���C������+�5,X@S�`< ����9��;g,y~�?��Հj@5 �~`h��K�V�klܸ����x 2��?c.����T���C�b;vlY��W\A#�`< YT���W��6WX�P��Z Ħ������L�������id`�� m�a�?�s�纟O�5��BU�&Ր�+<��~`h0��{�e�<� ��7�� d%����ѵ�Ϗ���t������>@5�P��Z��w�}���^[�l�y�9s�<��Ï>��SO=%�}ǎ|�d��{��˿�K�=�s��L�ҝo ��\"���Sن??҆j@5��[?0�(�-[�,X�`��ٷ�r�����=��#F��Gu���n�#�8��c�=��S/�被����o�˺u�H<S�_���C=4��p�!��kf���4,ݙ�0��&b�m���Q�Tp���صk׼y����}��M��t�e��<�,LA|��w���)
���U��8gΜC9$�@744p��;{��}衇�n;u�ԁ��ks���ǗO�$b}|�Ml����c����<�\$���w�/;{{K?/�&��;�_yM�o���W:������Dՠ�@p���W;N�'��3āi��E8Dp���QF5� Ր!fϞ-҇
�ՙg���/��)6l�0lذ�Dd��m�Ν{�G��#�<r���)?�T%�t�������T��� ���t��
D&(rCw�I��,��_��1�u�؃�Ϗ���}��2���D#�7�]����"�H�c0w#�\�bkL��5l/pD_jG�ZO�"Z)��?�3�Aـ�T0������F��p��u�Y���ˊg	iu+>�����'c���O\�<�[��-!�;�5��s�-2�*P"��LTE^l˯�?�x�C�c�����;�?��(4��-�j���c�?򙐰����)>ѡ�b��??��ĵ�
�)FĉD6��P�j@5 Ì4�q�Ɖ'w�q�n��vڬY�đ��3�L�R�_������rK��a���"�ݵkWF=C��Z���T��� jG5�"+?�ٱ���vx�m=�m��"=�|�?rOf(j�@�����y�╥۪�6�P�0#��ر�g?�ه>����ޡ����x����,�ׯwx�Q�g�y���/?����;��Ǎ���f�ҙ�ҝK�W\q��JFV.��� �@5hY�-A�2�`b�\\,����BˎEr*�_�ⷂ��A�39�=�7=�8�%�/���k��j�,"3n����AE$����=L� �Z+*��	=�
�u���Pş`�TsR��s�3
�K���%N<�<6��P��#%,Y���OLa��t)͞��TC��5k&L�0f��8Guԇ?��c�9椓N���gΜٛD���LH��k�#���>T�j���/�e��� !����Z��J-;�į�/6�܇Nl�):l�#3nmz��J��Ml0��6OÜ���
�yF�o.�Q�A������:�j@5 C�4��ޞ����rȯ���D��3Ԧj�R��ҝ+VT�P�lvi{-�sW��yq�jpL��^�4C{��Xg��zf��v�Y��=��+�`Nl�����9q�_2_*y�q�ۼ2Q�`ȑ
��H�S�z]t�8�J6˞={N?�t3=����w��7g�z�̩��w�q������C��`-��e�Zv�.̨M�]G`�Ga��c(� �KB<3nw"�ͬ0�];q�Z�6�T(؁"�����^�ը� 2��T�r ����7���O|"XWW��_����}��SO=����_����,�΄��\"����~�OX����2� T����-y~�Y����E��;g���3�}ƃx�	���Ff���f�Gf�>o������;#�TF5쌺ǩW�y��4�ȍ*Lw�j@5 C�LL�?���5�ĉ��,{���y����o�m�]R��ҝ�Vi��կVXr�)T"/����D�&�����ߙ�/��M�Plv�%��T
�L��[3�C}̀�ܵ"	�m��&�4�v"�P>i�����X�kpBՀj ��M7ݔ�f���>�aÆ�}۶mO?��̙3�M�v�]w�eݺu���3�.�@5Ԕg����\V}4�ݖ; �}H�j(��u?��X�_��3[������X�߈q�>E8K<�r�u����s��E�j@5 C�a���uuum�SN9eǎ1���w߽��;���;����'�x��zTC�z�,�v��u�D��iӦ͜9�駟޶m�>�i*�@5@�!س�'�S���?S�̗P��BY��_m�A�t;�j�2����;'~�Ūw��P��F��T@
�K�,I�87'�|�s�=��{��mnn4h��%�_��_�g�Ν|[���&�tg�$�/t;��;����\�j T�"���g>��rj�D��Q>��;�MJ5���ZA	����\P16��~���2�T0�pV�\���
�S$�6���ǌsp�%7������?��,z����UY���!��ẟOj6��h��}&��_y�V�!���s=H�ɪ�عs��ϕ#��Z �r�5#;�S��I�����uoo��I�jP�2���k˖-[�p�#�<2gΜ�~��G}ꩧĿ�[��B�P�J�����,
�����Y���!��!2���
<�3�[��Q�&�*��<���j0�����S�Հj �����I/�����ر��������lٲ`��ٳg�r�-�Ǐ?��sG�q���u�Q�5ܡ9�#�=��SO=���.�ꪫn���~xݺu";N� {{{�:�҃�E�P�ݹ�"���>dQ5�36s�8��\����9�OP0����L9|��jj��ÇG��#�<��g��+O��ɮ]��͛���}��h�!4h�e�]���PdA�r{����'��Tuw�*�,w@���Q�`�>�(���6�!2�jЎA;Ȕ������JWZs�C5�#��	$�T �a`U��y��-wb��&{�쩅/�ٳg4��;��3_|���6)�4lذ��\�;'ҝ�/����CvU�V��g�����|�&�*��@���w���"��d
T �!ͪ���_?�CJ�VN<�����W�W_kk�Q�*���:k޼y��Y�H���G>�z��,����s�E�; �}Ȯj0�ȱW�Ƚ�B��w���߿�km�U����gsF�*���;<C��G��5�Ϲ{⥫�*�O�N���x r��$�n��D�V�7�ƍ'N�x�q�`O;��Y�f�#)���H�Z[[3�j��UY���!Ӫ�����"����}
�i)geT���>C���2�A[��Y�S�����mLsfKTC�iT�r���O5|�_Hd��u��nǎ?���>���$��z���ݻw{"I���Q���UY���!Ӫ!�-����H�`�seT�Ⱦ��NQ��+�blB� E���G���2�A����b��T0� 7)�jسg�Ga& �\���1�3g��oK�,9��Sӟ��g����G��o~�jHUw���r�YW�=ږQ�/��囶LVK�KW�����n�Yՠ��>���WO�*BYT
z^ڂ�D�?hnǽ���!�T0� 7)�jؼy��z�z�K�.U_��C��?�Sd�r�]wUӷ\{{{z&3hr�!����#7��y��;��s�?~�e�]6d�������6�!=ݹZ#���>T�j��s}��k��mZ@��+��c���T�ssqv�dV{e��#�K����A{����4߶.��D��D�͙8N�\ۂj@5 Cr�򩆷�~[�;��y�f�e=�Pd�2mڴ���+
ÆKyd/��"q�Ey�@%utt��Ã�;������5
Ր��\����}�@5�>�M����"�_��r5I	�x+).��T1Tb��B5���\�H���ɖ�U�m}�v�"�}g3��J�/�YM!�7R��B��*�a�m�EՀj ��䭷�zh����~�V����,^�V���w��֭[ռ㗿��핑+)fΜY_n����7���O|"����N���2�T�H���o~��3�8#�-Gw~��ƍ�#�N�OН�5����Cu��It��{�!jI�̣�-k���.Oy���&>�����G����Bj9�|�9/�>�M*^/>Q�YG"����+�#��?�L�J�����j��,B����F;HT�r� Ç�i���澾�R>�c��y�SO=e{�~�w����OW�g8���3�k&N���*���_w�k_�]��{|�����RWW�����2��m�=����#�W]uC���S#�&�Z�g�#����z��P�`�8��ReR���M�?�L���V�h�&�I��jp��O���D5��!G��?�ѳ�r�\)e������;�m۶e��o��,���}�c6l���t�hoo��k֬)���ݶ���{�-��>$��lڶ6Ad�����P�*�71m�M5Dn�PT�i�)V5D�p,*(��|�nq��
��5<f;�|6��T>�A��@5��!�O�j����x���.��\Α����g���o�^l"�N9�;v�HB: �A\��墋.*�!��6�|��;�����p�3������G���"5^��r���A��HC��
#����E�����>��k�_ql���q��+F�,�=#?�A	՜�m�a1��`F�㼴�[[��ט8$M��F�~����\��x rd���ƢZOd�"'*�S6n�x�!��ǧ?���}�.]�f(⳴���;��tS/Y�$�u ݜ|���=�\-$��������>^D�����n��?��O�9r$C�  ��!G����c�aCC�{c�/�Pf"7�r�͛7�z꩎�eРA��nv�y�ʕ������~��6m����b�At�ر��r�>B�ۆ�ܧ�z�#��#��ӟZ �}  `< 9j�Ӷ��mmm������я~TMH��_>Տ��СC�5������";;�S�����������
����c~Q�h�Vp�i�͜9S|�#�<2nܸ}�C���u�Y�މ�p�  �����iii�ݘ������g͚up,ƌ����(�-[VM=�.����|����.*3���n{�Ǿ��-��>  0 ��I�P(�I[ZZ<?+F�"��bk��|��z���ë>!-�d(j��� �կ~UlX?��/_���p�  �����)�8d�3V�
u"!��;vl�G�`TÀ��*KH'A�P�)�z�g?���_��p�  �����iooO�m���#w�������B�&⧧�~�#�<R�[#����d;W�r()�Ҡ�\wL�>��I�&�Yr�  ����pg��$�G��}��|��mܸ����׿~�1��<�#����p�7TYZ;��j�D���N\2Ȕ�7E�T�VPыE_=z˖-<� �   � f����9�Fnll��� ٺu��o��y��={�Te�֔j���4)�h�_�������#z��3�1   0 ���RzqHszCQ�aV15������6�n�/�a0   � �0c����O�����i�ZV��|��Li`��  �1  �O�*)ijj�UQ�T�bJ�`   ��aF�YL���H��t��[o=TE̟?���m`J�`   ��aFIdiy]]]OO�YS�� ې�){�`��  �1  �7===%6o}}}�PH6�)Ǚ������%�mH甆���0   c `�&�\.v�655��b���g�fR� &��au����kv?�/Y===����u�
8�
ԇ��0� �   � fTmmm�y�$#�^zi�$~��$H��&����nڴ����(��#~�|Lm{zzb�B)w�U�yw���S5��[�GV�u9��� @5 0�����5�H5�H�j�9��Ƌ��={��T��P�)f���tvv�8N�[���d�� @5 0�(�����HTG�q�ӦM+6y�cp����+�B=��	� �j0���-�nq�u�P�)��[58Z�j(=���/s  T Ì�"���k[w��мF&�A�X1�D՝qI8$���%�\r�.,_�D�#���K��*Ӕ�����p�7۶m+=��s#}�`   ��aF��]RdUE�5�j�������>�DՖ�̜T��%�\"[��I���~E�`�;�A8Dz�/��C��)f���!^X�R�s$f c   ` 3�BKKK���O�DU�S"�Ӏ6\�ϴi����ڵk��&M1b�x�ѣG���\�22Q����:~�� �~����G8�rRْ2���w�L?w�'�ylݺUd�"���A�q����N�WF��!��M�xY�4�Z�5k֨�a��ċ����9^ ?W�"�"�"�%Ɣ; p @5 0�@D��X%�������hd�D���ih�����i��ѣC�g�ԩ�;����+��'�#F�Mm������{w{�B���F���~���'�HF��A�,��k�8���p��jmۋ$�j\��4@^��kmm��"W܄:U5lݺuڴiZ��;����;  ��a��*DBTc�̤���#=C�j��e��Hd�2�ɩ���t5xC����T��"ɕo�0�A����j��}���\�~�m5���Ν;��'��خ�_|��,�38~%�D���`����0޷��j�=��"vZ��?���q��ѣGǋ)w@�� �j `�1���!���Ԫ����G�B!�g�j�$�"=�?ɩ|>.r��D��w�l�"'�����9�hI5�j����UMi��R�W��/� ��f�W_}�Tj�׈�N�:Uı��U���ï@cx��_,��GL���u�U���8q�#�<"b$��:�w�yG�E�z�s�}��X�bҤIj3.Z�(FX�7w  T ÌG5	mmm����M=z�h�8��5�,k�}����o��f%jB$����H���D�*�"U5L�2�|&+�U��`j�МTU�<��SS���0a���o~��;v����va�*��o+0�x����u�	�چ�Li��@�K�1P�� i>A�����Bm.�Nj�����Ć�:&w@�� �j `�1�477�Q>��������ړ'Ovx5Q�D$��D��R�񫮺J&G�f͒�(��|2+lҤIfE�Z����"�۲e��9R������O�z�)5K]�j����õI�l���j�Νk>^�����>s[�2)�R<��&�Ҡz�g�cg�»ﾫ��=���fǜ2e�w�*(��� [[[�bĔ; pg @5 0�pD�W__��ӫٳg�<�@�G<U�-Q]�|y�#�;�C�n�~D�$���80����K.QQʼf��������6���5j��իeN#�A��H���Tm�A�[o�eQʢk��&4��ۆD<��z����j\<��N�0�阑U?B�]uɌ{ō�*�?��; pg @5 0��
��Ӄ�|�y��L��(�|��^-[�C��#v����UW]�f�2W���ՠ�۶m���K����T��������tO�=(V5\|�ű#(~w�~�?>\�R�|hnF0�<qҤI"|ӧOO$�n�pЁ۲�*��K��I�5j��H#�w�I,�z��5k֘I|�\�ϦM�̰rn�  � �ٲ��C��?��Oe>"2G�k촣�*jBd�uu����/���\UUr��8��+W��T�PM�!����!T5�x㍯����u�֩��"S����/�x�~�?��ծG� &��{[L�.i��Șl۶M���0��3{��2�������P]a�i�kƏ/���e��; p� @5 0��===�f=z�H̤FU;�GMT�ɜ�'�����8s���_�_L���Gh��8�3Q����{Æ����<y�
�vD�jFG�/��;��� �"(~4u�T���`=��LϠI��b*q��Gvm)|�ר=:t��|A��'���#�=U� ���Y � fd�R9Z>���v���nݺ�|�ȉ���?�g�2Q��$�f��&�r���5kD"#�+r�`CL��V߶��o���>ZUf!ْ?ܪA}�T�{�#�ZՅ32��Jĕ+W��]��]5%�a�ߔS�*�
�D�5@R��4�&4�؆�4�5�\#_���ivL���  � �0#����N�:U{~j{&�������C_#s�o|���Q�Q�E͒�I�r�q�A�$h�D5��LKG���Q4�h� �S3J�ٷ���M����2#��cA3�f"99iD-�1l�ۭ��3D��%��P�Mya�p��ט�WU�P]a̮	l�5�\�`��`1�Tf��ܦ P 32�,��H�秱������?�]y�>�������\'.�
��`�F�퀩���&M
�7޸j�*�Qʖ�^���|C����x�5�f� ��y�j�� ZO�m��Pՠ�&�T�?��2�b�f���A+w@� �j `��QĘ?X4�СC�~�m��h��#�;�+��R�Ѷ�{���ϟ/�qƌ2QU�$��`d�j�?�:TâE����o�T��m����������7�!CAD5�r��R"����Ҭ��!H�Uհ=2j�Fvޮ�.���l
sƑ�B5`�ӎ�3���{4  ��aFv�M�6��4���=�>�3qM&h	����3�]��|&�V���j�jN�q�FwoZ�n�M5l���_��v��g�/Q�/X�d�֭[T�����j(*�Y��jp����w(m�A��sϙ��n�qWj.��l��L� U�V��=  � �0#��A��K/9�0j�(M5����Ό���������4���z��?���*����%��F&���~�Z�N&5�^�2Q�U3��i:f���n4 g�{-��믿~끈�����~��w�4�(#x�7&��y��A+�YlL��(A캺�ԟ���?}衇T_�~nh�I�u7L�6��A+w@� �j `��i� ��9�ޫ��(dv�&����l�?���}��x��8BuE���D5�DW5䑻kn~�aU5>�ވ`�����O>���2�����?���[��A�ʁ�+�3�2��vwwg�3���Q�j�z���v�m�������&�6�BS�m�T�i��;�ha�ܣ P 3����~���X<�䓱U�����	�����"%ٲe�g��mQ�3WUU�m�h��O�Ѫ�j(
��f;;;e��_�bK?f�_*��������y��UCQ��AH�/���lS5�U8�^�u�j0��ʊ��0�v`ƀ�v��h7 TC5�1�=z�#�<��k����+
/���g�����A �Q���	�K/���@d�*�A�Uh��i�&q<��֮]럨F>�D�/^ُ�ɪ���z������mΜ9fCU�:�!�j�E0��a_ɵ�Bv1U5��}衇~��H�t��'������^�V�mPUC�|S5Ȱr��`�n4�F��n ��W�G�KD�$N�{±�����n��|�кv�ztjR#UY��:&6�KzJ�z�)�������n�[�������?��"�D0�3���g�K��@a��Q�!4��j�tvvJUhF�Vd2�h�S�6��z�j3���@
C��n���j�� ����9R�>yM��������7�|s�~&L�pP}K�Ѭ�gÆYW"/��r���c����G��X�����6m��*6k:�^iSfL���jpG0tG���_� �@����n���j�A� hmmu�n�k"3V�D�?Eu'���ڶ�Y\C����ӉƏ�ͷ�m|"X�dpG��'����Y�f}��<������w�},�"9�#���k(l��S8D�����j�����4 �܉'a����    Pա��p1�w�e�̙1l���?2?�OQC��o�����g�ԩ�^C����ى�}��Ї�m(Jm�����%�"�}W�g�T�ܶ!r�K�j�Y.a����jX�j���6�D5     ���T�`ԨQ��<���)W�5�L-������;�o�a[�jA�T�L���jܫ��j��h�!�`��
3��m0#ksR5���$bl�laeV    ��U5I�Ha�%"׮]����gⱟ�ׂj�,{X5��3�U��^5��!m�;     ���\C0��w�	JD��������м&FF�!��Y
Re��Վ����ԌHWW�7���DP���3���e�3�snB�^Cak�s���ۂ�Ο?�X���Z@���    P�����&6,X���_� u[��~rZlF�نLT��,i���2�R"�ȃo��x��������������u�%�q�ihXC5�hn�    ��j��<B�:u�#^��~{���L��Lj�t���4+������e��l4�NIEP��Z=���SS"i���1B��L��� �-    ���&6���K.q���'�t?KM$���kzDKg2��*��f͚�i����"�.[�i���+eLm��9�c҂�b;&�E    @5T�#T�׈$bĈ���[���IMQ��$픫�bKAj���̴�;c!^B*po�:t�Ь{�^S5����_��-��cr[    TC�=BUKD�7�ؾ}{����~QY����'i��,d�R�*jfj���B�XTɅ�W���Wj1����9��p)*p��wLn�    �j��G�f^��/87r�H�������\���4�!F)HM5�d��>/�-$>�gtuu�T�4�78�jF6v��D$��1Q    �j�A�p�}�9b7aR������٭9�!m�!^)HS5����p����[x?.��a���)߮���AZd��:����	a�Zn�    �j���Ƒ�\s�5��͝;זԨٍ�:�Dw:�Z���Jgg�#3�^�"�dSQ�PŪ�ma�q1�ۏ�;&�E    @5Tw^#9����o�a>юW]�?�q��cY�����T���ih}�.�N������&<#[�bG���7��A5     ��F�5�ٺu��D�{����<-�����L���������TC��S�g�1���<=CU��^��4�G$;;(vX�7qwLn�    �j��F�6� �5j�Ν�s�x錛$�3�s�����R�7tuu�F�'9MC���ժ<{�-�����(��M��P    �j��&4�immu��ꫯ.e��g:���/�N$+Yj>�oll��LN�>�`.\�>�G}�<�����+��#q�M�4�-    ���R�I�&9By�}���!2�qgU��1�\�*ڧ��m�ȑ1TC)ɩǢf�8?2���a��ɵ��{��U��f��蘨    @5�B^��6�G�vDsŊ�r�t�'�	}�yR
JKKKl�`KNc�ɆOI���vT�O��L�+P�a��Mq��    �P;�M�ݼ�����6l(e�A9ȴg�r9�����`�ϣ���,Z��PJ�Ld��;�{�$�1�-    ��S�M�69:bĈ]�v�HN�I�D&�Yjww����n�QCC�#����x�č7:����W�g���/vL㽳<Gn�    �j���f��Ŏ�^z饱k��,�SSSh#766��߱B��ܱB�c��i�·iӦ�<��3��#�w�PO��"    �j6��>}�#�ӦMKs.����l_��������X���#9-e��!��!2�%��rtLn�    �j�����K/uDv����S�mT�ڶuuu��/
mmm�\.T5$���Α�a��ѻw��0��S���$���    �PˈLpĈ���t�b�*�}744�6��>�6��i�����������<H<��>��_�    ��ǝ3:4x0��
[Êf������M��r[    T��yw�Hţ��%�Is�\vO���Ͻw'��-    �Iq@�lŖ����e�3���� �     ��A�����ぢ���֘�B� �     TC��H�ܙV򧩩)���򨫫+S
@5     ��K�Pp��?����I�m-��ގg T     ��i�̐����ݖ�� �     �j MV����
����zY,�i;<�     � �������D
����2����<�     � ������y�Ȇm��\.�g T     ��fq6$�t���B-[��=�	P    �j����8l�H�)i⨫���;"=C�� T    � �KD644�D�Iz��i� �     �(+��͎苟�DǪ����Bx@5     �Ľ�!�g�$����*��B�!R��     � ��{C
JD��LSS���     �j w�H�#JD
�쪘H����B/ T    � Y���#����5�>�*�\.�!�2 �     ���l��T���B����� �     T�p�|tww�ڤP(dt�
�P    �j�
Y"R$�Icccj��]� �    @5@�(
����!E__��AR�k�P    �j���8��DdMmHa+w r��z���.r@5     �R�_�y�@��<��91 �3Ԛ)T    � =�KD����B#
[��l�P    �j���.��J	b� 4��� �     �j�bqTD<�6JD�r��sOۤ�ȭC��j     Td�Y��ī8�u��,
x@5     � ��U����ZE�N9�3T�T    � �477;.�t��Pz
o�Α�"���� �    P�Ql{>�-�.�\���d� �P    �j��?�w'�U����JJ�p� �     ���%"��t
���4����p��:x@5     ��E>�w\!U��AKKK�	�r9<�     PP�4<�:JD�r�г�g T     �*�����e�캻�m�V(���Uc}N@5     �j�Ț�))h�l:��Ѐg T     ��D�Pp����4���>�yl"�g T    ���q,48(�%"E�n�'x:mmmx@5     �j[b��ؘ�3jhh=�,w�nd<�     � U�{b�l�P(�Nd��O� �     ��A�%"3������r��ձ�(�     � ����'�q�e�������x@5     �j���ǆ"�O�HG��B��g T     �R�744���mE'*�===x@5     �@��ܜ�����6+�µ&��C��j     T�����K(�%"mS2D�_ɥx@5     ����ސ"�%"<����a�� �     ��A�)s��	�P(lG��ݝϐ�Қ�j     @5@����ʚ[ZZB�3��� P    �j�����渖RUs �˅dKKK>�Q�� �`���L�`����t��������M�F�m��֖����
�
xwi<��a3�F��n47k` ��GW�B��Ѐg `��0��F��n� T��B��.9�R8/�{_�Hϐ����j  ���h7ڍvKg��q#���@M���㸨��ྡ�������G���x�t�

�`$   � `@�e�����V����MzHe�Z�g �H   	 0���q��lnn�̷����g�|�P�OY�H��0   F 0�)v�j#�>.�����?��h���` #  `$ 0 ����Y|%�l�F�ZZZ�=/<0� F  �H �"�vlH���-�O5
��hoo��l���c�O �H   	 ���"mX�0hР��f��ӈ���ʽ�& `$   ��T1"�w\f��?��I$�T���%��&ۀg �H   	 0��r���;��CC�H�#�-��$��dh{e���W�3 `$   ��@"����7����.12IokkK�⯫�kjjR�F���l�{��` #  `$ @�q��?2&��y�W";���$x�k��)�m�3 `$   � `@������}�7pcLP5h�ý4C���;�t�a[[ 0� F  �H �.��^�������vhnn��j�v��Mi�ĳ�% `$   ��@�4��tTu�����jm��&�� 	   # PV"KD�qT<�������F�m��g��0   F 0`�)
��Ū I��2�E��g �H   	 0��������4��HD5h;W��{��0   F 0 =D�iC����j����2�` #  `$ � ��u�]����r���P}{J�` #  `$ � *�{�K7�f�%�����Li�6 `$   � `@%���+Ǆ�xoe��(��� 	   # P
�B)�]JL?�MBKA2$���m �H   	 0��2���{�K����ҿ�R�---��&��	 �H  �b�S������o�D� #`��L�-'l�{�_���,�����!�`��  � � `@�H�􁊶����-������ 0�� d:�u�s�ɿ����_y���B���  (+"�nnnN��)?��#�1����I�0� FPݪA�3������  (7===�������7�������R��Nihhhp| `$ U��?�uG�В	�~�&�ggo/m��@���,�l� �%:����A��H �O5���G�u��s��'�؆{f?HK0 `��&��"�/J5�k.L)\�����1 ` #�����/~z���\:δ]kiL F 0����%2� (��������J\Ёd �H jV5�}�A����e4& # P
��H�K�P�=+��|�d��Li������ 	 �!`��˵�)hL F��b_��u�T��7�r�}Q% ܥ bOihnn�� #`$ �mbCu�-����]k�_bo蹳�7��kjiG�G�me
<���/?78.u`0 <����P(466ƾn����;��*��/�8���Ț� ���In�-�Ջ4Z�[�i���*�!~c��y_'6�C�Jl'C�p�xqB�8�,CH��p��K
\l�=f�_��?�W}��sϽ}{UK�~�KӺ[�����sν瞛n��g���*���],A��@��Ř4Rn��]c���5Fg�3t�jn�Q�_�������so�|�E���(�<���T�B���XA^:���'�|�1 ب��ʺ7��ߧW��T��s�=��#rKк -5�SU�O9oԼ�{\{��rC�'@������O��矿��w<�}�ʢ� GW���������s�Uֽ��������Œ-�Kw��� QC�s5��S���&�5��O>�Ơ�{�W�RA�����kQk�����FUA��w�����585%w��� QC��i!���Fwh o�p�Hc��.~��g��|c(�ס��\��6T�����[��
k�n<S}A�]9A�z^����Z�6�5<���pF?��;K)k0h 40��<��s�������e<d*ȗ��%��X��h	��!xԠV3�f����6*�{�}*���:� �&�s�XAV�^"w9��s�}n�5ˍ�S��|����1 ��y䑊o0����],A��@�<jP+������������̳�V9��s�?o� �UV�ռr��|�a�9�,䍴��Ǡ����)�3ch�6�r�78�L�R�.�����@�`����򎍪�6�xy�/���r0FOTp�I#𪩍����1M����8� SR� ��DQ��S0�=@c 40��=��#�T*����/�[�.�]vw�h]� �]��F�d/�����_���r��1^ç�6����Zߙ�A-�(�M1��
2H��.��YA� O�����;4@���-�����]�]��%@낖 P}Ԡ
�{�q_�
ט2�'@0�y/w>#�P��Aa�ʺ��]�'T5�`D"��Ac 40��<��csss^o��O?=xP`�U��X�.@K ��d��8��V�g�uk/Ƥ���TP�q���(��kRn�d��e]^� h``�x�����g[��>��dGn0к -���\�E��='d��z�kM��?Ȍ��ӍN������	Ʈ�O�h�/F�Pn���j�QC𻚂� @̩S��3-�z�A6���+	 Z�%��������ݙ�O�/c�=�8"x!����3O����5ߕ�e/7jr��@c 40 �;�سg�|�)��%@��P���aL��|�E^�#��4��"o�`�"���t�0N�����zGFJC� ��4��{�=����c�=�&!�O<q�7\#\{��t� ������k��1����?�������T�M5O��4@hU���o�ۛ���������e˖-��uZؐQC�ye��N�N�X����m���aP�:@���G�=�������C�s�]�}}��ʯ\|뭷>���M�38���Z^>к -l����=��E�(��,��k��1`�aL�s�	�q���9W�|� �q�}�]u�U��練n�.g�����}�M7����7UΠ\s�5���uZؐQ���s/KcM)������T�2�(7��f�F�0'y�T�� �����MNƼ��Wl�ꪫ���?g j �����jx�5I�3�A��8!�Q5�Ťue�B����]����C?�@c 40�z��'>q��gaBk�ֱ��_��7��/_t���Νg�����x�g���}���к -lȨ��f��l7&�t�B�s8� G[T�'�x�%_�ˢ�y�����S�f��p_4�� �~^|������-ӃW�������뮻~���5_x���������WVN�v����������{�3���@� Z�%��5�[��`�� GO��Ӎi�r�dBR��Ӕф��$�����q5�� h` ��.��bLO��q�?���Jnx�ԩ�����3�r6<�쎏��k�3(�;��h	`���A�%�Ȣ�dLa��\|*H����>�����e�脠~+��]9Jv�(��aQh���?�%t����;_xᅲ����]��O��O�0g���_|�E^Vк -l��AUǲBY��4��8��Q��@2x���A���o��¸��}-������E���D�1 �o��o��]����v��{�6�q�Y'O�ld�p���i΍7�H� Z�%��5��W="�{�q�*lU]��S������o�uL�3=��C�W�q��7E��O>eT��<ݝ�1�:[w���;����w���Ac ������?��'"��_��jvu�=��y�+�]���A����(ٟ��G������*^�����A�"aT֕-��>��SFD��r�Ś�x�)^�ɵ�ߨ���޼.�@c 40���SA��UݧN��ro�\s�����zE�)"{�[n���K/=r�H2����{��|��W�s�=��ԧ�<�̒�&�@���I�UÖ;g���}�=�)jp��N��)�$���uQk��U!j ��� j��_ܳ�N8p�WT��g�y欳�9;/y��n�mvv��~��2�-[������.@K ;j��w���O�Q�+���s+�5�^��ΰ�)A�i�]9#5�'�(7j2t��4@�ٍ7�����[�ﾚ���n�3?|��_�Z�;��ΡC�Z���/�W�.@K �*Z���r�'�p?��WKe���%y�	!_��B�u���C�j����얠~V�z���Yw��,�3Ab�Eq��`\��7	})w���W4 �H�y晶��N&p�%��pϣ�g�W^y�u��~���w�n�Qh]�� ���>�}+ � �2����������������o������֪5��h	 A�o��w{@c 40�Z���?�;v��"���jg�CC�Ư�}����?�����/�<��Z�% �3n�P�l h�П��:����hm��W�W�����W\Q���ӟ�4� h]�� ���'��9�/��;�& ��� �ꪫ�r�Db��{��g>���e/;]>��SOm߾����S��/h]�� ��g�5n�d�D 4@��{��'����v�w�q���3�8K>������x�@�� �=������^#W�1 @����	^�ꃵ��-������s��Ǐ=Z���駟v��^V4i����h]� ����}�/p�	��Z4@cާ?�i����E��/����g�}�WzО0j���>�b�x����? h	`���x׻�y�Y�@K 40��ַ��ov���5����&g���o��<y��y��|�;��~g���_�z����(�t�M/���~���	\p�$��ZXQ�z�� -�� )��v2���ޟ��g5����������r�-��G}��N;��;�ӽ�K/��+dp��5���L�gV������Zh��w��}z��;�3@K 40�ƻ뮻tǆ/|�5��W�[���GՏ?��cFzp�EY���3��ڵ�+gP������YÁ�F��Z  Z��(CC�N,�ַ�J�{{���8�,g�oy�[�^x��O?]���'����7��28���*�^��G>����@�  �@�n��v'غ����/U�+U_g2��FFFUn�0>>.�����kW����3(��������5e��3�`��Z  �؄2��N>�Wu�ۿ�[���C'�R��.�LF7�|�׮>��E!`�<�������7x퇴40@K  @K 40��|�+zv��֭����^�N�����,/�X׹���e��ǭ���>x�i��|�T�����|Y��'O~$O?r�]w]q�j���g��z��ۇ?�a#jp6|���v�\w�u��/�B� �%  �% ��}lǎ��oCY#)�}��K.�T����>��WVVd���w��(�����Q��Q[[��T��\����o�� �����'jP�znnν�����O?mx��� �,  -�6�/~�:mز����m�ݦ�k�Mz�?��?:�:gxӛ��ӟ��g�|�ΒiC(��?��;s�������뮻NF?�'j���?�vG�r?��r��~��~���3���5����  � h``�x�����ѡ������Ї�|�Iw��[��[[������_�U��H��՛��hqqQ�_G���Q�OsJ&����'?��3�8���׾����O~���A��8Q���\~���W>�����h`��  �� @��|?�O����{�+���^^��3��Ο��������ܽ��kM�������z��?�s�����D���O=����e����}�[ߒ����>g��裏���y��/�C���a$��tF�g� m �  �@������C]u�U��}FV��w���^{�𑗿��H�Y��v^rɥ�_~EG�n��i��lzz����O��vc$����7���?��*�e��༢'1�.���.��Rk��7�7��O'm�'��$m �  �@���&��o~��n;w���|@����D"�^!�駟y���*hge��o��;ܫ�8��^�������lٲ�'jpnT�����4NE�s��d�����8�>��:+�c�T�����#,�-0t����O?���?��Hh`��  �� @��|o���W��hZ�s�}�o�������+�r���������_w�u�_~������=���G?z��w�<yҽ�;��-oykG�.��.�@��^�������ѣ�������|ll�w~�w��o����:j���}02F�Q��Y�꙼��_���Q�:��Dr2�7?��O;#,��o�  � h``ø袷�`a��]w�U�C�:u�k�k8�������z��~��?��T���/8��3ȨA��$#���+��'?����:?ɻ�曝G^����e� GXț_�_��moӿ�Qi�  � h``]�򗿬C�3�8���ߏ��p����[nll�d��p�x�r"'jx�L�?���~bs���uN��t�M:jpV�i�"�=���.r``�	��a�6�� -  -�6���E����N�����zNU��X �6|���-�3�5Ȯ��O�}���<r�X����dr�H��k��V��G>�5�6�� -  -�ֻ��[W��]w]c�
���!�##�^5��3Ȩ���QC��A��Sy��ʄ��y���7�v�ޭ�Q��D�r2=]�:��}�kNf�Dox�����-J�  � X_��w�'�ܧ�߆7;�A>����� Q��K��O���1B�Sy�������otVx�k_�t��ԃjw� �[!oN�GR|��n��
���h	  h	 40�����b���^��/|����я~�ٹǉFGǬ�� �4Ȩ��o�3I��T���8�<]쵯}��������e��w%�����h	  h	 40�a�u�]N���n����ݱ�_�j�Q�3���^�:5��
V����ː��ɓ=���헾���yFWw� oQ!�L���n�N�@�@�  � X�.��9�������	�}�.�T=<j0&j0���.��^���������{�����y�C=�q~�O
7�p�1��Hʍ�i�U�%  �% ������yN��m���	$�S�	\v�e^9�OԠGOȨ�,7�x���g?+S��� |�A��A��[T�`ʴAG�ѱ�h	  h	 40�~=��z������9���������y���'O~��w���O啌�����i��|�ޱ40@K  @K ���&��o~SG������.��2���L�Q�?��?���9�&7�����3�"��'�������ǯy�kn�ᆯ��O�����r>�����t�p���C�����'��� -  -����jg5���?\�sx�������!�o˚�����'�Y����BQ�S�N��s�/���5ic(h`��  �� @�Ž�ޫ��K.����W�򕞞^�fff�G�;P����i�W���6�����A��c��ԓ�c�  � h``�R�E�e˖Ӝbd$�j��ZU͗_~�:���G2m�}i�;j��U��A��?��g��Q�  � h``=zӛ~A���vu>��8hv*E�3��_��W"�5��k�vl>�"x�`��8�;g(7j`�  � h``=��8>�U�������ߪ�N�S��>��3�8�9\k��k���g�5�z�zG�[^:�H� j��Z  Z��m�p�6�uk��ZZ���������*�?����׭�����}�?��Q��6l�7�O<��13��n�����h\7��m�^��-O��.���H������I�?z��?^���c�{�Y{554ɇ�����qݸn� ����V����ʋ��o��o��::v�����}���r������� �?׍��u�%�u���u[��mKQ� s�O�?��g>�K.������x?��p��K�5�4��s5�!庁� ��׍��E�� k��L
+Z+ٰ�)      ���j��`���~	�V.%     Jeew~      h��$                                                                                                                                            T&�J�Zo�۹�     ��Gy��{�={�p=    ��.��j��[o�    ��ժK     @m�4б    �M��]��     �fV�.tl     `ӪG�:6     �9կK�@$21��,\    ���_����ؐ���33���TOvj�睅�6    ���ݥaM:6L���'tŭ�`"���c�    �ڪw��wlH��	�%sȜh�D6�:�<F�     X+���Р��p2��ԃ��R�F�ht��    �jL���tl�9C2sBU��2\�P?5     P+���P��Ԓ�����P�k͞D��oCj�ݦ!?B�     X��Ҡ;6�噄�E�0�S�'3+�Ɠ�䘋�d��Q��Ag�x~W���O8��4�:�61{\��>�Z_=$j0��ov�̍:y    �1ߥ�q�W�����SA&��D���
E��_e���t�z���r$\�E�dΑ�>�hl�'j�?\<��    �L�48N�:U�碧_�~�s��\o��xqh�{�����`�jM��%�3X�N�g���0�O/�m�bs3gH�O��[������t     ʵV]�Ա�P�WW&�� �N2:8O�5�[���ݫ���N�+�DQX
�@N�Sg	c��޽��B�r8���dn,��V     q�ԩ5�j۱A��F��;^ͮt��H�;�?�Y��d	���|_c	&�>��P�s,쭫�ܪ��+4(<;��޽憡�>�ƛ*    PWW^y�Kk��d�?MW��HdJ�gl��u��2?O���z�lퟯ��V^����܇yȲ=0I/�����XɫϬ�Z     mm�4ԼcC��Y�{�32�p�#7��=�g}��A���zJz����a{"�l������n|�(c(     �j�.���`-�+09{�:��AK��*~o8쿕>�xz���ŌG�f��Df܉�����qgQ�P�d��     �j�.5���ߩ  Uz�͜,j�U�����~d 2cݤt�5�}�q�^ZB!>, ֟��ə�LM�b   4F�ti�m�=����+�I�{�2k�C�Ao�����pN���?����n�r�O<�TV�0[��`ݙ�^�ս�  ���`SE^xaM���Ń�^ۨAw*�X(�UŇ�,j����kU6z-�̉Df%{���K j   @�}��M�3<��#�zRz�����H����tI�����ޮ�'?��:`�db=�P��W�(칽��Uxdʺ���a�����6R� ��'���j	����@��%u�)q�[x��3ɅjI,�&VU���Bsm  |4OǆZuip��2$���z}]z��	{<f*�[�e(+jЉA�V�]uV��ѹ������{��Ľ3v�䃀ua<yLv`0k�ГH4��ԁ�#����q����J6�a�\  � ��cC�48&g
_��SK-~�D~��Z&�o�ޮ��F�Zt��Q��s�>��T��p�����[6Y�mkK��(�����4a�`_#Jd��{�a�v&f�7,j`D�ZF�w�  �_3tl�m�w��Ȝ��w��'��
�t4/L�'4Pm˾�c[��ns�?T�ǋ:���	����������c�y3��/�p^t��#�pj��)��1�ic�D�z0�E�pn��Rc��x<��5�-�  �[ێ5�Ґ�P���>Չ�l���'�wa��L0F.����d�����W?�_E�QCˎ���-�{/ȭƦ2����8�=A{�e�v�pN�G�%*����g� ?�Ћ烻�{x��5�HfV�G ��X\D��z��P4�l���r��1|#;3��rjQ��NbařO���.�p�")Z!w��B	���w��5��؏� �麟��u�,�>���L�YblK8��Q��/+Γ�zi⹗F�C�K���DL�
�t��H��G�����LoR�B�x<�g  ��*�`]VutL��#��lS�G��ƀ�{z�&}��
��\LQ�ᔁ�C^[��C�~�éS�?\�����.jh���\q
�j�6���q�Fwf��Gȥ{ D"��~�ϱ���.�*��|�Ɵ�df��υG��u,Y�%E�w�5�4�G�E��\���zF+�M�ebz��&  �����P�.�H"��n������v�c1��}[ZMԠ�޿���9p������p-۷�<Z��4�|4�<Fc����OD<]T	������t�T�qe	'�P{H�=dov��0��?�'pPK(j�4%�qh��o�W�5ܗE�����}0d�y���Q�7J>���^J�},Y�[���G�	@��Y�j�K��@����m���+F�Ð�^�.%��  �N�Uǆ:vi(�'r�M8��t�t������o0>6��=2��W?{��֦~�,^��\��I��	�P$>71sx`�PǾ}������l�1>}8:wT-C��2��|QCdJ�"j�D���Y�tw��&]w�qw�7�k2U��u���y�wߺ����ߵ���vv��K�$���g�
����}��|v��/�CH����=�eL�G�����H������1^=�c|����ݗK?XA&/Tw����Z��W  ���wlh@� ��K����t�j�B%�.���6gC���Fe*w�.ƍ����r��ϿW��<�5,���m'�[+hK����5�<��U�����$����*ѹ��D����ډ>���|iԶ���5�(1;���XϤ�~5   p4�cCú4 �$Q��p8!*߄��W;Q��]\���<�1lɨA�>E��?��$Fc�G���Z�ŵ���A^��|��r��&�Y�N���U�����C[�S2jHx\y=�«;�G  ��ٱ�. *�b��j��?6�H��:���xpl��C�m�&
c�υ��G�oh��ZXw�w�����D�]�Q�Wh`ݰh�� i�K�6��xK���|파���w�+D   �id��4 �8j(��S�-��NF���<��k�:86���.|
^=q��%@��K��K��zQ(��b�ɌZ?�^*���S[�?���c����b�%u5��k��)��v9����^Т=5   T�1N�:ťPY���S&�ZI�=��ѡV(�Y�ʨa 2�_k[KW��~����3'_`F銢�]��D^�W�`�9 WP�P|J�/Ӳ;�(t�Hx5�Kc]A�^�Q��jݳ5   @��[C:6\y�\j G�Bt���ig	r۔�xэ���S�z���:x0�l�����e��o��5s��O����+jP���Sr?}#0	ީc�uO�sz{��G�wN�p�Qä��}5��   j���� �ʨ��=$��'�)��G������u�m����OKX��Aw�PO?[λ�x��;u��'����9bt)Qg�u�`>jX*7j�E�������P�d�   ���@� ��i���۹�p3����
ᑩF-�+����f���$|���J�&��IZ��]�����N:X(�$�:�G���PΤQ2�   ���ul�K�5�'��;v�WO��
�%*��J��ٍA�����5���IZ��O�K&-��T!���l=<zz��sT�>JɨA��%�@�у"j��D   �6��ֱ�. �$j�ţ��W�}�q{�`�(�
��������H"�/c��}>QC�7j�>\x;w�?}�Y�R�+����SK^sh�S��-w�ԗ(����ڭ>J�Q�W�!&�8.��  �*գc] T�����R::S�����|ѽ����"w���_�:��e1H����5�;;~$��*����{u��YA��ٓq�3;v� �Ux
�F"{e��/%���ǋo�!��X¼��z{����[�g    �U��ti �VQ�����w��s��]����.�ݎ�P gS���F2�P;T��ձ'2�P���ϋY��Z;ۑ W��G-mm�1��okS�D>�x�>�j��3mk�8j��U�nǦԱ�WA�9.n�)s���}Kկ�#jW��bр�|v!�ʢg�3�pNO]y��v'f�pn�141�7�	  P��vl�K�5�UQ�o�X(`�o���u}Z2j06t׶e���#�<��v��;����Ν���W5�����\��[W��^K|~����d�9�E�Jf8�GxN=��3h����c��|6  �Rێti P�_�Z�jpb�QZ��16�e�6g�X~�CYQCKq��z_N��5�AI��y�)�F�G��'1�U�Tg�|��~�D-��2]1.�ؔ}�*��z^N�w�PqԠ~�����:m}M�v�7b�L�   P�Zul�K�j��5�QK��x{`����aUw�B��:�����E����Ra��ӱļڳڿ�P-t<H-W���BC�9���dJ�Yp�&���]|����:�ӷ���>�~�o��<��
�1�eQ�SK|~1:wL����h��Fg��GԢ~�?���¡���|.�A���������-���81�N�hv��2�!  ��\ǆ[k��/�b���\�C�9���F    ��p{Ǌ&�D5     ֻ�d�}�F��½,b\    �:�L5 �F��岬9�    �z/i�A.rM��u	2A%     MX�&�+�Ӈ� ���5                                                                                                                                                                        ��$��I'��~^-Ʌ�     �J8��,%3'�Z[.�A��͐<5     P�Ԓ;ap/���ƾD     T�'�����,��'"�#\7     `e�	��[B��5B!�����     @KK"�$�1��݉̊Xy��     ��D�(g )҆�؂�U"��,�h4���c����+�O˭���djQ�6�|I�`9v8Oe��#;r{�R���s}3���ն��E�V������~�{�Y�s��G����zI>k�i'��N���'Ԣ~�    hr>�����a1EdQ��w�u{�
e�f�l�+-���{�IU��LV�u�������i[粰�X4:o}��Os���i/�     hZ^���Dz�P����[|�;��u�ӵ@?��urX�C�7�j��;o�����q�g�~�Wvoh+��&r���9�.���Q�XΙ��$�W��cųq5     �Z4:/Á�GӅS�٩����Z"�)g�}��#w��v��y���Jf���֚��"��57�I<�XV��v��3D��������g|N[]���1�x�     �I��W׳��t����"X���1����v�@Pž���
c�G|"9��x�}�n�eE2u1!{bX��Dz5xI���N�=�    ��5>S��_50Pֶ�H!U����@W��Il����b���je��Z9�5bjA�E5�N0f�y��#vuR�a�ad$Q��^�:���t����C	8Q'     MB����e)�O��i(|Mo)�c����^AŬ	FI���V�o�	��BnX8ϴo��ٙ(��`�!ǘ9�k�
n'
    X�Q���
粶-�Ѷ�a�vc���-$|Jx�n����H"�~�,���ڛ5�h)�z��Q���g��3��`�.�׻v����>ac�a�h2c�s�y�    �9����|�����s���@��9R�^Q�@d��Q�^G���`Խ�:b�;VXϼ�	4     h��A~�^R��t��ϻ+���L���s9�b{�~\tXы�m�h�Q�ذd�=T�cA�\�5     6��?�V�S��bO(��U���*�Zq�~(y>�������~E����F�pDt��� �u��#SzQ�2���L���D    �@���n��<�C�{S�{��o	oT�QQ����SK������#W�ڒ�y�ܩ��u2zM�\��^�"�;�    �5��Y]ؖ���Ɠ����ɔ�r?(�5x�bpr�5���u8G�ր���T5e,;wL��M�     ب��|f�z{���K%n�ܭIB����oFg�8������[�#j���T��:������U?x�3�L�w�����,�O    ��sNo���0۷���^O�k��z�Fɯ�">o�}r,1/w>1s�]zG���$&�|qQ��ǚQx���ٽ7yz^{3ȐDm�^!�1�$Q    `���TpF�SKѹ�ᑩ��Ӈ�E�cS+��D�Xj)[�o�~�����a���� �9l!�kٶM=
�G�9[�]�ݪ��<j���z
�>�zF���XfWw�ޡ>���Q6�Hdbz�Y�515udrfE-���F}���UxfF?�~vT��mP.�%]g��w>�#  �Q������Dz�ݟ���ePPd�v�m+���P�ߺ��Z3)NU��w f�ܨA��=dԠ	��c<8`<_�Evwx j���-�?��Rra�oHray�����~�?x��A��}!-_렦�7pxf��ݑ� �ukR�VҺD珵��y�gJF��AvB��&�=��G�F�d:�*�U����?�58;o|��pz_X���5DfxO�F�������D�5���Nx��,M�o���Г�0Y���QC�@#�/D���K���ɞj��N-��G|�I�U�X��ּW  �Fxd*:wT-�Ԓ*睟�fV�p�>B��H|N��ZeQ��qdzb�hl��hl�Fa�pl*31s�w �|�+����X������=��Ĳ'�o���:7u�jQ?d;3���������������1��5�t���Z�fUsů~��!��QCq�0�^j�7L"���n�I�5�^��^�H��  �,�P?U	P�rc��a�D�Wj��w�0�ţ�<�7[�Р˫KZ�@C^7�O��-��IƯ*��P����Wo��C�  @�Me�s����H2���hl�n��y�cu�����[$~������
�h4�Y�yQY񫿆QC�O��PM�3]��c^QC���2*~q���ZDa  `#�3*dA��2�Hq� �4&jX��-��o	�����}����d��.ޛ�So����1  �c�>�����щ���S����g.�lQ�ڃ����yT������S�}�3+�3G�[���bs||F�6rC�+��é����_���V��v�<�e�ZS"�Պz\�`����Y��?�:�B2�7}�����9m}&N�ĝ�|C��nO����T����X��3�".��8�Z^}��c����<m����Vou���^Q'v�mܽ������e��4�<��b(�^U���'E�A��Yߺَ��ȫ��'쳷��Lra�YN������QC%}3��Z(�?k�7g��d�h�9�~W���B�]19w<HxՓH��  7��w�̶�l�*�IԐ���@Y��=nU����x
��hZ7�Y�~ꭥP���*q2Eub(d�S�Z$��.��?�R���<�3�5��Ld1�ۄ�z�kX��!��kʊO�+ ��C(����O9�ظ�kԠ~�|�B^oK�SQ�P4n"��H���uCѨ��=��xJwQ�ED��?]�2j�/��.�~��;�}q����!���M]��  Ӷm��?�Vhvr�t�Y}� ���u8a|����D�޲�\3ct��is�D�b����=�4�H��V�D�r���ܳ#��#���g��Jb�R:]T�s�9���q2���H/=�a�^k�j\p�p@���+Rt���fdj�����v*���I�o��M�K��KfVJ�adhd\��<`Ĕ���Dͣ���ϋ;6}Ğ����[y]g�aL0�  �f�"�[^hڨ�RYwu�ZO����\"���_�j``r�x�;��z��J=�J`�+�U�#�0�1߻W� �ʇ �Ξ�o���{xX�0�ҿR5Tљ���g��Ճjѫ%Ķ�(r�E�Sѫ�U��-tPϞ���������c��b�k�^��L�T�[~���=�s�l�����Ĭ����OJL$EAr���~�(C�z��nB��8=�D�
�,��&�~>���Ap���=�~���2r!���[ɀQ����8j2�   �ꢆ�F���!�ٴA���o]�&拺.�K��~,(*�u��Y��E>�p׌I�nUh��e%kT����tF!��P&��@�ָ�u����##�*���g_��Nc���Y��9���wŤ�zq2?�D��$}.���c��I��K���������?��1f&��3�W��SP��!����nh(�~qs�6��{�ak
a�hx�   ��!�b���A���Y� kɄ�ÿ�JV��0��֢X���qW�f�)嶅�vuyu�w_[�ċBk����tr��S�bPUa�r����z���O}}oO~<�[?���<���Ɖ�#D�B'�۲��J������2j�ŲQ/{�ч������;�ge� Hxd1��1��<��L����>[ye kx�    UFC���$�Ѽ�u�~p R�v5zh!�V��L�Bir氻��_��o�Vm�S|�m�&�/�-�>VI��ZVj�E�;�ziFiu��)u�nԀ��s_U�p@������wf��C������ă�R(KkTu���=ä�za�+kF!G"��.
����.:>�����>k!����/���)�tJ�5    �"jp�p��f�p��^���A�N8�z����BU����JV�����2s©��K�vWkpa}֚Q���#�C�{-�����>����ZY(���KP�<S� �dj�����)7j�.����*��-*�ۚ� k�h=B�d�X4$���\o]�z9K�� 	�yKt��xf��g�U�����&�RJ~�Z<;����B�+ds'1�   `M��KW;Wäw��Wأ��#�)�zDf�2]-�RKe}��m��f� B�IYE��0H��D>7�md��ԛ���<j�@Q��uGQߨ���*����2q��M�+{�xt�i�S��
)5,��D�U��T�#y׺���q
   `3Eᑩ
�]���,��;QT5�3��;Z֙�Kb�����_.���ū���@�A��Z&���8?����YJ������QC����19_� ���o�A�ͦ�v�*T�I�+�GO|�:��Q��4j�	   �u5x&z��V�UT?��#�ݓ�u]�T���QC�L�)�Z|��*}�Ey_߈�h]�G�P�����Z?�|��W8?qA\|������{�C�|m>�H����{_��嫬L.,�f�=R��t��ʢ��vY)�Q   ЄJ^lz�J��6�����=b�F+�tpQe��WF�3�ڰ�$�99^%Q��Q�?�O����<j�_tGbFM��� z�Me� ����ܙ�]�bs~er���j��?n��p����*���{�QCm���5�@��   �5x��Z:T���+N��v�~����2j����<p��3�:���ǧm��ر#YjZ�FF�$��z�~��=xp���R���d�]��S���G��X���ļ�]S����	���P?����;wVp�e?�����;�9�ȨA��_\���>h��N����    h������QY԰{�~��X��5zO���ԂZ�QC!Uhk+T���:u&�|ʊ��`T��3j\!V5��0*hxE�ӂ�:D�sD�:��(f?x������fZ�Y�}{�!RKKo���Wr�G��S˺�F�3Q�=��%N^�xj1����QC�Q   4��.wuw�nl*SeԐ�G����������R�V5�~� ���o/|�*.K�'�/�����Vޖ�(��$j�՟��߽�V ��N��"�7�jyυm�*�Z�n�����W��p�V���d�(�Z=y14ƈ�̷�5�ڹSv��l,���u���F�<��M���w�v�ך�yE��3'���   4EԐ9��UR�����j]w��X�LA֌��ʢ�]�����jE=>��/��]zzoq���*��qe駎�D��b����Tɨ!&n�j.g�j���1\})���|M�YW:o!UD�e0:��O&�����GǾ}�d�p���	�D�������+Gi��� � ����ɛ�	�~P��y�f{�x�u�aE�"T�@�k�����Uup��~��7@����H���Se�Pt�r�    P����E�t��wjA~�n,�|���gU����mi����I�<��CɨA�q/N�a<�� QrV�zD-�w Uu�NH��,��f+��5,��Z�Gp��l
�kWm�Y2��'���c���<}#E�<�%�8�|��5�JԢ���Ϛ�)]|uE�X}Ԡ�:�ss    �%jХ�*1TY�pURj#g�2jh�}�-:����j5�z�`�6���dճ�:��>��uUi���?g,1���*jhٱÝ6$�=���5��l��=j��R������oC��SK�����I	~�1�=�Ʈ�n���ڳ�$��`�0��ZO)��Qè!����q���E�2'�    P?]�����N�%<2����E�r��u��k�l����Ʀ2�a��BWe��T�B�@��@��w����gnT��R�ŝ%���g���g�u,��A��.S��8����~r��{{��WpO(��Wk:/�3���!����^V���"���{nOT-�*�N�,�e46�u���Ά����6P��5��a|����Q�D-���������)�������lM�eQ��oݒ!�QP{�]4꛷Z��e-��a����Y�����ή,s�_U�̙���9FY	   ��� ������Џ*��C�|%�`�1��   ` j A�_u��1���w�Pl���d�Pm�G����   l D@ݵ��{e���Y��&�35� �����p��MB   �CD@��0�]2�LQf�~����Ȩ�hPIG�   `c j �D�s���im�a�S�Z���Q�:�̜�`�O    M���5�SK���5.�Ñ�w�h\԰s���1�H�n   6����ջ��n�`	�#΍n��#����@�s�^{��]z�^G                                                                                                   `#ڒ[Zs�     ����֭�e5v      (��3a�d     ���b ���     ������8v m      R!4�Z�[L     ��B�=     �ͭ6� I4����P(4:::22���D����\    u�Z��`�fp��g��DrFFF��*�ܾ};�   @Mm�qW&m �Ԟ={�a$�f___[[�   @��ֺSDk����ݍa4o���z$����޽{��    �V���h��O?�諠tuu�u�Y�����zzz�}}}\I    թ��
�D@�]���nht� m    P]$P���� jxxXG���;w�,ks}�
g�EGG�   @��5 �r�9�����>k���9+�]:;;����U   P] �e=�@19t�g5�߂����a׮]r�60�   @Ձ�ֺ홨�/9���ݻ�V���W+�߿��goo��<tvv��������\[e*��\8��CY:[�E>�XX�lo���K�~^������/1   �� H?'@x��_-ܳg����H��mE��_�.�����b<���q���~^-��N8��Z�����Uv��e�_S]:}3�f~��KO��4=�D"��L�Ok	�K���R"�Ȟ@�Z�fba�?D   �@���uɹy�5�ٳ�k5���&�TAﳩ��.���d���c��(SE�����ק�����䱀o�xf�'�������p�����`���A   �4`��w	ԑ:�?��g�����_�G�>��&�2�!�+uu�UZ�m���A���u�3$S��e��"�#��j��/V5��d�/���U3�   h����7�\(t���� Pz��18�p�y��L����L)w۴QC2���BUf:���q�ü�Eei�]Y�$�Y��/�\+ݱ����j��![��_Y�r��Ȩa4� �ɹ�"^�4�i����� 9�q1�o9   ��Z����I0�j�D���MXX�[����M`ǎ�W���	ǁ�ja������ڜ6s���_U�	Q]�T|ܦ�|�Y�r<BsRO����-����ݓs�ENuB=<j�9Cb����D��  ��
ԼcÖ�u��k��z�RI��VFk��Q��k��s���۝�###۶m+���'�B!K���c��溋�B����9n(UF&f���W� ������djQ-ꇆ>�j���_G�/r,��׌���L��˾^9�#N�   [�P��=a�R�'�{���OO�0}$P'�WC��cX����#ܿ�1�bpp�i��x���d�X�RDg����lW=�#5��5���}v���e����(��ل�6�ڿ�9�潅���±�E���G��Å�!m�Ʀ���.���E�H4�Wnt  ��aC����{�h��d��Q��#��5�m�6ݫ!�VN�,<x�=idށB'�F��66]H��g���q�������]*ko�?;q�g�_έ<�������t��9��z61{<H�[���_��QCnW��%�R2jH�������u/N   ��L�`6����_��;nl��M��@c��c@v�ء���������8�w�N��[�00��;x�p����}�W�0�Ǧ���47��	���K�?�_eVT�#��u��(2gH���N0�L�)�3;5��qK��G��S�d�Ȕ�m<14j��,��*ѫA����_�:l   l��HZ�6�K��t�\�i��ú1����RTn�s�\Љ����sKf��,�:+����-���㹎ٹ]�XWs�'W���&����ϊY���� ���� �ݻw������l���ۍ�6ᴐ��9��Z������.�D���H�W�]]��
��r��³���s�G`��G)�N���[r2�5���?�	��>�7���R����v8860j�ZQ�q��441��
Y���SW��   `3�U�[�$g�E���-=�vl$2��ЪF���]9KXѷ����`mk�<`Gk��²Å-��t{^�������7'�[�{D5�8��;�b4����A:ۗ�b�� pr�p�"�� jP��}���|vW�)=��Udj�h�Lq�%k|��2����S��z;�/H���O����5tt�+��sz{�g��Vq�`�>l   �iCk�[5�^QCK��8�1�g�*JF�r#�N�����;j��2^��t�(�:4�W5lB�s�r�g�d�]]]�ܫ��VZ��j��r��A��6Je��x�|3�5�ͨ�U%�����P�3�F�&K�}�=�|�Q$
�,��y�=�zo^��@d��k��19L^�D
"[X2�c#�(I����v   �:j�Ea�k�->c�$�=�_>�2A�9�Ϫ��ߟ����/��Ǧ���z��67j�W��Aܭ}5������x
1��Ğ={������>GGG��W����"��غ��f�>n%���w906�������0���k%g���P,h��=��5��rf�=K�S��h~��g�5�N���+r�Ƽ���[\c����
�w���-�̐   "dp�EBk~����ʍ��i����}_�p�D��<����d�7P�rC�`��M_�wR3J'w�f=����/��-`�jlTrvǚ��w�nҨ!��C�BE�ZtW�A��&A����c�5�5˘۰�k���F���������b�=,L){hȉ2�#� ��=Z2j(u�'�#S�/�se���Ĵ��R�e���  `�����N���s��#�Oa4w�	w[Z7�G� Q���Ȯ?sاU�55�.���P����z�r����M���Dضm[���{�4Y'�����Ր��������QU{v<h�<ȸ~��@d�}�xj�t� ��QC�+�V�v�:���x����uT���	��eT��?�Rxd��հ:�n�oCt���T�+d0���&;w:N��*�߼���   �F��e�^�Eu�%�h��3Ec(TRhO7&'��G[��K�g˷��o�n����GK�\��$�:2j��66y��Z�	��קw�gϞ�&+�9��ZM:,*hϧ#���]���0�gl����/�W�P��A�b$�T����nD   �N�Z���)���A���%|!X�_��?-'jHx$�<���,w�Ն�ӔY��ěV=�3��������)W5��BP��j��v�o E�6���������EF��IN�9�r�����r'�4N#zh����C�FjoE�عS$����3��X  6GȰ���Ǫ���κ���1��n4�KF��($��ʢ���I.��KYo�g�,�ݎCN�P�v�ڥ�gh�YjR��q��A��wY�B�r�?j�vt/����V���J�l|�4�H�`V�����+^ߨ�����9�E8!j   ������;�pW��������W+5�r#�1�ExEF���s�yE�}t7��۷����a�Y>V?��������]�dgǎ;6^԰'���Z~�/�N�Q�m��GO�`�Q��I�3$!;Afed$Q�kU�}�{*��.Qi���?8՝���]m�Ȳ�+�7�aԠ������j������Y�+z�  l����w���H
k��(C�w9KJ���|/�#֖���r	K��#j0�2��
�zկTk߽�N륐ixt��f��=p:��� �(�5;;;W��P(�����M5��e;w�dO~Z��B���.��/�Q��Ƨ�>�5ZR�V^�T-��W����<p���!��
+r�����G��Z��+�?��i%5d_�d�:u�Ϯ��  �,9C���~SDZ�n]�;�G'y�~'�}�^g"߭w�����ty/�N԰�s�	��¸�����9g�IԠ�-�?rR��;�^F��Q�W*~5�)5�I
_����&�����QCvϓ�EtqW��f�a19뺒�����C�?߂���=:W4&jha�Ϡ�JN�u�b  ��54�KC�#kݽ{���f������r��Q�ly�@T5�XU�T6傞ݎ�aS��@F"�y �#�8��󻚾8�>j�7,p
XUB��ѩ�u��5��I�zD��PK,��;�,5w���Ɏ����djQsP�$j�֬B������j�?e�;Dq�\4��b�̾��5�Z��ۦ�,9u0  ���&gЇ��ѽ�n�I���:R��k5��o��
w��8$/�24a�ۼ�g0�{���F=Q���3��Rg���pGG�s�Jw��ќ����r��Z�'d����E�5jP("�9��jC����a�D-�a��7�?4��ZEK]��|!`1�����=:�e0:����|�6O-V���O^ۨ����NS�B��?  6G�P�[N8z�;6x}���x�01�<jй��/5��!��v��$͆�/���t�U6�u��(6	�K��<����v�%��g��-gǎ�����_,��>)j���T�U}n*�9�>�ْ���%�O^}~�"s���ꃑxv����!���-El�x�������A��0���L��%��9{��]��z��N�b����w&�Zҧ�NƦ�
E���b�!�����zˏ �mA�]zz����)�wXd��v����I*�R�
�   6�-k1KC�O��[����W��0��a���ށ�%j�h�z�ߢ�"E�Sw��طO�n۷���n�'
Cy�>�������y �tX[���"��]�wߌ�y0�  ��Z�:jhmhԠ������瞻&Q��T��-�}���M���v]�}ߪ��漧7|�|�FJp��v��A��P��#�<��Ovhb�  l��ak��j��t>u��ġ���Q�G5�l�+n�0
�ǋg��]�}zu�� ��M���^<�WԠ�w�y\=�-y���������r(   Q��CMoy�?:�U�[�;SKǾ}�_���?��Ã�I6g����j�ϻ��[�V��(:��鉙g����ͪ��S���[W�ڹS=߁�L�8o�J�������Cȁ�N&)���W�>6E36����a�d����   ��4j�ʫx	��^�;���5`M�oWQzR��;�w��fu��^��ġ�  `�G[���ѫ�H�eͺ@�4U�09�NE}�j�rj9?tb�7   �Ķ�i��@��AG+] �m۶�����	���>+wuu�挸��#
4�Xb>:wT-�Ӈ;����ሾ�d3���;'cL�  �Iӆ5��@� �2::�'g(ٟAޜB���O    X[�6lY�@�+k�W��^Q�_    ����n[q r����e�y ����9>>ޖ�M�0    ւ1y:�y O�Љ���C����Am211��   �dZ�lq��� �����{55    hV��@��Ö�Vtf ʦgZ�Z����|垼W����&��    ����iCa`Ek%29�����+'~��@�۷��   ���Zz8���_���	����k Eoo��ю��   �ubK�<��� <y�j��E�������   X���"A� Tk����ђw�     p�����a��xL      Ƕm�zzzFGGݝ�����                                                                                                                                                                                                    ����!   ����]a                                                                                                                                                                                                                                                                                      `~f�
endstream
endobj
37 0 obj
<</Filter/FlateDecode/Length 4229>>
stream
xڽZY��Ƒ~�_�7�MU���:������Cz�� ��&b@��i����/3��Ȏ��>PȺ���2�n�&��I-���e���ￏ7��%���e�3{�3��y>����x�3�H6���Z�~B-�(�E}�&vĄ~o�6�b2M워V�8��v��,��6���l��_ו=Y?��V'hh�6�^���gz��Lz��owi���yC���8q>�{2�I���R��h4��R�b\�'bk앧�Y�t�G��}��x�oM�5U�lm콕�+ȁןˎ� 
|�����6Ǣ����Z0Ȁ?1m�����\t}~��������YJע-����Z�o����s��	��w��ֻ]剦\(�m�y�ʶ�/Eͭ����5��m��M":wnQ���v���uE�	k�-=L�!L�Z(r�g��W^ޛ�o߅���NHoenn�.?�������I�����^d���6�W�T��RZ����iD�̻��,Іw��Ǧ�{��[��eSK-(U��0���+�򓲥/;�*ʔgTw�ۉF��]�n`��cBiX�G���#���	s�$ւ�9�p*�$�'ya֣�Kige��`�r�_^�.�"�{e1k9��#бZ:��j�S���6��ok��OlGc��u��E~m\�Y�۹hue�[�lCt4��4��ȩ���p*���o���m)4�*I=�磥�c[�$O��e��eI:�p�ߵ-�FF�W���6#Ƙ�{�l�${_�N%�.��A�l�����[��:�jD�3;�8�����H	+�O�����L��"��2��44_+�0%�0��s����خcs!�ya��q �F�i��1��E8��
�Ŧ���<���5�8��,`wk��Ղ���d%iצӗ[��z-E�d��97�2N����m�W~D*�l��>�R<s}/���R�d6E�Me���
�%�1���a����S���&y�N�۞��Ēqų��#�d�_Q@���@U�dxa��
�"�TuȻRi"�z�<5O����k_�e�b6�v���$oԥ;�\��N�8������N�u��G��Y����O��������߷�kL+
�M���	�A/�mn��DRޞv�� t��lރR��V�7+��U����H�ɯP�(L=����A�)JA�>gNtR!~���~u�w���[��LX��,�+�A�b_A#�@D�P�<!������a��6'R�~���y���A�.���`��7����(4q�'��m�(5c[�,����{�a73"܉M&���Ks(W���Jl��e$m���t,�i�c�<!@\l�]������a":��̞�%&[��"
����ǟ�ylN���-ir�ڜ��ا�_Nz��附w1gHAcq�o�e�=�_fTHB��집�� `�/��VG�!V�Hݬ3�.P���B��%���="�w��|4����\�Z��T[+���G�e��)���R$n�n��A��Ƀv��٨� �8���c��
��2)/�	O�$X$$캃��A-u�Z� q���kيbv�&�$R\@�|� ��_�z����i�	�x�� n��(��9��g,�'��͡9�K��r�a#� 8S��y��>"	M�یa����
��P_*?P��W� ��C�V\�-sq-��݊�q��0 ��ĉ�V�]w����*G��Q�D�X5�<����A��VHͅ�Y2��Ҝ$�"�\UY��X �������;S�^:mU�����c��/�p��i���n}n��V���I,,N��	4��6Q�&�����oR�1 J�^��"-�fjy�ۏ����~�ސPz-����H^.W_ʒ�⧲+{���r��2ZI<}r�a4X'syt�I���k��ռ�Ȏ)�]qV��t�f�s M_ipȏ��j�B���es넂�(�}v��UԏY�d��e��]P���σ�+]JhUq@�ғ�{�
%�����`���0${8���+�_�w��cf���@������):~�h��x8��?@C>��C68ټ��d���5�d�0��^TB0(K�����~�Q�u>΃�_�q��
��&x��Zb{���a�#睩��%�3g5�I�	#*U&��\��P������cC�ƑO�������Y �I��ckHr'=*Z�.�@�(d�WF���t�Rm^wǶ�rDQ?�7���ջ�.��K��5��3�=3ɻF7��r��
/�3*̬8�\c~)ȒQX�m��w��vq��&����3�\܍P�F�f��wD\Ǥ9��$G�̟� �3���ʗ�4'~l�L�Jhg�
�҉����yJ�L�V2��oC����F#C���C�_�	|c�T�/+��! �3D������U�M̉�FRv9�n\��$���F�B��[��n���7�q��q���S4�����@b���������2�HYߡN�S���?7���i��5�Z�)6���ژ(��H�76��)�H3ߢ��/���f�#�܇�6��!�>�Xx�}��IL,�|%�G���(�1���؁�T8��|]��LAҚHCH�"q����[�p!Ě�A@SiM�"��R|��Z���}���`rXn�]b0ob����I6f�N��ȥ���W�D��b�xG��h9[M�VS��V.S���x)�N[�[B�dH��h�����Ӟ��}$*�����i��^�ˁVv.���x&/�]��du��x.­a2�����w.j	�IZ{}v���AQQ�\6��ŗe�<�7<�J&�P5Ǐԟ��4�{����ɋ��yd R~�f�3f>5��d�$�,K䡬5���kQ��i�4�/בH��=�@V q'���}ȏ��f#H9�R��`Z��J��e���"i�a�a2c�ӑ!�ӊ')4�V
���v�4~�2渶���μw��]0@#�og���p%%�d[�>�mn��i*�N����Z�#@�i?�տr�������e�@���n��R�����+�A8���1e����!ť�>O�f�^�hu���8�|=�]�i�9�l �+��C��V>��i�Y崖�Sg��R�A�����9�82�/l����u��e��p�|�%l�!��B)o�w���9e�����4����q�0j�r�4�'B^��\�+v�Xh5E0|�O��K
�t��|��*9��g�Ҕ-y�WޞD�xܯ9�G\�����Us����sO�f� I�,��D/��F.��t)��9؁��`/w.B�D�+�Sz�#Zj0�����*4Q�^�T7^˕{�j^զ�GU?�Q��
fa�@��!Y���Ǳ?����'ȉO{qBǸ�m���Dr�,A,w�M��q�g�2��$l	b��2~4`�J�����w��B�з�`�d�&��h�PrYEnWܻH�O�,ɘL?�A��[:�B��Nf�&O'A5߻ܹ��d�t�滑p*/�%R��B�<0�b���N�V��`�*�lN�׀���B�k^:D���@!eh�3�i��yJ{�5��V�T�(��M\���LU�z#���A�{�t�tue�=CZ���@W���Ȍ�S�K����)!k;������D1�Gw;b/�Jɷ�;�E�5��J�!ϱ吠1@.MW�����1����t�#:�c���]���E
,� Zpnt�FURb���gQ��%��x������S}N*Y+z�ǚ��jV��'�㫉���Zԅd����������u���ݵi���|�}��?�qx��G�%�\~��f�4œ���
��v�����[�e#���GA�+Ġ��swy���P�LG�}&XFs��`�x�� O,��������hu���|݄K�d)���kvg1;4A���ߩ,J����~$�r]�K�{��%s�����O��V�b�.|���0$^��BF�o�P��h���5�B��_��#j���W�a89���Y���D[{c[��~�}���q"�f��~��)ް�*�����f�/�J�%��N����e� ��
��T+��C�� N�j�n���%��3�;V%��2���H-�-K��| {��:ԉ�7®��R�W��u�H��vH�AKO�	3��"X�v�J�!nO�����h�X�K� �}R��O�"�@^ikW:����J�� uy���~AMY�B�����mv���8��n���������
endstream
endobj
48 0 obj
<</Filter/FlateDecode/Length 5377>>
stream
xڕ[Ys�F�~�_��EG�0P�wbh�ey���Z��nX~ �`7V�@�h��o~�Y8�5�D�GV_fU�|��o<�ϿI��n����7_�17�������͝���>eo��8u��C�~w�y<5�Gi�ܟN�8Wu_��d�D�i�O�͜�C�x*o�����,/��j�v�>��VǳG<{,ϻ;��N�3��\w�ENScd.�r�o>�2��]i��(Ե��{�)���)�N[���Ώ��}�u|�&����I�����0�V�&r}�a��|��/�E>B+�z���թ�\�hún&����)`���C���?V5��Nְ$�z'~�&��t{#�rtd&�0X�T��������=��Su�m�Z�aҾj��HiW�ʢ���՛���9��`����98����3�����KU��=��IMo{�򮗢��6�5U�涪높�1p"p�'���Q�#����}�h�������}ڲN��ii�LQ-[�2o�R:�����	I�AH��ě�ex����QVi�H
w���
�|�51 /a��P /�9T���R�WgT���lZ-?�bH_�5��������^�MQ�$_�4ȋ�ڗu�����|�L!�4�o��c/i�`e�g2	ή�tq��J[fgE��PW�Q9�p���IY�9JЦH&wy��9+%�3(��YZ� �}׼wy*� �f�4���A&?��[��?v"�?9P�8�B�Џe)���P�r�;-�/�xi:�w���財4t������_���MG��������D{X��8sS�x�!O�M}�m�#	�ԟ���Vf��C蛢9�B�#����c5S���K��ɝn���3��\B�te��0s�����#����s�J��.�ڗ<�ԥ�����;Ȗ���iׁ�F�j��HJ!H�r��M�_�=W��v&"�D��Ha(������Ut���!�]��x?o��M2��	�,�>+Xq$�^�7�, �)J�(���,25#�K"���La���v�V����9R!Y�N��s�4�V���,I��g%��E�64b;���$n�GT� �R=��}_��+��+�:o�Fi��]���0�]�*��P�FU?K��v+��-��E�d��(?M/��{E���5�"RBL)�
rְ#-SQbB���QA�I#�ǲh���!qI�\�Y��r�(�F�������l%���b+=�],�4͛����:�O�E�_ `R���V�I��>*��!�54�Y@���W�����$�a���E�'V�S�;/���.�jHl�X��+��OW `���TϢ;V�3����n/ʹ}6Wʔ2#$�:aު˷��1�=!�('V�o%��"_� �7$'��U���b�|h�
�_ȈXx��4a�=�*����I��F^�/����NrjQ�����+����~��y���˩y�Ļ]B �Up����
~*�~��i��~��j�S7HT��cC�Hd��8�d#r�L����J���N�KqY몠\A�YH:����C ��뷓��R��	j%����ꊡ�l_���u@�G;n�e�
���
���<Y�+�?@�K�HNd%&���d�Su��܊Z��Ū�*�3�{��ZO�ٿ�Blc����0���A�|�:��J�cM�$M��l{I�v�*�,� o��E�r!Qڶ����P��M���ŞR��3A�|�&I���T)�E�{�fE.i2)m'�~�3z6rC�A�(�U�/�Y��E�G��u�~Th��[M��^1L�j�	Č܇���EK`�̺`��n�G(�Cy�+�g���y>C�E�y���UAK������ ̰�\>�9G8���^�fu���Cq⨂��:GS/u��I���1�󝟩zG��{Pu��a߈sz�^b�I.�9\�47,ē cdP�MH�]E_,���䈖�����9KGEY�N6�39���`�d��ȥb�Z�u%w�s?ab:�I%-�?W��j-BV�kJ�ꍈ�'���P��(�-�)��Hlj� Ă���(hI���K��1��U�D�P4��AC^��/b��ri�^2JQ��ܱ���e��J=����[V��D�̸���ũa'��Z�U�d�djb�1j� �"�W<�Z�9�2�v�$8�A��a5I֔�x3#КDW��(϶f��AS"�Y�5gҼ= �ڭ,iMyφ%�y�aRk4)5o�Φ�Ն*
���66���ho����'����EX(�3���ʔ�H��}�g�c�@�7�`��q��f�;?���>q�/LْW�4��6�i(�FD)L�f�p�+�Œ��ՙ��p��ȱ\���b�M�cp(�$����mU�/Ҽy�
�BE�pؚڏ&t��j1�r����5$y�D�c�Yr.�@0�����]:��>W#Z������`�V�*�`�)�L)�n��0�f���`U��Kr���N��;�5�;�iWp�@=к	�1�g�%�y� ��X:7˥�*܉N,�R���h��������10�T����v�*	^p� ϐu�O������mЗ�-�2!���78���q�aW��s�:���S��r�:��ݍFV͚����$��0q` a�`��M�E#�:�r�Fʥ�H��#�b�1�
,P,) ����$��E23E��|p�C)U�PQ.�l�Ӡ=���& 
U8B��M�L��u��%L�����̓t��[�L�xVR���X�:d�.t4��ԠE�8e4�b�3�t�&�&�I/p�Z��M��6;z�D�J��d�=2@�gʥ���o�+?���$�O#��x% ���Nr<�굔����<��*7�Q��ƒɑ\�Xr!-�66���O�����6�$
���#L{��iW�4�j�hw2��Nth@ܸ��P��l �����%X͌���f5�@|ɒ\[*��^Zs$���E!'$��uf!�iG�'����o��h!/r����w��]�a[c�h� ��`��EJ#e|4����#Z�2��?s�hQ3����!×=���=�T�f/)��Fc+��79A<���x� �HR���rl���^�]�љ����m�!9��} ):ˋ�vz!_�JHқݱ��=/�����U.,�6 L���}���*����Se$�z�l��B�hײ��:��5h�+�H㖜��Y��QNуTR�}��퀕�j��]���7b�E��2�13��q�)e���o��tZ3�CI�t��I�4����ӕrj��dHt�Z�+I���>�H����g6x()�`(�8+���$WlXQ�`�'Z�(�f�szQ>�{g3�%2§&�D�N�?�R��:i����W��-j��aSnd����������&Om�i�'"p�b:�G!�t��6i�#rڂ��	����u�K��x�.0�# i��1���Y�<L.w%���H�|���_��������{��A�������!�&	u����c�W矜�i6���_�R��F2��_����w�������=7�M��1�*}�@�+�U��V�h�[�K ;`(���v��\����ppaZ�7��	Wv��!	nI[���=���v�3AK _EMg�iז2��@?�@BM�DOQB��V^)M�/���X���3�����#��	��E%.��\.'�^=�mn1��@�]8�cf�닢�>�Է��g�m�(~҃��J��!<y��!��ҊV�lz�]�m�X0��W+J���wE&HH��'!zW�nx<��L�k���������S����hf�*�����Ml̊���h]˺�2#�J���v��kZ*�T��U#�������DP*�(��y~�$��
f�IվH��;� c�x�}��DD H"�:
��zx���M�E�q��ʕ�=GM�5�j��.zR(�/C���[�qײ�\mF���W��d��S�D������2d�9r��WHH�g?�x��v�Ŷ���YRl��^9"���~C�	��^��.3Vd���bº�ÿL�S&Ϥ�//GRj-�E*����d֋f?d�4�����An3�����!��7��Q�(��0�fN;e��9�OՐ��fJP�uЩH�a;�dA�.��3e�(�G�hܱ۹f�"a��1&�]�>�0_�[���ka%N�~�L�K�WG�m)��>�U�I�.�j5v�H����d�B��#���������N�c$Y��47o76��<uc�W�Cg-#�O}�ݛ(�3����FZVJ���W2���]��h|�����߿~��b=U~��a���^L֛Fn�8}��	��/}n%;��d���N}j�<7�~�e���ii>)	�}?߽�(OX��z�Y,�}h��a�=6��)-�wG{�q��� �n-���4��I�f������f$��%	�|E��ݾ��l��ǵ����CrDj���R�Qxc�".���Ƹ�e��[b��Wn�R1��ȟ���+�������I���tgz�V��+��qD��j�7�CZ�(�Q}��oŽy�crV˞���l�#���FR����v���1W(��.�w�x�㊙1��d����5s�9��7�T�;���~ސ�9^���n�@j���Hi��҃��[�LZ�7r��8٢���~<��R7�i[���V�鹬��.�2�~��J��J�M��MVek�Qn�r�p(1bm.�#��7�CQ:����w��3�C��NRz~Ll_s&z����N2&�_��My���XP��ɼ�nC��*q)�}Y�Q( ��ACO~�IC۠�#�H������;Gg�ُ}"�>�,���g/$��ˠ^~���9�չ��/u3�SLxdA�G�w��a�\�6��&���l���,���&���c��뇋G���#���J}{x/0�Xֽz�_v ��9��X^o�q:Ѫ�@�ę��4U)mƮzs_�m;�{���Yĥ���7���ǒ���`V��2��Fn���?����q�s���gJ~�����s)++��-E~�Y�bl?�է��z]�����V�"Ϩ=K�;~*�;|�r�x�{	)�5=4l�i�gwt!Q�i�%�/]��Z>���(w���/�B�_����jEW@$�'޻�����,�27��{_z����̢ӯ4s �-������M�(�4���x�G-E�c��8�u��6��>�8+tX?;!2꛵���?�&9�EH4j����r�dǟ����l�ԶWϴ��k�3�G�eع�k��������I���>'6ݘ8�$��ƕ_��x>%D�L��+~�3َ�B���������
endstream
endobj
64 0 obj
<</Filter/FlateDecode/Length 3310>>
stream
xڍYYs�F~�_�G�J�1��ɶRVb;^�[I���8&Q���o���s�\�_����J\E�G\%�FW������W?˫,�bu����R��O@����k���v}�K���]ߵܱ�?���ո:�B��	���kO49B�Lt=lE��i2�5���݊'�3ڝm�"�K��	��,�ꆶ�[� ��[.��oc�xw�[�L�m7Z���ήC�����0G� �1i �/hc2��v<޸rϭ��O��eW?�%\�|�-�Ș$�=\�+�ҿ��:p�+pmT����g;�mTn!5�:2�y^���l�i�W_4x�t`O�Ï�(%\ �B6��v~|��Yت͛b�KZe�0��M����V�~h�"���W���ۋ��b"��(ۚo��N���"G�H�Y�,���&�EiK��2x�
[���o;�%R���i������j y���� W�?��a� ����Y�
��-	(qLτ�g�-����a�cm���M�+�Yēߥ�]ݸ�^XrM�n��v�k,�Ti����֞���:	��C��2@q��Оx��q���*�ń�ӵdO�7���6�7M�z����Bs8z�T� �"�Gi)�}�3�{'UB�$4�L%�8" <gu ֡JG�Uϛ"�x��N1� 5B�T٫ 6�;�h�߭�`�9�wO�-^�����P��h��7.��"
��f���~�wF>�S�ԿU�;F����H�P�&����[a�;E[�c{A;���z�+l��{&�U��`K��۵��C��ux�;R*��GB�z.�M1�.wMga�y]u�i��J��$����BϪ0��hp`���k� ��V3;�ո]�?�zm�X��1=���h*��<��wH�A�(�d����ݤJC�>�a���V8�(R���|Ǉ�e�����Zʇ�5��� �f���[�?X1�Ł��< "�jG����׺�,]�|�/K_��ǚ�.!��]�t�����tS�ȱ����hO�j�,�GO�iP�7��'����ʍ{I1p���� �zj�r�F��]M�C�	80���<�2�o\��;�Hᷴ%W�=�6�?�� �1��W�BN|1�ã��Q4�p�噗�LxXN�
�����.�ȉ��������ZnL��j�'Y��&5��Lh�o��&ʄ�Y�/���ƣ�`�@+�ΡF����G�]gA18����ىz��(���8��1�{���ҭ�[Wye�y`U'��>�G��`Q�l�4Fs
L�~��w������8�ޑG0����w�<�nl՝�^$*�I-E���(R����>^N�͔�7�p�������Vs�L^��0� �9���?ؑ`��4��>������m	��?��������s�B�$_*�4)����?�Q�Ф3�׮yj7�t[�u,��b�unKn�}� �8N�p�,���r~���v?�zE�V>��M ���a�p��`���Y��:4��ot�:e������Ab���Nul�s�T�l�}E!��8s�$L��	/��9��PdS�t�gY�pu��e֨hP��kF���u�|PFl��C��"�]�'�uU�g��0�����W.��}~w��R�p���o�2T�߮/�}�������O@G�jU�}-V=Ŀ�  �a����;ܺ�p�64�6\�0���*�ʝ���dC�1�ɂ7u��%g� ��񷼫��D|��qJF�Ws��#��C��5���g�4���ζ�6����[7�y���)��:�?�0��'<��+?Z�����mߜ�J�_���ġ��n��p����lˢP��_�Kli?�2�ضk0I�ot<fK䩄P��9�7%�?������}Co��^W�h��ڻ�8	�E?�ݿ�;v��L4eۃ��z��e~by����D�E�9�e�E����{���&����2�g�}[��뛅Ѩ"2��a����@�͡�@q�?"N�t��w��r���,�OK3�L��gXc��_��-,=5O.?-҈�Du���x{"��:I*&?�6��H�䳌���0�����u��Qb?d�a�����0F�טM�V�묛�(*<���{�5k��z�n*�{�R�q�7��������X���:�<�u�
��+��i���{4��?�@z�s+`_�[��I���톀�֞��N�z���:gk�f�G�=��8�ᔜԼ�أ ��@��L=��
�͇Q��e�g	�#vI�#�-�7~�0X�`m~ɦ)H�o�X)J]p�u��5U�AH��0�B2Z�ʂ����d��ZJ�t�h�M�t�a��$t�`0�l�2��ҁ��*�C����)#�ޑ��$�����)Wn����������ڀR췻�-�-O>�\��ͦ�}Xk ����8��� ��z "d����b��Z��t7m�8E��\yɛM^��q��3u�*��(��^�ٯddҍ"����/�G����+;���t�ru�z�jP}:B̺�{RO5+?��6��7u���	��IC�D�߸A��-��b`��W ��l�l޾ay"	8ɗ�T�����R t��f�Ƨ��n��	#��0�$f0�mxz�%�@��+���'�-��0F��҄������h���jDB��NJ��s�$�c�6�t�ɠ�X9D*
0�В���H�IU��Jȋ��?���=~��}����6�8G�N�
p<K�$�-�}�t�%���u~�I<fi��i3	���#� ����cR)�U�Xl@|U7{nsF�pv�r��I�{?��o��b՚~����w2�����'\$X�I����(ld�D(��|$�_���Dh�G��l�F�ېJ��w�0q�O)��3����t�_1�tnG7��M,*�W���]]��2k@�l�����!��S~��T���+w�ke�e�0�;Z���M�F̿�z�%�e|�HD���V����5�NVFa2�-�����,'%�#�&�%7d����Z�P<o"1z����������'��u�2Fr����:���d�!�}>���G�����H��4��NS<��� �9���eUo+�qy� �O��$Xq�"H)v�K��i��|l��c@�8d�Ёv���qN*
�I�i@�$l�t��ljl��Y�E
A�M�rV��aas�M�j��\=��a�+��Y�������W������Lc+
endstream
endobj
130 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 4226>>
stream
xڝWkXSg����"Ŗ�3�j�:Uq�V�֪�b��;��!@	���pI	��� �rDQ��jGk��j}:��:Z����3�۸9�9�;�3�<���`?!k��������
��<���xχo�<�k��peJl�K��Y�����x%g]�� ��<fV ��'1?f�dv5��Ó=��bҧ�qςi�3�Y�$�������$�G����G��%�������,\��f�	�z钕+WJc��O-�7�2A-��?�˓5��Z�H�[.���R�2Y.]�#b�����Ѝ�oK7��r�,Y�����nS��մ|�T��I�'���i��J�R��Iߠ�2)���)�K��8��3,�j�%M��R%-M���zy�T��*�q�i�<�^�Q�Z��S�����z:N���1�ͷ&r�'��.��f�F�=�5qi\5��eJ5-��3�N�\���ɲ,��Ciu���h�:�W�R�<A��O���q9V~�O���eZmr����q���+��<Y������2!)֋L-Œ�n�r�IK������NZE�A�'6�"�]�HB6MG�`�L!�g� b1��M�H�'�@,!�ˈ�:��&��x��Hl"6[���6b;N� "���nb�6���$����A�����nv�$���(�^��������>Y3y����=-�)!��[���)�S����ԽS���>3�-���O[8�̴'�N	B�F�{x����4�E�]�I��]�r;X!,����S���=�j'wӵ��\�} h qݏ�4z[?觞�A�p�6v��rW{S߉{N�����ݷ?���?��!/(|���G��-v&��ܹ�Ѻ�qT�͓����?�\`7	u��Gp��;�c�J�_,h�:�4 � 8J)A���ʀr9-F	ȕ���\.(Q�AT��Q��-d)T�2��C��Q����)�O����?$�o�4��U���>9J.?|����p_���4� Z{��������!�i?
`i�E�ᳺ�!�"��%D��}dD���P��5��?.Bi��55	��Ƽ��0��S:t�+Bf�w��G���d����;�6���A�ۓ��j�ʦ�Ͱ�G=�>�{~�P܇h
�@ր| �E�F��Q��M4�3�����A�A�؃�|v�Ƣy�\'�	����ln����Fqu�Q���7���r?Ɓ>��$��]��}�#�W�����$���q�c����O�q�ō[np��:��[ư��q�G��#�9��p�M1!���x�#"��B؟��֊�~�a�u02�6��m�1ґ�
���
b����/���*�V�գ��hFi�}�������~ľ&f��C8S[]l���I�n�8d+��b3ׄ�}��jK|B	�1��[j���f	1l3�S�t���&P�"`��c">݊�wG�}�,0:�j�(�'���m�����!
��Wح���.�3��q�uyyk86��#�T��&����(������}c[���Q^ow8��>���̖�VC|Rzj��V�8��5�|G�'x�pϦ
V0��F�RRHkj~~6��ٞ�w��r���+^g�%�td���Z���7"��~]����g���]�7(5��>g���*j���� �B�7�#܉�������hU�NS�O�},����݉n�g��`�0�=h���D9�B�n�����A2���d���%зy���P���A{Tpg��^Ց'�=ݳ@��d��]��<ߩ�)�>�:���p %�}/j�p&�������!������.{HS��a6v��\���,4Kp�I�P��WTTTR !��*�Ց_��c�X��}kc�����n1��jMnKu����vw�X��b�6\��d�&�P�bRҕC��P|Ny�;��לy���w���F^j�3L4P)�m��x�䟚��v2sΣ�^�-$A��y~(�cj/�?e��@5�s����b�圅��g4�_��I�"[O��0�qwu�c�;V��e�L�qZ�D�^cB:x>���
Yjn,P��|�f��yeD��|��� ��G��@�l�����Rv��Y��P���.��q��x�淋0��1��8a�����j}�+/;E-d��X')��D��
��E�[ɘS)�(,�I+�������i�_���=|�*�@��l�1C�nNj��$@¶K%]�A��)��[hG/Z��c��q��b �G�{�:�
�S��o��0�ԧ:�ك��{5�����b��s8�y�!�֣0��?�И�L��,Ӕ��$�ef����H�w�yE��#!�l�*�h��%7��j�*��}=����7�qYMb(,���,�B3�Qɭtw���{)�ī�MIk�����
�+�����vb~݆��Y:�ۿY�f!���LL0��l�9�_H�#"ڭq��2���y����M3�h�X���C$���PO	�b�fQ� ��yG��ѪoF�������k��Gۛ�%C%��st{B7��֖p�MG5���c{��O��[�UQ{RC�F�J�����B	�2�p�|Ѣ̄C��=���w���)�'��X�bL��D��me>�d��Y���f�
S=�R�CByeuuUs������n	[@��,Į&/�`7�c��R����V���"#r'��s��z9��2�_�C���A��K��$�Z��8R��L�0�A>|���$&�w����=1��Fw0�s�x�Z.�a��na�	�15�נWe+��Pa�tTW��]PM�z�:]B���/���\[���Ng\kG7c��S54��=0��r��R^��S����|Wqu���[䲂,yYf3;��.bֳ;h���.��d��TEu�,p�0��d���|����!`ʵiJ���K���n�a��&�m=r�9�~�kV,׬]4��ȝ���������ҜF�+����6'x�oNt���Aq\�1�6������|���c�̱ε��n����7�*�:^��1��X�QQ4�ib9Ƅw���0��WOG����&9�j��e��P��0v�\�5�J�wl�(�|��0qƷ�f;���Z���l��0��'ڌ���p�|����("(n�t0k�{vZ����L����fg���"�>�'$]�3+��&/6�aW����#2����##�9}���t/�d������;���(T��7UTsU�c�-�)��i�J
�Md�=��(�y�P�q���_ђ��𬈀}�NJ0�,J�U�ZOsKM3P#�xh<���%Q�����ݴ�g-��%��:Rs�;i���e�i��yo����Z�L���H�@�Og�+�Q[oi�����D�xH�uH���C�p���nfE��$~���I#m[�	l�W�S�r���X�y���|"�ǘ�S�u�Dŧ�o�����)���w59*���,�.l3�3���+��K�f�@�ɍ�h|�Mu���ĭ�fnNo�pe�Gs?L7ѓAn��������?����[�P��.�e ���=��%ʐ���17�K���Hn^Mna���O������򫕗+��.ü`���Q4yv�6a���!�*ݬ*��yW��4y"�i�YA.=��xz��RO����� 7���
4�s�Y��-��(��X������������YJyY;M�9�����y�XȞ���2F�8�tv��hT1{4��=�����A&�"y�!>?ݤ�;QT�~;㺵��]]�gǑ�4y����q�#S���?�4Y�B47̝P�ݜ���MG��嶶�(t,@����aW������G/3sܽNgk����Y���
s*��V�2E?������"�ˮ�ɪg�ZJ�60�!/[�d�2��BGQy���\S��zZyk��������Ej�Ve���FF���u/e��P��'�N��+��U����Ң��w�&s�6��Ӳ�=ύ��1�hA�Ţ����G�3���3�j�|e�R�o�������(ko���$=�X�U(��R{iEi�S���B�*��W]w�ն��������ϼ j8Y]�a?���K��h�P÷$�g�'E�����f��IZ����|ߣV7���ƱP���xG���w�'��dP���yP��/�s����)]H:��U^�D��zWy�3�>� P
endstream
endobj
132 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 7875>>
stream
xڵyyT����y�Z�-1mP��Zm��:�yhEDe4La�@ L�1L!@�<ϣ8���V�m/zo'k'�ޞ����y���~��?�ֻ++䜳���{�ã��(�7��u�����
�vS��R�t��&��VW��(v:�}y�J&�R>+��kpۯ�_ڿLQ|��sB�s�g��䓚M>f�:R�(e���}�{��m����f�u����9s7)"�Q��AJ٢�+W��ղ��6ˣ��e��/��PED�<\9_�G.�)�䲀�P�l�nϷwm��޶k�l�<\�*s��>,s>,���.PD�B���V�	V+£��6D��d�����\uX�-̕Eȣ���wYp�,0�/\)?"S*d��Cc�p����p�,"JA���
!墈VF�
�P�G��[�eT�)9���dY� ;�(�p�������)�*%��_.;�&|	����1b�����>W%�:*���Y��d���_DD�z�bl�������Ѐ�����+��"#��.#!#s�q1���+ś8�7k���6��)�ϩ�WL=&�F�S�5��L9P�Q�S/P����B����(1�DM��QөW�W��L�5j5�z�z��Cͥ�Q��Bj��ZB-��QoR˩�Jj��z��Hm�6S[���6j;�6���r�vR��ݔ�J�Q{(wj/���OyP���MSq���F���we��ixg'&l�p`B̄�	��W�������e��>�B6����e�3�g���8��.|V=��t`ҕ��'�9�w8�܎�~x~���/^�w|���x��H�Ӕ�S����^}�6��+�!NwZ�����T��_�yLCӽ�_}y���%�%7�/J3�#2F������V�y�:~7�v�6��D��]����d0a����J��>}D?�K�'��4lKIڙ���<��g���*��~��M˱�M	O?^�/��������c� V]M�5�l(��R^����t�Fz��������q�f����3�F.��oZ�7E��8h��&RᜄJ햯-�A}�\��h��$�O#+G-��\C�a�o����L}Z��I��MM�T0�h��Eqx~4 �hő�C�#iK����E�rF�S�I�$WD0�P�T&����c�#��O<����v����c��s*��`P�2�h��C����,S6@0��d)�(�pgGf�x'�щ���a�>����`a�����]s�hI�x�{���;���������+W�:n���~���[D�O4�u��[����4%��%O�ODV�oIL�\԰�f{�:���VD�R8�nre������n᡿���ZH����#<��rT0����e�Q��e�G;�\/|/
����jl��ml���:�f�mDBV{���X��V�k���ں�:^�d~�G&��~�A�{��
�?s|O����!8���C�h2������$鑢�c�˱�W�l��/�
:�����	�wKo�����޾�^K����fW��s�H4j�JG=iIV&$i���~�$�-����"8��G�.[}���x�g�e�./�M�t�p� �A�?���.�w�~սW%�?&���`���͕��o;Z�3|�m����_�oŮ�Dv*GW��~q��| �)��桿�.BuFMҕ�n7��,w{g�$�L5a�x`�mlP�G�{��x��޺!�N'o��R��Z����k;�,�Ɏ�$��x4,B�ے&�u��=`��u�B�&0**,L���p:�Ь�ٵ6Gt��[��_��(A4�u��G]�w�6���p�~*����JAO�95:�xh�#>z��X�<e$erL]���L�XCj,1�\�yؐ���ᔚ�^ i���^���	��9�֯��A�)��h��(�pmb��x��0ܬ?uz�X��7U���|ܪ��JNnmk7�k�
�~�g�F֋����聩�\� �TXZ��߳��l�`��F4e�'���Bl����Av�B��쏻E�Nm�/�	GvmY��1Z ��6KeYsa;p�m��<v���Q���*O�Va>N(L��F���*@A#��Y�aġ����-����]�=��Ң��m�ķ�.�¼U�J�k���g�Z
ۘ7lC�hҽ~�����x��z�����@�üs��;�<��&������3�{'��yf�X�{��}�J�Mq�M�����I���]��K���3��^;�����y@��rz��_�Ӱ��U������w{��r̗ṑ��FD���ORD��Y�}=+�e�*��m�ō����2��Kz=�,������v�4�L�w�����! u����� C *=�J��;@�	@u��E�d0@bܣ����7��*:�c(
���٫�8>2��������B^V�;�� ����<� zF�,��9%�H�:AT|�LF�
�QA@D���{��`Uu�;UVGd��>]�h��$T�=�Z��̨t��0D��F߇��m-�cp�=��a�%1W�T�2T[e�^�-�$+�g�o`0�CC�_��?ΰ7��a�Q����xi[�����JS�E2 �"�����|�+,��?�������'JB���clBb$�&G��U�Yp VН�[v��� 󛖝v��Η��H��w��?QW�7l~;l��v���d���z�+��)� gb{��(��0��7�OOY�	�~B<lJԭK%J�P'M����+�^�������v�:�ˤ�����)�IĆ�Ч����^�#��p"����e�)����:��É�,�8��^T�E��T�d��"��S����D��//Ŕ��Q�4��,:�
�i���4�^��W$ ��GQ����z	�& ��Ҕ/bj��U���0KE�6���e��[���D��*���Z+���Al4�XN\�֬&�gr��8������?Ho�a��3�
�Z�r��p�A�h&�	�kJVq������Z���}��D��p�ZП^�^�lI�W�!�I��	/��h�7|1pr���kpN���e���jA2
��Ujm, !Gm:h�)8Hd>�_ų�!)�^���ˇ[���x���v��p��<�7�� ��~y��?�#9�"�������L�7��{)�z�4��rC�ZN�f+�>_g��G���?[a]��
�G�f�#vV�	C���������)+�2'�n���Uj�%�O���i��:i���&G7����)�*.�$�l�Qџ	����a�`bl�DƂ�ZC{BY$	�e�_o��.�D/�ϸ�?峋F^�dA.4e�$C�(��=��L����Yt����l����p�[�y�%Df������+wן��N�զ(2SA�0Y��Yڢ��`-�#7�r�jY��<'+���	���0��Gh�(^�Uj⃎��W �]�Q��.e�h�QZ� �H���A-��WX���v��h������`+��G�d?q}Պ�q�I�n�#A:�f�mNIoG�f�6�{����9��A��j���K�;�~`�Y4�=n_* ��ے8v��%�c,���4\*괚K�Js�8_&����4K�M[;�9=*bU�x�J���=�ѝ���ϸM��fv��%R�_�6�Ho!����{�t<�Ha^�³�CΟ�;FO4�������/�L�� �;���j��Yp�m�۟�TT�8XԼ0�?�i�7}ǻ�OV���3�z�)8��p���h@T�Q�Y��lQͥ�����i�",m�G�\ ,'nK.2�+���R�}�&G��0����7��Ѵ+f���i҂i���\��L�C�W��tV9�V�|��Q>�s���/���OG3�=�-�+�כV^����w#�����4�Z(��,&_�?�à�=��w���0;|�a� ��Jw�����}Ǐ�M5O��dz�W[p���3�ӧHGqod�U$ω+
o��(_����������ǡ_��(�]Q��Q <���$���Q����˛��������g�$|�-=F��G�����Сy���T�D�dp^�v��X�ls��iNg�����)��x������5�4��("mxHxP�����=�������P���vO�����|�90JA�����%� )͚Bhuiz�{H�џ=�Q
��_�����f�\_��1�S�6-�,s!Uc,��o�x�����(�h:o��+��<F�/Wk�Я�,�P������e?zY`�o��j�ڊ�`���#V�OO�o|�%"xZR�i�3�Ue10�i�@��#t=l����ꖔNx�A��0�c�;H!P|��>Y�ޒ �i�V�W8���$�LZ���{�~*���
=( !%"1����Eȭ�j�8����%;�Xi!oU�'3J���Q���"@Q�P���9N�n���
�.A�ө�n�#
��)�b�8#/�*3�)��h%��.:�ѵ���EIm�[W�e��`'�T��C�T��N�-*�t�E�9�m�X�gW�����-�������q���w��*�mdQљ%I%8�Q�J����d����.�z�UN`��f5d�������^��K/�Ex�⿤�y���Uk�]s�@lb��DϢ�⯱�ի"4N�N0g��>s�J��/_Sth��z1z�s�����\���'��5�{8�*����d�Cjb����X1����e�1�+J9�q)nŭ*�����/�%�.�iXj0,L#L/Z�����ːʏf�����:Mx�Gxa�Ha-��w��~I�L�P�.YJ7��-��kq�oQ����h�]~��G.���GtkY|����t�V*q`]܆Xq�����ٟ�2��Q�61UC&��)"�ę�FMML�!�0�6x9+mq�5��*)�f�e�2
3��ԷT����+�E��;��c���=�|/K����Fh��_�mPY��E񂿊 45)61Z�H"Cm���_�K���4y���-�������Ѽ����l?MD��Sx�}���&`z
����et�Ð���)��^Eϭ{<K�\㼘}v��;��?�;`�����V׎Y�&k�ȫ��g_AE�[�݀Y��cD�x��'�0��c��
u%0uU���[�/�z�G����b�a���#>������k}��1��@;��W����7�uƾ�V�)?�Խ��A)�>���d��@d�C0��)^H�["��Cz>��W�;K��y貵gv�f�RRzu\�!�������w�=y`��S�:
oAt���V���
�np�1���+�5�2�.���Z�:|*��'P˃�Gl����\�h��p�b�|��o���Fa^�]t�_I�5�~$�]!�~1�!ks��J�e�%ܭf����÷n�t'싈��M�\ͬ<�)�P �����I��4��b�à�w���/�%6�R-
��k�5|���7��V,�~��#�X�)�@Q�G���6-��s����ZoL	�ő2�$�7n���`����Zr�ם��j.o�.�r�oC��eGB�Z��
3M�9`�0g�C'�X��[,�p
S��-N�*jM��x�/Zu���`�%��R�6��N1y�+�ņ�AI3�ŗ�U���fOx��n��O$��o���n�]�t��Q�`Sy70�j�H������%�B�-2�uy�?��]%q�h���@��'F%�Ip��R!7+��/H>$=J�+c�k2�j�]�%��j&|�����䧎���9,�mb��w{	��lsV!8�&�J���M�V�7�v^r�����@���R��R64VW56(�ù
�6b7F�K��Wh/�#J�qQ�u.j�yY�lKV8U���a]z�>�h�&kAS|��Z[�@�Gs�GyM�x�"��1��OX��q����0�4��	u��H�-��az��D"��B�e�&M]�r����I�N�N�Iw*0�!�IJ2&JTn��Z�N�yh�����W�,���$�,��VНY�ZHN�j���A̮�Ӳ��ɮ	Na��cf�};�'UB�/(�*�"Y�R�= ��a�V��=�-�snb�c�����x�ak<�.V���gx���3�Ƿ����9Y�
��8�����]�FY�}ٚb�fP;�E&Smuy;0UA$�Ȑ�G�wK��@���0(�n�o��BE�
)��-9�5�lRX���l]t;!M<r�-�+xD�uU_����Юpf��)��`���i�	S��>F���eD���"NچB��g�z�G�x,{�jJ��Am�cU%����	}[��48��=�MG,�7ĝd��~�{~��B��`�^j�3��ih`7�?G���Q�/.��%x�W�!G���H�^Z�5�"�)D��G�ܶ^zjb{g>"���ǯ�����W�Q)6����G��B�eQa��4�L��@|D"J�w12���Q*-<XA���s��"�=���G�ω_";4=��7�{�7�w/s�6f�ҹ�;�7֋��w�>�3��~����qJ����2���X�%5h�]+�+<B��s� ?X�X:��N0�̊{Ԛ�d�<����{Ir�1��zz#&�5:MgH�Q�$�B(D�َ6�^�����~x�9d�d���xwI�SE�9�Y%�Ԏ@�));�J���r�-p�A1tK��zI>�ʴ�F305���X[��^��/IU��sQW9�m�|�������#�\t}(JC��������L�t9����c��11��׸yl�����B��q����UxH�!Ԭ���M��]`�B��T��M�:BiF5�Oy��>��{�}$�Sѭ�;0��XQ���z���aPr���s�h8�Njq4�T�sX��:&��)dE�9FIJ�1)� w?䝐��S�)�
�Y9������`yӡ����U�zFW,���7� ��O��i����Ð��]U�-u�1���y(��(U�'= z����x�Jz�<�H�"U��GĄ&�s�h[�TX��״��R�08�^s�㖤�������+h�sn�)[G��R.=�6v���FrEY���[�C�!�0��g�Bciz)�޴�Ԟ�X�����0g�I�G�m�I�I�W�'�C>�̖N4�7^�75��;���-�(�Ac��G,�Q��H? f�����y_ݙV���5�L�|�B�-��Jӊ2��ȉ�m�d�v]�Q`��@���⒰m>�i�:�U)�/��4 טN&�+,�!9����/'�FX�=E��%j~�X�W:�� �_�$Җ��d9Y�bݔQd$���jLT��6��O�f(5����(�5�t��<�3�X�W��RBҝ4h��V$晥�o��m�sD0Y�1�F2E���p30i_����D
�ӈʒ���iLOy7�1��i���b��&<��t]Z�� 	p�8'���Y��&�s|�62F�#$e�T&2C�B��'�N�?�f��j���R\TC�ĺ@;��Ǿ���ԹOc�.�I��AE"@U����=��'�W
oY,��I�:�����LL��n�	=k��w���|��{�9�v3��c�5�m-Jk��)��̔�L`���Rhm�8�ɠh��� ǒ{H~q��?yK���O�7�Q�?;������;/6�$�o}3�9
��4��� y���o*ͅf(s��Jb$HJU��,<[�gc�ِ�M ��/��ߓ�i���٦��"�yҤ������I�QΔ�#���
endstream
endobj
134 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 7813>>
stream
x��ywt׶�cy +
�II!�PR���N��`:c�lY�,I�duiK���d[�q�����)��	5��ܛ�良�q�_92y���{����Zߚ�f�5g�n���{s��#)�#\�a��k'���٩T$��ʝ���DI�ri~Jvt�\�q�}��>� �
G���)�bs�#��w���c����'&�5�w�C�N=MnϘ�����x9�8��9c��W'%%nx~��)re���|�Y�f�w��x#^(QdeH��C�$;W�#��O��H���qzV�D�`u¦����'-Y�$^"�J�)�����T�T�T!y^��+g��C��+M���ʕ*���)�)b�L��E>��Jd�S�2�<'K� ��,�8C�"͗���s�Y��leZT<�==W�/��s���l����W�ʳd�b"1a���:�g��G�*��kqn:Y�����Z�w�)YR�8_R���S"N�RȲS��\��L�5��R�%����)b�$#E��-Q��������)2Yv��ë�&?+_!�N����Ϣr8b�����G�BEOv�\EPV�����8cc�I�)#f�x5fn��cc6pR+�.P&БR����j,5���x�#ԣ�x���S���3��Yj"5�z�z��B�HM��Qө���+ԫ�k�Lj5�Z@-�Q��%�;�Rj��ZA��VQ��j�H���QI�zj���Dm��P[��T/u�����H�b����9��tļ�1�c�Fƌ�6�|l(�߸�qǕ�S�s�֍���h�����A郿���cu�q���=���؇{���<�#�	�y�*>z�����3i�w�e���-{���=1���O���a�h�英��hDoFCH�����gco�
�X1�(�镯e��� �s�
[�}о��'� �}C��h���9��;�J��c/�	�`sX�Vcuh� X@�*qѼ��2�[ka�<-e�ւ�9���\��د��}��h^����6�Yo�k�KLE@k�e��.������(��ʌμ��o��O}h��"���{��h���AP��E`w�lV��f3X]&����2;l��'ĎE_>��}�^��?�.�_ =؊&A1w;�/_��(�qi�3y+�+�mx�rn�������; �1��>zQ�/F��+���1^*9������q���;;8���¯mK�夬ZN��`>�^���p��/o�%Uʄ����T��JA�/ې���]�.���\nɊX$�Շ9���ϑ�eK�-M{���rD$��9ǀ�:�j���z�j��.���t;=z��]���n���3��F��.�ĝq58�:(��^j)��!=�K/(�c��2n�{>�#��a' _��@�4N�p�:r�B�:���/oLf��4G�1W�%]11=�������DP`+2kI�W,]��q>�B(n 1�D�i�c_<����K�h1{��u�+�����$�d$KS�;4/ihu�I�r4�Ҽ��+�\s ØQ��Oݖ�
E�_�S/��}R����@�u��<�x���=�>�y��v�9c��:�*���So���]ˣ���3�9�����cq����j�~(��uK;�"�`=�9���!,�b�4"���4@+TjE�~�4	�#�e\�?��@zWFhvxx�&��nN�-�:����Ǐiޑ���^|?�?��L�G\�C�^xc�0vs�Vs����Oht5�����Ц�D�D1'}C��̂@��8����k:�r�#�Q��0{�Dp����<v��l�D�����Y 9�e��>�7�_�`|C|���wЋ7���~E���|4���A�N:�ܳ���^BR$��|�s�"xd����3��3�y,���_�9�^���%�8���ҳ�$�9g��O�ps����2@����.�͏TM�G_�=xQ�;s����r�Z��
 ��c�R܋Fu��C�0Z��F��Ύ��{���&�J�3!v��޸!�-XH���2@��pS�a�wϻ�[J��/��$,��/���<'�5�<	�]��U>�ke��ܬ[F@�6�Ơ��j����h:��x�V˗���ursm�Yg�廌<�b.�wr���`�=݌c�[t���N�t�k��
ﱓ� ����a�^���1����^d����m��S�5Z���1z��܁��gP,CX!��;N )1,7�j�� ����ب�6���x#�S����'#��..���O�h�躔�����״Vv�м?��	����O`�W��,A#��*7)�UL��y-���]�_�>k�x@՘I4��-�cS��f!TVm��갷��8�{�&��{�+��@ܓ5O������-���ӊ�?vs���1�bV��A[b�Fu�����x�W�zw��d��m�r�"�0�^���WU53��59�Ȃ��_聣h̝O���r���I�"�҇}�!>a�QLzt�a�3�PF,T���h�y��(�k���?\?�F �i4sŋ�����'����@(Fۡ8�Ѽ��R��%KV��y�mEM"���ל�y'{���@���O��Ŀ���͙�{��U�FST:[w���o]����P��ZR:赊�="���o���P��|_���Q	��sE���2�
Tv�E�0W���L��<�*��nG��
*a��e��F3���E�uh���!�)�a�rN��Gu1�_�k�T
UiJA�V�6�v�wg�ux+��i]Կ��Əd_�W�a����j&t:Ty���:u\���^��P)�Ҝ���\`3�tJ�D���ğ�'�w���;���
\�wem�By�Or�-�I�s}�6���aPsϚ*��,�����L��B�Ǜ�Η	B�I7�W���UG(n�_�V�9�.�dc�>�2�Wo(�,3��k
�-����ʝ^�1���9���)��h��aN4�l!n�O�%��\��4�]�Ԟ�Eׅ��q���?�@ ����=r5��QA���^n=(�%��Oy�9������[�V[,	b�3��g�B;��ް7�\@EhN۳�:��)1�Y@�������kv�����4�N���HCŞ2�X�$t�&��\T��?���r#�;��z3�v'+����W�~[�'x�y�xꆽq?"���o�}��⯇Jױ��x��;`ۣ�|0Z5�b�զ�jH�fuX����g4��춙�`Yae4$eM�4�]ļ7t0��ˎa�b��.���Go�w�5��@�����x���ׄi���[��3��R� �]g*��ǳC18����W��~kD[��z���G��D��RTAt�r_#.;�A����Z.��B�y/V�)���{'����_cX��T��0#����&ీG�X��$��4@�Qz*𡧞�+~h�.�݁5/��l����n�ʴE@���=D������_���}��d_���a�Ġ���Θ��G�V�ݎG�I�b2ko'�Xܰ*]���'Q�hn��O�����=���9�/sO�'���E��J_�¾�pISqEl�e�ے�Uiƕ�p�NY�}5�����K!~������Tdgn�tVwwt����a�O�����jn���(7�-^�΢0��#,� ,�j[(n���N(wW�N#	sق��۱hW�����u ��ɼI�7�Ej�;Q]l�]�PgQ8��
=�%o&��f������-)0X�@����4�2�ۓ�3�?/�����򀡪�����Z�3�o�ʃ�ܵk��\q�{!��~����da	����<�6�����Y��Ŋ�r~�og|k��c�žޫ�h�F�r���$����]��1�J��M�Sk�'�Q�^����F�z�z�� �`(N�Ը̐������2��X�.����a��j�����a����z��x���^i,7�J@�g��7�Z��RT�L���J[��M�53��5�mGc�Gj��E�ȵP�U=L>�+̄t6�U��cr0�]�����x!�]?�^��c��G�<��I_| ��]Ud��{�Ra"|�6ʵyx��H&��訆�U�<���1��&���b��?%�/8<�� z+�Eѫ�:�[�P�/+��va����"9�9�����������*�e�g�
����̕&B5Z��D���o0	�9}����
�QC��K���CLzʮ4����\�z=��P�U�QAMUMFs���,_q�4��Z�Z�a
Z�7x��Ez�?q��� �֦?�%�N���C?�f���Fc���9��R�F��'�pz��u�;]���ͬ2�l�-�id0C����E�v^]���_��
ߴiAA�6J+u-���Xw�[�W��@�����	�o£�SȲTR�3�[���Ծ_^���c�-�4���c��<��?g��@	�ά���&2���Đ=��;�416Z�f\�<��plع�8�}͇���ɐa~�H�4�l޵^K7�V�KvD��lME�η��w������F�,A�͊"��/P�1����Ҕ��N�:x]�w}}�\k�~B#tCШ��n�LZ�	�"X��9n:��k5~��D<}ʩuހw��ߊ��e	��D+o��T�OZ�7��.5*DP݁�v���E>>����3̤�VŽk�٠�䙹dc2i8�}š4��<�_�	����w\]�CW�o�k ��^VS�Hf�N|Dg�k�6{�2h<�<wZ���W� �ʵ�֞�����4pڿDEWb���_���&�JL�>EP�
�;Z��B�[�ݗӴ	O�3�,���Sk�����ާ�M�������@G���"�.���Iϔ�Z@��v�a�v��z~�}v�1]����塙J�u) �}�g2n����,/)�)(P�gu�	��k�r ��}� ���)n+��s���U�I6��F�c����F]�PW[ߓ޲Y�Ҕ[s�
��L��E�N��}A�{�����v�A�����w6�}���k�����*�D��o����>�L^Bjq!(@��ՕLZF��ы�l�	��;��.n94�1�"/A:��T%t����� �������;"���0=����o�o�Np9\�������'�l��&��7��$�=ޚP]UM_��|���>��SlA�.�(K�3[��D���ݙ�/Gh����t��N+A��IKtz5)� �my�b͉���n�z��9M�.���E���g�6ʹ�$�4�9�\�j��@�En�:��?>`nr���U{��w���]@�tZXmZ�zNe��M٠��j������|��h���,?��c7c�q���&c�^��3��O���Ձ��s�iW����isM,*���긓�E@�3��\�/b�k��PH��
ۄG����=��=ʗ���+hmjhhi�o�������<,?t59��|��%�&c�C�n�#M�3l�XeV�J��"��X����d~r*�:sQ���*�x�.�	2C���bEfg��p��~�2}o�K�+��Y<I��%�W���l�^�(�L���Jӭ�Eϡ���~7��ա��j�^��6O]X�ו�t$6�Hl�S�5�:�L�"��$�n����v���`�Pa�M�Q�N_G(�iUm��cEmQ+쇦������Cz�q|��\��)E�bBC�!�����9]h2{��M�hn�m��P#CD���Ψ)�������N�x�z���z�v7fpA^��Xj��f�4$�o�<e!��q��jI~w˛��EPhRh6�޹e1�x+x����,�*X�t~�,i�l����L�@��Te҈@�?=��g�J���/{��8����{	�De�n<f��Q�N�~����V�+��(��,�k��1�[���ΩV7	��P���_����t|����A,*ȓ��K@@��'>�>}�dxx"e�PMw�ӄ�a��	��������/���&^<�2��f�e2��$Q?z)P������$
�E�3�2f'�Y�s�F[	QKR��������;5�i����Š;�J>�;��4<���Iߊ�����g�\��9ܤ?[s�5����%=Q�w=��,}�DN�}kv��"���ձ뽧������aҽ�E)����iv������*oSh�����Č�9��T�M��� �GJ0n�*!���N�F����@:҉h*��^��ܿP���^3��G� p8.��˛�t y��<U�BDS{]����Ww�LIؒ����`=i�����W�n���s�S�i���c���Z����NB �2g���`�s5[�G
C;��W�
<ea�����p��k�{	a��j�he�[4H�;�dY"��?�$1O)�)��R��o�@1����wֶF�% m޳a�譚�Gnu�ni�/x��R��o	�ZS��^��L�'ۙ���N-� Cv��5_k���	Tq{<n%���� �@�d6�"��vJCt��|t��ٍ&��˱!�?�������м�zS�-���n�`_���g%��vh�;#�.��m��o�!.�0Ŗp�%Fk	���U�!_��)��xG�#;��z7�d��ޞ�;Y����f�c��:����m���nN����Q~0�m\�i�An4E�`w�����np�l�!ǘ	FZ!��t�\����l^�VG��_).:��̽h�֟������}��[wx����iJ�r��KH�P��]t���M��L�m�i���S6o�M(�P$�.��[�$��D��$n)����1Im�J�O3�MYPLg�u����)���b�b( �TNmqᆆ���Sq�}=�a8a��W8�$�P���V��O�5t���6~�=�5�tz莼��F[ �WW����f�R�p^�nƄ�2���(�\ ��h+��+����*��k��d8��	��s�����U^�T&V>�S�2�JsD����<᮶�_��L+��%s�| �Cyys��Y�)�'��P<\�۔�9�aʹcH�xKɨ�#+	�ǯ�F�2��
��,���n1�u�c���U��M�_��u@�M��ު��X�Ԯ��W�Eߞ�I�k4X�]~��T�*S����:���G x�v�!R�o+�Е&��m!���*�%�$c�X�.SrU��� ˰�Poe�4�W ��5T�n��YxTaNa�f(u�z�>��t�FS�V��ڡ20�^sG���l~���X��}д��7Q��Y$���	��Un���@P~ϭY����jMq���<��@�3j��&��Ok*�=�J�J)�/j]4��(��*��!����9�j�R�>����$�S��|?U�hF��Z4��I+�ᰂ���R�Ck+��R0;�6��O���{��n�.�#U��(�r��!:`UUyj@�:��ҁ���uD�Å%Z�/���L{mЛ�B9������U��B�L���q�c�	�on�沓�q,l��~j^��W*��zK�J�p�ЭW�M��ʹ��Ș����;����Thj�����y�7�����P�꺴��5M���Fs��ݦ�!b��6,	����ӓ�%��lM"�X6Y�6�,TԫZ��K�3��9L��<�J�MϠ�pdo�oG�b���=�jҪ���
{*N4�&�#7*�B=�ʊLw��}�Ch'��������	@� �
K�h5��6���p��ƻ��5���?���^��0�0������1��ǃ�F�y��,�%3[��������Y�
endstream
endobj
136 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 2054>>
stream
xڝTkp�^Y���dQyB���Iy��6&��A��d�卥�zweK ɲ$[�.~Ȗ_2F���O� 	���0)�hK e�ҙ4i�%�L�2�Й��3w�w�����#B���H�ܾ���n"L:�ٴɼ2�퍸��b�Ƙ���k7KĽ��p�8N%����&���{?Z�H^G����1[3-f?,�����H�"D_�~�/IM{w~���,\�(�L�h�P�bKV�\��l�,g��%��L�p�MŶ�8��Xaı��9;�6����M��'qZk�r,:#��e�8���3�_|`�fRO���dR�L�1�O�pk>NŀE��&�a�3F0��֒,��X3F��F�>F/��I�h���D�cfX&�&(s22_��j�/C0f.<��|K���0VK���V6ƣ�1=�PF�M�BQ41���!H�K�E���ވ3�qc]yY�_Uk)�h�|k�����`�X��r��T^��%1A<X6S�ń�D��/� ���m���J���9�"�WH:���C2�d��E4H�SO��<�C�Hq��)��A���Kg'=[�0�$�,,�G�Y���λ��
Z�}��(��4xRh��$�6w�@k}{ӡ/~P�"i-S[r��ה'��]V�4Ox���|��}�I�g��gqs���Μh�=H��:!��kA����T�y�qZ�}Q�F�ktB[uKu�������x���繊��μ��H��:GDA�`�`�W�F%|e����R���S\���e~�9I���.4��r�������8�%2+�	er�V�� @����
D�Nwݿ]
^��/Z��)�4�-~+����fBu��?u����Z��a�9p���#T��?�W��!�@�Kp5��DQ -��W�Ϣ?���ϣ�=ձ|�Qn�oD!�8]|��L��6/�N�ⴷ�?*�E���5�.�����>T��}1K�F��1��X���.-G�N���7��V�*հ�ج7����R�`ǟ�O����;�y�K��*a2|�;1�g�w�7�}��K*p����D����>��4y�U�W]Q�v�@j�X�Cݽ�>�=������W��,����,8�~���������
�.̭{�3��d���rjM�ZY�u>�2(�(6;�ozP�HBw�ܦ�
�]nS+d�L�5H�O��/I�vEu��?�Tف���w�#��`t�򷨬�τ��w�C%��{y�m�#i��v�f��R�����񡁾ꗽ��3��'b�5�#ߕi�h�^X�	�h�i��3|�������0�^�;�I��~9�r���Gʻ�҉/�C���ȇ�r�ާ =,���ڝ�#���J�o��ܻ��*8��T1�tr�M���U�� ΂��o����ܤ���bP���Y���h"j�v��������c�Gb�LanUX��-��V}�
h�OV�6�*����|���{�3�
�@������i��H��l7�� �f5������*���Xdg�.��8����d����I��ZUmnற5��Q��Y[
�U�v�U��6�ƚ�=�Q�)YP�| \��\�j~��GZ����
@sUke��/�o���Q�Q���	|��:с#G�c��о��Z���a;=��V�:�Mx�˕�KO���Bi���&��b��wKd��=`?�?V|Z�%8��K���VL	����ؠ��`R��擇�����
����aQ�����a[[j-��Y� >����(z���g��CJ����1t�.�F�yS�7h��-2����p�Jڬ'(&��s��%]��=@n�W�{��unc�
GL��6�,!,����۸��P�o�*oׅ2��;��F��]b�J�/�6x���A��^�b�jPuL��|CP�2Ac��{�8������J�4�u�:���M6m&�RvGa�S�a����2Cņ
4�4��᮰T9E�<�_���L��S{��M���DX��os��
endstream
endobj
138 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 2887>>
stream
xڥV{pSU�!5\���7��`�W��g��Gi��6m��I��&��&�{�j^-y4�;mi�@y��,�,���3벲�����:�۝�
;;��������=�|�����9""%��Dik7o^���EY��k�L>YY"8�NZn��!�{E�}3x���u����θ� D�nO�)����m��A<�m��H���Z��|tif�#Y�r�NS��+3�*^�b�b�#��+�ϕ�t���2ev�^�*���?���j�5*�Q��R�ח?�lYMM����ʥZ]��+k4z�r��R��V(Wk���WrKU�i�K�����Uz�N��-P��0��'�E٢-�\�@�!vZ���{.�A,$�ˈǉ���*b5�"��XGd9��Ub���s!"R��E����^N)�e�����>��"�Y�����ϙ1�:u)Ϥ�~aSz�GZ������@Aq�N[�T ��y˲@�������닋il�������O�,E�dOU�%��	�ɿ�'�ɗ��Ǣ`�n��UO�,m�?�@
�B�P!�
�"�0=F���p��h�#��}@�8Kq�o��#��r��!��;͒.?�4;��>���~jwj��j�V�Q,�A��͸���\�fw�j ��FK(H�Њ�]����߁�n�i�� ����4���p�0�6y	�w	4�M:���a��!�ݭ���P�,F[�BYj���{{!Bq��-l����-vS�^`d»�q��v�.����f���!���f]	�т_ G��EG/t@̎��u ���Z�P��0n�źϣzW�+<�_�Rk.1س���ek�i�v@bR�]{�����{�f0Q�LRvh0L��>�=şe�6� �p��@���G!l�����78�j�-3�J�`��z���fZ��}������tW�zy��,�8xX�Ï���X��\�������<|��\�X�7ua�FrSr� 8���ރ��������yCرiV����7N|� ]6��*V3�uqjzS�Q>h�N���P����)SdB����s�[Rc���u,TR�ir�&�n���	9�����5��d|���6�qS�e���?�#	��U��'D<\_[ȿ'��>��>��l�X�ZF�)L�����N�>+��l��	�Y!�h�ں?d�!�@�-T~.����_���ن�i��e�{*[�;! �?�r�W�l�y�"Mjzs�uq�R'��p�#SH�Yk��p{��1�#��j�k����E��t�y#�L�mcZmN`��E9}���h F�����e��+@�� ��[�f2�H��������y��` qp���AGb��0V��gfm����A/�m�~��_���`uҬlr�L-��bِ}�Goי��tO "3X�5��a-�r��O����3��׹�s�d���'��(-fv����HA���ؽ���PG�[-d�E��%1��E1?�O�G�zv�8K�MxPX����O�(�pN\l��W|�A<�w 4<�������ԙ�s�,g��ĸV������FJ��8p���IQ	�UL�NH��`�5�|-o�ȭu�Ppb �?�?22
��m+�(h�5ٛ1��u����u���g����b��f�75C=�uo?�5�L�z�<ME��Q��<��R�/D��c�<�����^B�A1Z��H��#�Dǅ~�8��c������!!k���oѼ���<M�f�ٚ�+34 ����
l���I��߷wy��L3O��Qi|���|��'��+��W���b^�? �,��n���%H��h��Ƚ�P{n7�1�l1���ԇ"�}��G���x�X��T͘+�;��7�e�:'yv�2>d���Ё!|���v2n*ʪT;�**N��xx���8��zp-�1���.������Kb���+eqϴ%�P��RdQw�c�I�ZJ၌39��q8v��g���G���b�d�(f��~��gr/)�*1���|�@�åO�'H�"m�������2,W�ۣ�C�{N��ux���ڞh����B��o��u��g�'�hd�i�n�������f�����L�J}��zZ��6�#%#[�����8�Xε����!|^���������b�@��e��/�j��!��F�|���\k|���ׁ45��t���g0��tlRzHt���o�]�[+��i;n,���g-Vlv�)��m��G�qL}L1]��px�ݟ:ې�k\
m�٬��������Їb^����\�������.�g|��K$G� Z��B�t��ħ�Ս���'>9������SPP��Z���f;�eA؜@��/�?vI|DH�Z5�Ɲ@6`;Y�GOO��wph�ƹj�����b�B�=]��^�I �nGЃ_m<�������Q��P`15���%� �;�=>d�ͪ�@��-&�=Z������K�yB@�v�s(�)fU�Uۊ�\[�G7���`�[�t�J0&B_)�b\��6顙4�Y��u3��r�!t�3�:���q{�u�Z=}݇q��X(m���
r�߀���+�]�v�a�Z�����W3t��a��	���͐�s���\�G%�(��t���-��Q�I��_�/$Y�H�	����w�;����Т���i�w��\���������t,x�&k�w}pU���NI������Q�m��A�u������9m�Pon���m�����(HuInT+88�;��.���>�
v��
�=��ܝ�z�v�b�K�T�֖�*J���S���w�p�`��O#iW�̔�[c���� ����iU1>���ҘD���T�NYM��I�ͦ�I̾4�˝��.��}�#
endstream
endobj
140 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 2928>>
stream
xڭV	P�wO�"����V�����hm=�k+�=�b=@�@Bn%!��%�"$�H���  �h��G׳Z�n��mm�ݙ��s?g�`�jw;�����7��{��{��{�Ɉ�b0�̱�7��v͆�W�z{��KMtŤ(烒���j��<�Ⱘ��8�߉�1v�d���xԸ�x�w�qc����b2	��8w��}!Q T�rsv��	�3��-Z0���ܹ����D��|��^A����d���
nb�p�92�lvFA�l�(�3gqe��ܵ�"�H�������<���C1QP ��y"�*AO��XG�d�adD�2�#DQr&�1�1�����x��c�M�[�wI�7�1�1�3606261R���g���b�vFM�r�|a����QsF��č�oG���1����<�� B��:OMg��
0��ln���b<��w���6��p���)�K@oY�@�w����Mn��P�KT%_��_G�*;��k0����z����r���f���"~Bq��B��o�AF(3�'>��r���@(� 1���l�K�f��=Pk򛚌> ���AF�@
�������@�QL<�Fw8Tf�D��\�.��2�j8�K�pKw8�Y���V��T@�Y�F�=ȃ
�����{��f����R41�ϋ.ѓI���2�o�����2��O��`�V�)j��j�����7 x��|���m9yk�@����a�3O�dQ��	li{np3��I���3���>^q�<
���]��m"��ktyN��𨠜S&C�P�Y�&���@��Zg�t�\=����x{�}lD@���Q�X�+i�T �I�%�̼t �s�I���h�>p���0|�4$���r"�2�D���g/ �M�}0�m�Tx�L��j��DF���R���~(�q�T����ė䮧FUY�@ML?��34MD�P�Y|xg��
	��(v���C:+;�h��_`o��@����$l�L+x�(5es2`\m5�m3O}��_��w�'�9����zm]`OM�����s4Ish�^�y�^��k/��q�`4�tK��1� "1��)���y���CG���&Ns�g���:�r7�%kiy����>Ke��x���l\.Pv�3��B�,$Frv�[��.���B[߾���_�C/�~z>����$ev�$qI��c�3��A�ˍ��uJx��K!������a�]*'����3/�Gw�)��M�߃��9;�=�<�l���X-!𩷫�s@OHjw7�Z�HmJ�A�H�"��m���$Z��@y9ڤ�~X�-�(�m��Prw��"v"��ļms�@ߟ܁��4��&��ٿ���a��,��ɶV�wrHb��re(�e��x�)����V�"@_ÞVɼxMF������"�
�
����h/�(���z�%�6�yp����G[؆�`T�vdl.��\�{����
���p��1ذW�$�c�CL5�=&���z���>ɮQB~!_鑆�C��NhcTejP[�y��և8�?��ޠ���=Y�'@B��Wp��BU�������U�q0s�����$��/�mU��}�N j*uB��ݢU�P7�����2ŝƙ�"('$u�N�xl��Jg����:`o��[CU�����>x�
�d9	I�4kW�F`(��7��|�_a�o�Bj��c�6O�~wk�p����ڍ���.� �����vHq�J,�.^e�O�+��}���:$��$�TX*�n/���~4�;ŉ[,*�|l�Zxf&�@s�;L��ɫ��W�T��r�.��NIi�NB������8z �5��	io��$�z����J�P�M�:kԨ�<T� �Tld������leU��[j��$�Ak���Ѫ}nYk�GxQġ��k�+��`c�P�<��S YPT�K(�ݕ�e�(���	k�*����b\=\���e�RS-�u�U	V��l��C�zt���5��6����W�w�p[c�3�������W啨��gC�oߑ���ش�I�R'W�� D�]qV�{���I��׏<���G����N��^�go��"�p�]4�F$�D�O�e�u�Xv�~�d��_�q����qb`5=W@���@v}�W��Ϋ�gԐJ/C�%I5d��Jq{�5�a�I���ⴤ3��ѻhB�N��v�XDV�%ۡ�� 4ԅ�P�K-�Ñ�@.F��'hl-�3���B&lk�G��mMIΊ�D	f��։u�^G�����"O���-�/7��������$T��9�X��3$5��:����u��=\�z��p����)�Y�+�ev���g4��37�b|\G��O�~|��G�:�gl�'�zD܍���q3j��",n�T+�@s��B%l��k.��������Xy���}�D��; ����մE�4�������7U��{ÿ˭�dC)_��+w�'�W��0�jE?��m1�
��P�t}m��2�mo�y���p���w�s�c:��A����1:�_4�C$\��-���nq�<��;�V�y�}�t�lm���P �>�9�����C���ܴ�q�1΀F�D�Ã"1�2�Z�"i�: 2���$��uS;X��%��+k39)��S�S�lm���V��
������<M�N��=��L�L�R28n��m�~�g�r_�o�Ģ>�Ʋ�^��>\_��4�r�.�L&]�/ʧ'�kL�6�o��ц�-W�m67.b���ӷ=n�M��v�R�I�j3�͆4<[��Z����"��-�����a~�΍@�����C?^�m|�V�S�5�?�"�;@㮵��D��O%�\n$�G��Q��Q��1�����1m�o�i��Ƣ�O��{�2
endstream
endobj
142 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 626>>
stream
x�}�[HSq��gg7m/�����`0I�Q1��E�a����<m#��vlj�il�ǎh9s�K�6H�-��R=�`Ѕ��g�%���7_>���K!�Q��r��|K�qkk[%�5j�D���T�Q$Qr�Bfh���!����wc�_�<��b� ))J����j�WY��}>��)rf{)WYWW[�U�|��|.��õ�D�ඉ�ŵ{�.A���'���}��"Xln���s4��q������#trg���`s��g�.�^ww�(��Vo��� D�f���\�A��A�H�@R���Kݗ��0�o�'�?�i�N�@�h�,����e�倛�p6����I;���(T6_"�׈b��P�1�ATo�q�e
���$��͌?Œ	>�`}V]�ƚ����BA����m~E��@N�"gH)������3�>���ϱbӰ�5��#�زL�L��i+�b��A"����/�`/sg��if/`w~���֐�~��OR.��+�����L����L���F���ԕt%5k�K��
����Ij���ߥ^�>���'XЕ����Hl��q�B��5=�u{b�jrsZ��]=0�@�[M��L��6�����a#i
endstream
endobj
143 0 obj
<</Filter/FlateDecode/Length 234>>
stream
x�]P�j�0��+t��I
��FBJ�usz�ѱ�԰��q���n�a	����'Z�ukt ����`�Fy���%B��6$/@i�*e9	Ghu�SL��~?|t�Ց�_�N]�?�����V�Plu[�u8�f���?ׁs�+�^���!b_^��f�ݩ�	�s�8�	���L���I�*������,+�5MIШ�M��"<a��,�}��U��ݝ\���M?H��rm��&g]T��e�m
endstream
endobj
145 0 obj
<</Subtype/Type1C/Filter/FlateDecode/Length 346>>
stream
x�cd`aa`dd��r�v�	�v��4	����ay�s����?�~�3�g�{���I���� ���"�	�Hu �h%������[U�WP���j``�g``�_PY���Q�����`hii��`d``����Z�������X����X��(�'g��T*h�d��X�뗗��%�����i�(�g�d(�����(���(�%�*�}�&��sJKR�|�SR��Nc4 �L��,?:���ݲ�G�|������o��#:yN���I���ȥv��U����*���^���Q��q�ܤ��I�8����_��[~:��4��<��x�zx��p���3���y�? �Os�
endstream
endobj
9 0 obj
<</Type/ObjStm/N 137/First 1144/Filter/FlateDecode/Length 4102>>
stream
x��[�r�F�}?_�o#TJ`�/��T���V�8�$��h�@����А`<>_��HM�$3�i4��}Y�� �g��&��3!���	ŴRLhf�d�0k�9���3�Y0���:&q�p�I��^�H$H&��g���0t�=�La>йEQDR	��Aj�4�R�0��S$�d,�sL���L� yX��)�FA!�S*R�@5��bށ%�:�TІ� ֐�j	���`�K��$���0�e`N�5̃$�a�$���� �Q ��<(��f���h��2�� B��q�8\���<�Y��1o!6�1�������s8	t p<�@�?:z���w� ��� b� ���1�e9�t�8�p]@N�k�	�	ؒu+aJ����	����+�W�2���zp&P��|0�ut� �����:]��UAzO�ᬊ�� �6���<�YA~��]\;:�(p�X*��.�o�<���N �<)+@�K�K��U �
�#u�j(�`*iX؎�%gp3�!���)p�$�
&�z����0r�W��4���@�Fz

:z��/��iHMxQ<[G�
�  !Y
2�BF��:"Jha�%Yc"�&Y�7��BlIZC�@�Y%�_�:���P����U=�X]�t����4z^-���#3��a���UuY�^	�}��輘�WR���trO�Z��QZ��4��W_��oe&7̌�c��&7p'i|N��̹;3�f����9���S*�s��I�9i�s��A��Sj5��{���!����r�(Ԟ��|pɜ<G{���̮�!� �F��=�r8G���6D3��.�\�؀&H���D�G5̑f/�yMh�磗�i����A4 ݳE5�(��ً����_���~|[����t8=�~��*9eS	;Y*MA�A����'����r<P!ߑsX��,l�)��Je5�S�˩.('`}X/d{�B	����s)I!��a-�z�S�%���R �(R��A,6^�
�� �B�ҟS�D�����z���TQ;s�p�McP9
�a��Hhw��5�y��Z�uNj#w7`��8�T��i��H'�iOEłZ�'�x�@�߮C��Nj��Ԭ3�5X�N��0�{�1�S&8�d ����ȹ�h��F����_Ǌ�{��'�\tp��M	r/�
�)Ů�z�N� ��No0�mA,SN2Li���ش�ˡ-C�UQ�H�T��b��<��K"�ᅴ�CBGr����0����\(WM6qR��"����xu�%he�M�/RSfD���k7���:K9j�{a�O���^�ʽ;?���]]?|9}��)�.?-�Ƌb�W����o8j4!�L�l����ֹ����"{%U�/6�Ȥ!v�R��P�w����Z-�������őK�}��<�(]��Dhq@C�CfRy�-�!J��j>���ϷmAm���Xb���#<p ��!�xXT�MuSΧ���t5���缚���&�����T��(�=�%Iciѱ��4�Q�)�d�?��܍�w|�i��b9Z_{��l5n�B�eK�>�+�g���2���$���.6��ŴD�,���Y�����b^��}*�y�\������;�=���X��yB�?]4e#pơ�bk�QS9=4�
[�C��xX��:/ǓE�������E�5H(h&�P)ֈ�]rz�@�nP'̺���*��e�My_�˫#�QK�q�v|_�S��̺4�%�F��Hf���ʜH#����#�����XawNܚΝI+\��>sߐ���8s���7|'�o�N3/��ّ�0+2�ӂ��'�2��|b�3�x��'�6��˂`㳣�����Q�B�6�Bbv���l���l��Ĭ�Bbv����o����EB�+ B�5���we�я����A��X�������4�<���J�C�
��h��ޥT.��Y*����lc�l'�ؚt��fR�az��iϜ
<�s�x��=��$u����Q��S(�aϤ�.7��^
����9A��j��o+t��Sbs`��i�wa�����*l�#=��zn�Zԃ�=V��{���n<�'=*�~@�8	a��3�:�}+��.S�wu8�+�E��������cQ)�Yqt:��t5��j�m��8U�3l�u���8�EV�?[�ȜT�jH�s�.��y9�e��ŋ�Y��ܢj�T}�*����`�D����3=�j��٢�9�ס������������r��ɝ�����j>�4�	�4��t� zY.��Z�7��Z��	���X�-�02]�E���ru�@>�dP�]�-�q;��Ŭ'��*�(�dU��ٲXM���{��g��`�У��%���׿D�;�z�7��.�K��c��~�;�"Ῥ�ag�ٗ��@��{����UU������1�y����%v�����Q,���@a0�Rn���U�aV}��b�[�!p�񌽯��v��tn���]w��
��G���;ax�����g���q]�o���U1v��-uB�����OŜ=[#�`2DR��Ix��z.���tfQ�b�Z`S�&wc����N�,:�%jxI�_��OmJ2]�C-�o��t��t���LÒsǚu^,��bR,Yc޸:�b-���y���U�c�+-�IЫ$K���%K�Y��^��v@��[�D�ϫ�-����O��xm��R��J�� o��x+����+�0�	�0�	���n@ �	d�"��=�ڸ�2I�$1I�$1	!c���Cr/�ll�>6Q���UX�4���A7/�4�MȾ���*uu�t7];KMso
���jc���AQ�����������}*�;v�Eq��n�SF{wt����ǂ�¶d�#9�@
<z���q)��"�\���d�
��Yl$���eY��P1z�,�[���o�v��)�����2�����ɸϪ�+��H�M�#Xyˈ�Ч����H5��\A���n{�1G�]&��o�!W�&�Xi�Ĵ�N���y3�͸��i��h&�扺�Q��>$4m�s%����b��
�b+�/}���!K�:����7���rӘ��+�j�|3n-ծ�1ͷs���'6�MǷ�kv�l�n@�V����Ո�&�3���������Q|,ڻ��z��'�����.��[|�=>�ڽ/�b�ɏ�=qn %�����?�׻~��'J�{I��'hNG-��oa�k���G�;�����d���u�7��4�����yz��7U'8�#Sq������rͼ�s�p�6#��k����9����g�N�'}��9�z�r�^�ǌgE���8��L�C'�\=��!R�9=#�����7�ɝ���#�uީ��p1V���;�H����@�ޅ6t��Z#^�p6.䄺��T��)��N�PMT2Rn;.�ac��
]��崾[Ʒ�S?�����x��N'�����'Ք��"�s0z>^���W��~~�����z�<���V��15k�ߋb9Y�����������^��]M�Gϖj&iH�q����mR9y6����.����棗��-�H�9����zv���j�k�����rVЋ�i�CW�YۯGO�=6E7��R�G ����������] ���r�W �Л}�I��'�6~r��j<?��O=�����b�1)��ax2�Fc�s�car���|���[@,sԫ� u���`���t�Y>������'a0���O�ȰF3���TmXK>��7�t
��b��i��|T�'��zh��E�o�;����N�8���S�w�O�o\/�X'�`�����X�c�&����,l���ڒ����+����������E�n��b��`\6�'v�ѽ�Е�i�h�HM������p��ׯ@�|�iԡ�is>r7�C��]x�Ť��?��e�n^"��Z$�FI�Q��0^����o^�����J|���9:z�a��}���6Lf���IDR�M�@b�l�,��/ʛ�bQ�'��J�n��͌�0�窪��@O����
endstream
endobj
155 0 obj
<</Type/XRef/Root 1 0 R/Info 2 0 R/ID[<e3173477d8d260c99d3540add2536bf3><e3173477d8d260c99d3540add2536bf3>]/Size
156/W[1 3 2]/Filter/FlateDecode/Length 372>>
stream
x�5��N�Q��s�WT,TP*�E�ʠV�Zmke�2UA-�"�����Jх; _��O�{x��Hؘ�\6��rr��MN��H*�d�[|��p?�"~FQ�!+:h��c*�/��9�c�x3��p	�U��-GU|�����;�F7�V�w��sps���<��
��9u��ۆ|��,�",�<�^,�X���Ë������؁71�W���o�m��kx�я�X�5x�c��F�b3Vc�b �a�؆�x	/c�}���n��G؇�Ǉ�p���k�|���%��:���.ީ��f����i5��}ͨ�ܶ���O�g�c7��ɜ�p����~�$~�o�]M<!���= 
endstream
endobj
startxref
219232
%%EOF

================================================================================
Title: Institutional Alignment - pourteaux
Date: Date not available
Content:
We are in the midst of a dramatic political re-alignment. I’m sure you have noticed. Years ago, most of us in open societies accepted the traditional social and fiscal axes that defined political life. Kitchen table debates mapped to these axes as well: social conservatives argued with social liberals over gay marriage, and fiscal conservatives argued with fiscal liberals over funding for government programs. They all basically agreed that the way to enact the changes they want was to get existing public and private institutions to better reflect their personal values through, for example, reform or competition or elections. However, a series of events over the last decade have prioritized a conversation upstream of any fiscal or social issues: are our institutions valuable at all, and to the extent that they have failures is it even worthwhile to try to reform them or are they so rotten that we need to raze them and start anew?  I say this is a political re-alignment, because traditional adversaries are becoming allies (and the opposite) in a way you’ve likely found disorienting. Neo-conservatives like Bill Kristol find new allies in the Democratic party because their allegiance to American institutions pre-empts any difference about social policy or budget issues. Similarly, liberal populists like Noam Chomsky or Eric Weinstein suddenly find themselves allied with Donald Trump or Peter Theil as like-minded adversaries of US institutions.  Institutional failures over the last decade are what pushed this conversation into the forefront. There are numerous, but a subset include: the Iraq war, the 2008 financial crisis, the denial of the US election results, failures by supposed experts during the recent pandemic, and the January 6th insurrection.  My goal with this short article isn’t to assert my own opinion on these topics—though I certainly have one. Instead, I do my best to put these aside to instead map this realignment into a familiar format: the political compass. The traditional political compass that mapped your perspective onto social and economic axes no longer does a good job sorting people with their political allies, as the current debate is upstream of these concerns. Perhaps there will be a time when this isn’t the case—say, if institutional competence is restored via reform or disruption—and then we can have the luxury of debating traditional social and fiscal policy points. However, that debate has been irrelevant for years and its return is far from imminent. So, to accompany this realignment of society, I introduce the following Institutional Alignment matrix: There are three primary questions we all must answer: Conceptually, do institutions offer any value to society? Currently, do today’s institutional hegemons1 have value, and to what extent? What role does technology (encryption, AI, automation, cryptocurrency) play in remaking society? Based on your perspective on these three questions, I’ve formed eight archetypes: Institutionalist: “institutions are important, and ours are valuable as is” Contrarian: “institutions are important, but ours are rotten and need replaced” Reformer: “institutions are important, we should use technology to make our institutions better” Sovereign Individual: “institutions are important, but ours are rotten and need replaced with new technology”  Kleptocrat: “institutions are only valuable insofar that they allow my looting of the public” Tech panopticon: “institutions are only valuable insofar that they allow my mass surveillance and control of the population with technology.” Coup strongman: “I want to usurp institutions to seize power for myself” Cyber-anarchist: “I want to use technology to wreak havoc and burn it all down” In this conception of institutional alignment, then, there are three axes: Support for Institutions as a Concept (x-axis), support for Today’s Institutional Hegemons, and Tech’s Potential (red = techno-optimist, blue = not).  If you’re like me, you will see that such a framework instantly clarifies today’s disorienting political landscape. I’m interested to see how you score on the quiz!  A note on Materials & Methods:  I coded this quiz with JavaScript using the Plotly library. I chose five questions for each domain. I am open to feedback on these questions. My goal was to create clear, concise questions that broadly covered the three different concepts. I also tried my best to remove the question prompts from any particular geographic or cultural context. For example, I asked whether there “are countries” that offer good educational opportunities to see whether the user thinks such an institution exists in the world, rather than asking whether their own country offered these opportunities. The exception to this was asking about the UN, because it is a global institution without competitors (yet!), so therefore should be relevant wherever the user sits in the world. It’s worth restating that I am happily open to feedback and revision of this document and the quiz, archetypes etc so please send feedback.  Thanks for reading pourteaux’s Newsletter! Subscribe for free to receive new posts and support my work. An “institutional hegemon” in the most dominant institution in each domain. Eg, in law this could be the International Criminal Court or the Supreme Court. In health, it could be the WHO or CDC. In journalism, perhaps it is the New York Times. In education, it is Harvard. In defense, it is NATO. When asking “do you support today’s current insitutional hegemons,” it is these dominant institutional powers I am curious about. I like where you are going with this, but I don't understand how you can ask if institutions have any value. Society and institutions are inextricably linked by definition. Human selfishness, greed, and ignorance have always driven power over institutions. The information age seemed to bring a glimmer of hope for institutional reform until the powerful found out how to usurp social media as a tool for modern-day propaganda. Today, our institutions are failing as we drift into an oligarchical world order. I guess that makes me a sovereign individualist/reformer on your matrix because I truly believe freedom, liberty and the pursuit of happiness are basic human rights.  Very welcome. When Vitalik refers an article, I'm eager to learn more, that's how I stumbled upon your high quality content. I'm deeply interested in learning more. I'll keep an eye out to check out more of your content, and always happy to throw in my 2 cents. Thanks No posts Ready for more?
================================================================================
Title: PLONK: Permutations over Lagrange-bases for Oecumenical Noninteractive arguments of Knowledge
Date: Date not available
Content:
zk-SNARK constructions that utilize an updatable universal structured reference string remove one of the main obstacles in deploying zk-SNARKs [GKMMM, Crypto 2018]. The important work of Maller et al. [MBKM, CCS 2019] presented $\mathsf{Sonic}$ - the first potentially practical zk-SNARK with fully succinct verification for general arithmetic circuits with such an SRS.
However, the version of $\mathsf{Sonic}$ enabling fully succinct verification still requires relatively high proof construction overheads. We present a universal SNARK construction with fully succinct verification, and significantly lower prover running time (roughly 7.5-20 less group exponentiations than [MBKM] in the fully succinct verifier mode depending on circuit structure).

Similarly to [MBKM], we rely on a permutation argument based on Bayer and Groth [Eurocrypt 2012]. However, we focus on ``Evaluations on a subgroup rather than coefficients of monomials''; which enables simplifying both the permutation argument and the artihmetization step. Note: Inaccuray in sec 6 reg public inputs removed - ack. Patrick Towa BibTeX 
Copy to clipboard
================================================================================
Title: 2019 Was The Year of DeFi (and Why 2020 Will be Too) | Consensys
Date: Date not available
Content:
Products   Ecosystem   Company   Blog   Article 2019 Was The Year of DeFi (and Why 2020 Will be Too) Date December 5, 2019 Author Mason Nystrom How Ethereum will create an open financial system with new financial assets and protocols.  Reading time 16 min. read Share So far in the story of blockchain, every year can be distilled to one overarching trend. In 2009, the narrative was Bitcoin. In 2015, Ethereum. 2017 brought the world initial coin offerings. The answer for 2019 is unmistakable: the decentralized finance movement was by far the most impactful trend within the crypto and blockchain ecosystem.  Google searches for “decentralised finance” surged 273% in 2019 compared to 2018, according to our seo consultant: Victoria Olsina. In order to understand why 2019 was the year of DeFi, let’s break down what makes the open financial movement so revolutionary, and examine the strides the phenomenon has made towards creating an open financial system.  Open finance—or decentralized finance—refers to the paradigm shift from today’s closed financial system towards an open financial economy based on open protocols that are interoperable, programmable, and composable.  As the crypto ecosystem looks to expand, the term Open Finance more accurately describes the intended destination, because Ethereum is creating a new on-chain economy that integrates with current financial systems. Open finance is not about creating a new system from scratch, it’s about democratizing the existing system and making it more equitable using open protocols and transparent data.  Interoperable The current financial system is comprised of walled gardens with limited transferability or two-way access. Where interoperability is possible, it’s controlled by middlemen and rent-seekers. Open finance is defined by platforms that can work together with a degree of transparency with functions that complement one another.  Programmable Bitcoin revolutionized money. Ethereum has enabled new types of financial instruments and assets that are more customizable than existing products and services. Digital assets and securities will usher in a new era of financial mechanisms and growth.    Composable For many, a favorite childhood toy growing up are Legos, with which what you can build is only limited by your imagination. Composability refers to the concept that something can be selected and assembled in multiple combinations (i.e., Legos). Ethereum has shown the value of composability, having already become a protocol for other protocols such as Maker, UMA, Augur, Compound, and many more.  Every financial system requires numerous traits to become an economic engine, but first, we must define those criteria. There are a few generally accepted characteristics that comprise any economic system.  A functioning financial system contains global, efficient markets that allow for:  The ability for borrowers and lenders to transfer capital A process of exchange and trading (i.e., derivatives) with the necessary liquidity Means for individuals/investors to move, save, formulate, and allocate capital The capacity to offset and manage risk And provides regulatory protections for investors and individuals So a new financial system that is open must meet these attributes while removing the typical intermediaries or centralized points of control. Let’s examine the above characteristics and how they compare to the Ethereum ecosystem.  For a financial system to provide suitable market liquidity for borrowers, it needs lenders – and to obtain lenders a system requires borrowers. Chicken, meet the egg. This problem is initially solved via speculation. Crypto, which is a speculative asset class, has managed to create a few interesting lending and borrowing protocols.  MakerDAO was the first protocol to create a means by which individuals could continue to speculate through collateralization. While MakerDAO vaults (formerly called CDPs) have enabled users to borrow dai using ether as collateral, new lending and borrowing protocols dominated much of the 2019 crypto narrative. Compound and Fulcrum both create pools of capital allowing users to lend or borrow cryptoassets including dai, USDC (Coinbase’s stablecoin), ether, and more.    Dharma was originally competing with Compound now leverages Compound’s protocol to provide its customers with the best interest rate possible. Dharma achieves this through its “smart wallet” which automatically deposits customers’ funds into the Compound protocol.  Most recently, MakerDAO’s highly anticipated upgrade from single collateral dai (Sai) to multi-collateral dai (MCD) was successfully completed. The Maker protocol upgrade also came with a new dai savings rate (DSR), which provides interest to individuals who keep their dai in the Maker protocol. In the short term, the DSR is a smart contract that can be integrated into any other exchange and may become the base interest rate for the crypto DeFi space.  Long term and in the most bullish of circumstances, the DSR has the potential to become a trust-free savings rate similar to how treasury bills act as the risk-free rate. The distinction between trust-free and risk-free is subtle yet distinct. While Maker’s protocol comes with elements of risk such as smart contract risk, it does not require trust from any single entity (the protocol is governed by MKR token holders). Eliminating the reliance on large organizations, including the government is a powerful tool for reducing systemic risk.  These various protocols showcase the power of composability: 1)Dharma provides an open platform by 2) leveraging Compound’s open protocol, 3) which predominantly lends and borrows the dai stablecoin created by MakerDAO’s protocol, 4) all on top of Ethereum. Boom.  Financial systems operate through open markets and require robust mechanisms for trading and transferring value. The 2019 trading landscape was primarily dominated by a few large players, predominantly Coinbase, Kraken, Gemini, Bitstamp, Bitfinex, and Binance.  This past year showcased crypto exchanges are primed to become the user interfaces for investing, trading, and other activities. Most major exchanges offered dozens of new trading pairs and developed new products or services such as mobile wallets, educational tools, and token products. Similar to Apple product stickiness, crypto customers will probably remain loyal to one or two crypto exchanges because of the lengthy onboarding process and people’s desire to custody assets in a single location.  Notably, a few exchanges decided to focus on capturing institutional clients, building out custody solutions or acquiring the necessary infrastructure. While centralized trading has been widely popular (and profitable), it’s not quite the new financial economy most crypto enthusiasts and entrepreneurs are hoping to achieve.  Uniswap emerged this year as the go-to decentralized exchange (DEX) for trading cryptocurrencies in a disintermediated fashion. Uniswap reported trading volume over $8 million in a twenty-four period in November of 2019. Uniswap currently comprises 33% of all DEX volume which exceeds IDEX and Kyber. Another decentralized exchange dYdX developed a platform combining trading, borrowing, and lending. The dYdX DEX aggregates spot prices and lending liquidity across multiple exchanges for its users. Notably, Binance also offers customers lending capabilities on its centralized exchange.  Initial Exchange Offerings (IEOs) were incredibly popular in the first half of 2019, where a centralized exchange served as the platform for token sales. Essentially, An exchange acts as the gatekeeper for these token sales and only verified customers are allowed to participate. The token sales were usually conducted using an exchange’s token such as Binance Coin (BNB) which offers reduced trading fees and stock like buy-backs in which they burn tokens to effectively increase the price for holders. A report by Token Insights halfway through 2019 revealed the IEOs initial hype throughout the first couple of months of 2019 before slowly fading in popularity. While IEOs, ICOs, and STOs (security token offerings) have had their fair share of scams and misuses, the ability to raise capital is a necessary tool for any financial system.  In the definition laid out in the beginning, the ability to formulate capital and move money were also present. Ethereum has mostly solved these two issues through first natively through the ability to transfer ether and secondly through security or token offerings as mentioned above.  Investing in cryptoassets has certainly evolved throughout 2019 and will continue to expand in the coming years. Speculation remains the most prominent use case for cryptocurrencies, however, many individuals perceive this trait as entirely negative. Tools and mechanisms for speculation are a vital component for any new asset class, especially an asset aiming to be the bedrock of an open financial system. One of the most important and subsequently hardest aspects to creating a new financial system is generating the necessary liquidity required for efficient investing.  Liquidity is the capacity for an investor to convert any asset into cash quickly. The term also refers to an individual’s ability to buy or sell a financial instrument without affecting the asset's price. This is obviously incredibly difficult when the value of the entire crypto-economy is worth less than 200 billion dollars at the time of this essay. Highly liquid assets are composed of trillions of dollars in total value which makes it easy to buy or sell any given asset. The world’s six largest companies have a market value three times greater than the market capitalization of all cryptocurrencies.  How about other assets: Gold: 7 trillion.  Stock Markets: 70 trillion.  Global debt: Over 200 trillion.  And the holy grail, derivatives: over 550 trillion. Futures, options, swaps and other contracts between individuals based on the performance of an asset, index, or entity.  So, how does a new asset class attract liquidity? By allowing anyone to create and trade assets that don’t trade anywhere else. The best part is Ethereum literally enables entities or individuals to build new financial instruments and products which will be one of the greatest financial explosions in our lifetime.  One critical aspect is that these protocols are open. UMA is creating a derivatives platform providing standardized contracts for financial products. Synthetix is a protocol that enables the creation and issuance of synthetic assets such as cryptocurrencies, fiat currencies, and commodities. Synthetic assets and derivatives provided by open-source protocols will generate value for investors who seek to hedge against risk, diversify capital allocation, and find mechanisms to increase the return on investments. The types of derivatives are endless for traditional and cryptoassets. There are already over a dozen variations of Dai in existence which have been created by other DeFi protocols.  Staking is increasingly becoming a method of capital deployment. The concept of staking has emerged alongside the growth of cryptonetworks, specifically proof of stake blockchains. Staking is a broad term, but often refers to a mechanism by which individuals are required to support their conviction of an action with capital. Numerai’s stock prediction tournament requires that data scientists stake their predictions with their capital (NMR tokens). The data scientists are then rewarded based on the accuracy of their predictions and on the amount of capital that they staked. The more conviction, the more an individual is willing to stake.  Other staking models for blockchain networks such as Ethereum will require 32 ETH to partake in block validation. If an individual acts in bad faith then their staked capital will be seized by the protocol. Various proof of stake blockchains such as Cosmos and Tezos have other staking models with unique properties including governance (e.g., voting) and rewards.  With the increasing popularity of lending and staking protocols, companies are looking to help individuals manage their capital and staking operations. Coinbase stakes Tezos on behalf of customers and deposits the rewards directly into customer accounts. Many exchanges have started to offer similar products or will in the near future. Another approach to staking investments has been through non-exchange custodians such as Staked and Atlas which provide staking as a service for individuals. While centralized exchanges have the opportunity to offer this feature for their existing users, specialized services may be able to capture a percentage of market share if individuals are more interested in the active governance of a particular crypto network versus simply earning rewards. It’s possible that lending and borrowing protocols like Compound will eventually offer staking as a service features. More exchanges and applications will offer staking services in 2020 because of Ethereum’s shift towards proof of stake as well as the launch of several PoS blockchains.  Risk management and regulatory protections are admittedly less robust than the previous categories within Ethereum and crypto as a whole. In general, Ethereum natively mitigates some of the risk factors of the current financial system that come from opaque information, intermediaries, proprietary systems, and less effective social coordination (e.g., trust). However, Ethereum currently comes with its own set of tradeoffs that result from rapidly developing technology, such as smart contracts that can be designed with errors or manipulated if not created correctly. Further, insurance risk, liquidity risks, and more nuanced features of crypto networks make open finance complex from a risk management perspective.  Consensys Codefi’s DeFi Score has outlined many of these risk factors in more depth. DeFi is a rapidly growing space in Ethereum and the past year brought many of these issues into the limelight as companies, individuals, and developers now seek to minimize these risk factors. Of course, solutions and new business models will help eliminate or at least reduce some of these problems, albeit it may take some time.  From the regulatory side, things are getting better, but it’s mostly a wait and see what the SEC, CFTC, and other global regulatory bodies say about cryptoassets. In 2019, the regulatory clarity for cryptoassets in regards to trading, issuance, and usage has improved and become more defined. However, there are still hundreds of nuanced questions that need answers, and subsequently, dozens of laws that will be required before widespread adoption is possible. The volatile prices of crypto and entrance of large multinational companies like Facebook are consistently bringing cryptoasset regulation centerstage.  Innovative technologies create new or alter existing business models for profit generation and investment.  The internet empowered more efficient crowdfunding through sites like GoFundMe, Kickstarter, and Indiegogo. StockX created a robust marketplace for sneakerheads which increases liquidity and value for collectors.  While not a necessary requirement for a financial system, new markets open up the potential to further manage and hedge against types of risk. Prediction markets and information markets are one instance where thousands of individuals can leverage their knowledge collectively or independently. For instance, Augur’s prediction market is being used to bet on election outcomes which could prove incredibly valuable over time as organizations around the world seek to understand the likelihood of political outcomes.  Numerai’s Erasure protocol provides a data marketplace where individuals can use their specific knowledge to sell predictions or information about the world which are transparent and contractually enforceable.  Another aspect of betting is the lottery, which we all know isn’t worth playing. However, PoolTogether has created a new “no-loss lottery” that leverages other open finance protocols. For example, PoolTogether allows anyone to purchase a lottery ticket in dai and then the proceeds are held in Compound (generating interest) for a certain period of time (week, month, year). The winner of the lottery receives the combined interest that has accrued from all the pooled funds and everyone else (the losers) receives their original money back. Interesting new gambling mechanisms like this may reduce the negative outcomes that individuals receive from the traditional lottery. More importantly, this is once again a perfect example of how open protocols and applications can be leveraged to create something new.   Stablecoins are cryptoassets that maintain a stable value against a target price (e.g., the U.S dollar). There are multiple categories of stablecoins that have emerged over the course of the past two years. MakerDAO has created Dai. Facebook is gearing up for Libra. Walmart is prepping for the Walmart Coin. Coinbase issued USDC, which is available in over 80 countries.  Binance recently announced Venus. JP Morgan created a digital asset for settling transactions between institutional clients. The International Monetary Fund has stated that “Stablecoins are a threat to banking and cash.”  Each of these organizations are taking a specific route to stablecoin adoption. MakerDAO is looking to reshape the financial system and create a more stable cryptocurrency. Facebook is aiming to become a payments company using their social media prowess. JP Morgan and other banks are trying to increase operational efficiency. USDC has been used as a trading pair for cryptoassets and more recently in lending and borrowing protocols. Walmart will likely use its stablecoin as an upgrade to loyalty points. Each of these paths towards mainstream adoption differs slightly and it will be interesting to watch which method proves most effective.  In the short term, fiat-collateralized stablecoins will dominate because they solve various problems with our current system: cost, reach, speed, and openness.  Stablecoins as digital currencies offer near-instantaneous transfers at lower costs anywhere in the world. Digital currencies can be programmed, tracked, and embedded in digital applications. Fiat-collateralized stablecoins can become native to social media and have the potential to reach millions of people that have never had access to traditional financial services. This movement has already been catalyzed by Venmo, WeChat, Apple, and other companies around the world.  Non-fiat collateralized stablecoins will likely take longer for widespread adoption because it requires a mental shift to reimagining value. New forms of money and their adoption will greatly depend on the ability to be used as a store of value and as a means of payment/medium of exchange. Ethereum has become the defacto collateral that backs many of the existing open financial protocols. As more protocols issue new derivatives and securities they may also seek to use Ethereum as collateral further cementing Ethereum at the center of open finance.  It’s clear that Ethereum has established itself as the protocol that will become the foundation for the new financial economy. In 2020, new and existing companies will develop on top of borrowing and lending protocols that will enhance efficiency and build new products. Some of these have already been created, such as Idle and Staked’s robo-advisor for yield generation. More will develop over the course of the next year. Crypto companies are increasing their capabilities to facilitate better trading as well as new products and services. Coinbase and Binance will continue their rapid expansion through acquisitions and product releases. Decentralized exchanges will hopefully become easier for the average user and perhaps mobile native.  There will be an explosion of synthetic assets and new derivatives which will create tens of millions in value in 2020 and eventually billions in value. Some will be shit (literally), while others will be new and novel. New financial products and instruments are continually being developed that will drive further liquidity and potential profits for investors.  Speculation will continue to grow in 2020 as cryptoassets evolve with the addition of newer investing categories like staking, information markets, and yet to be conceived ideas will further create value for individuals, entities, and investors. Risk management will continue to improve with a more comprehensive analysis of the associated risk with open finance from the natural expansion of security-focused entities like MythX and Quantstamp. Moreover, regulatory guidance will gain greater clarity that will hopefully also be favorable for the continued use of cryptoassets and blockchain networks.  The interoperable, programmable, and composable nature of the open financial stack built on Ethereum provides the foundation for a new financial economy. However, remember that this movement is not merely throwing out the old financial system, but rather integrating with the current system where possible and creating where necessary. The new financial system must serve everyone, not only the already crypto-initiated. Lastly, the creation of a new financial system will take time. While 2019 saw significant strides forward in the development of decentralized finance, 2020 looks set to make a leap. Subscribe to Consensys newsletters→  Products Ecosystem Social Company
================================================================================
Title: x.com
Date: Date not available
Content:



x.com


































================================================================================
Title: Reddit - Dive into anything
Date: Date not available
Content:

    I’m trying to get more organized with packing, but I always feel like I’m scrambling at the last minute. I checked out some of the packing lists from other subreddits or travel tips, but honestly, it feels a bit too complicated for what I’m looking for.
   
    I’m curious – do you guys have a simpler way of going about it? Do you use packing lists, or do you just wing it after traveling so much? If you do use a list, do you print it out, keep it on your phone, or just mentally check things off?
   
    Also, for those who travel often, do you still rely on packing lists, or do you eventually just know what to bring without one?
   
    Would love to hear how you handle packing and any tips you have for staying organized. Thanks in advance!
   
    Hi,
   
    I need help choosing between the Heimplanet Travel Pack 28L or HeimPlanet Travel Pack 34L(Both will be bought as a set, i.e with the cubes, slingbag and dopp kit)
   
    I really like the aesthetics of the model as well as the way it packs. However I am so confused of the volume and it feels as I've tried to read myself to a decision for the last week. Now I turn to you for some much needed stress relief.
   
    My daily bag for work is Samsonite Classic Slim (they say 17L, but i've seen 21L too, so 17-21L). I love this bag and will continue to use it as my daily carry.However, I use it for purposes I shouldn't, mostly because of the compartments for electronics (see below list) and it quickly gets bulky and uncomfortable.
   
    I'd like the Heimplanet to be the go to bag on my:
   
    Work and/or weekend trips (one bag instead of weekend bag + computer bag)
   
    As EDC on longer trips (when we go explore cities we usually take with us a backpack) - this goes for road trips as well, nice to have a "bag to grap" with essentials.
   
    As a gym+work bag (when I don't want to carry my comp bag and gym bag)
   
    So what's your opinion on this, 28L or 34L? (between these two or in general)Is there maybe a comparison between sizes I've missed that you can refer to? (would be more than happy to continue my research)
   
    Have you tried both or seen and felt them? Was there a reason why you choose one over the other?I think both would be a good carry on the plane (maybe even under the seat) so not worried about that.
   
    All opinions are of help and much appreciated!
   
This is what I left with.
   
This is what I returned with.
   
    I learned some lessons.
   Anyone can view, post, and comment to this community 
    Sarcasm and humor are cool, but just being outright mean will get you warned and then banned.
   
    Posts need to be oriented around onebag travel. Posts/requests for bag recommendations should be travel related. Requests for EDC/commute/school bags should be posted on subreddits such as r/manybaggers and r/backpacks.
   
    Low effort posts include, but are not limited to:
   
    posts which indicate a lack of prior research
   
    bag requests without a packing list
   
    posts without descriptions (title only, no body)
   
    asking questions without providing enough context
   
    posts not positively contributing to onebag travel (memes, etc)
   
    text posts with no contextual narrative (if you include a link to an external website or blog, provide a few sentences of context for the link)
   
    Mod discretion will be used for post removal.
   
    "Direct link posts" to external websites other than imgur, flickr, or reddit images will be removed. You may link to an external website within a text post with additional contextual narrative.
   
    First time offenders will receive a warning and a 1-week ban. Second time will result in an indefinite ban.
   
This rule is in place to prevent spammers from taking over the sub.
 
    Posts with referral links and codes, or posts using URL-shorteners are not permitted. This includes Amazon "a.co" shortened links. Posts with links to videos, blogs, reviews, or news articles which contain referral links or codes should include context and will be reviewed and removed if they do not provide high content value.
   
This keeps content quality high, and reduces the incentive of profit for Redditors who post and comment, keeping the community fair, honest, and ethical.
 
    No marketing, research, or advertising posts. Advertising of your own company, blogs, websites, social media accounts, Youtube channel, etc. must make up no more than 10% of your overall contribution to this subreddit. This will be at moderator discretion.
   Select a category of posts below          
================================================================================
Title:  Gitcoin 
Date: Date not available
Content:





















Dark Mode Toggle








 Gitcoin 

 Gitcoin 

Blockchains
Cryptography
Economics
Fun
General
Gitcoin
Math
Philosophy
Translations




2021 Apr 02

Gitcoin Grants Round 9: The Next Phase of Growth



2020 Oct 18

Gitcoin Grants Round 7 Retrospective



2020 Jul 22

Gitcoin Grants Round 6 Retrospective



2020 Apr 30

Gitcoin Grants Round 5 Retrospective



2020 Jan 28

Review of Gitcoin Quadratic Funding Round 4



2019 Oct 24

Review of Gitcoin Quadratic Funding Round 3


 
================================================================================
Title: Serenity Design Rationale - HackMD
Date: Date not available
Content:
or
================================================================================
Title: The complete guide to Ethereum | ethereum.org
Date: Date not available
Content:
The leading platform for innovative apps and blockchain networks Pick a wallet Create accounts & manage assets Pick a wallet Create accounts & manage assets Get ETH The currency of Ethereum Get ETH The currency of Ethereum Choose a network Enjoy minimal fees Choose a network Enjoy minimal fees Try apps Finance, gaming, social Try apps Finance, gaming, social Stablecoins are currencies that maintain stable value. Their price matches the U.S. dollar or other steady assets. Billions can't open bank accounts or freely use their money. Ethereum's financial system is always open and unbiased. Ethereum is the hub for blockchain innovation. The best projects are built on Ethereum. Ethereum apps work without selling your data. Protect your privacy. Art, certificates or even real estate can be tokenized. Anything can be a tradable token. Ownership is public and verifiable. Stablecoins are currencies that maintain stable value. Their price matches the U.S. dollar or other steady assets. Billions can't open bank accounts or freely use their money. Ethereum's financial system is always open and unbiased. Ethereum is the hub for blockchain innovation. The best projects are built on Ethereum. Ethereum apps work without selling your data. Protect your privacy. Art, certificates or even real estate can be tokenized. Anything can be a tradable token. Ownership is public and verifiable. Activity from all Ethereum networks Crypto can feel overwhelming. Don't worry, these materials are designed to help you understand Ethereum in just a few minutes. What is Ethereum? What are crypto wallets? How to start, step by step Ethereum Whitepaper Ethereum roadmap Be part of the digital revolution Legacy Ethereum Ethereum is home to Web3's largest and most vibrant developer ecosystem. Use JavaScript and Python, or learn a smart contract language like Solidity or Vyper to write your own app. Code examples Your own bank Build a bank powered by logic you've programmed Your own currency Create tokens that you can transfer and use across applications A JavaScript Ethereum wallet Use existing languages to interact with Ethereum and other applications An open, permissionless DNS Re-imagine existing services as decentralized, open applications Your own bank Build a bank powered by logic you've programmed Your own currency Create tokens that you can transfer and use across applications A JavaScript Ethereum wallet Use existing languages to interact with Ethereum and other applications An open, permissionless DNS Re-imagine existing services as decentralized, open applications The ethereum.org website is built and maintained by hundreds of translators, coders, designers, copywriters, and enthusiastic community members each month. Come ask questions, connect with people around the world and contribute to the website. You will get relevant practical experience and be guided during the process! Ethereum.org community is the perfect place to start and learn. Next calls October 16, 2024 at 3:30 PM October 31, 2024 at 3:00 PM The latest blog posts and updates from the community October 1, 2024 Ethereum Foundation Blog September 30, 2024 Privacy and Scaling Explorations September 28, 2024 Vitalik Buterin's website September 4, 2024 Solidity Lang Blog August 22, 2024 Posts 🤓 on ethPandaOps July 30, 2024 0xPARC Read more on these websites Ethereum communities host events all around the globe, all year long October 4 – 6, 2024 Kuala Lumpur, Malaysia October 4 – 6, 2024 Rome, ITA October 9 – 11, 2024 Salt Lake City, Utah, US This website is open source with hundreds of community contributors. You can propose edits to any of the content on this site. How to contribute Find out all the different ways you can help ethereum.org grow and be better. GitHub Contribute to code, design, articles, etc. Discord To ask questions, coordinate contribution and join community calls. X To keep up with our updates and important news. Website last updated: October 2, 2024
================================================================================
Title: The Network State
Date: Date not available
Content:
The Network StatePodcastConferenceNEWBookAmazonAudiblePDFPodcastNewsletterFundBookAmazonAudiblePDFPodcastNewsletterFundConferenceDescriptionTechnology has enabled us to start new companies, new communities, and new currencies. But can we use it to start new cities, or even new countries? This book explains how to build the successor to the nation state, a concept we call the network state.1. QuickstartPreambleThe Network State in One SentenceThe Network State in One ImageThe Network State in One Thousand WordsThe Network State in One Essay2. History as TrajectoryPrologueMicrohistory and MacrohistoryPolitical Power and Technological TruthGod, State, NetworkPeople of God, People of the State, People of the NetworkIf the News is Fake, Imagine HistoryFragmentation, Frontier, Fourth Turning, Future Is Our PastLeft is the New Right is the New LeftThe One Commandment3. The Tripolar MomentNYT, CCP, BTCThe Dated and the TimelessA Bipolar America and a Tripolar TriangleMoral Power, Martial Power, Money PowerSubmission, Sympathy, SovereigntyConflicts and Alliances4. Decentralization, RecentralizationThe Possible FuturesSociopolitical AxesTechnoeconomic AxesForeseeable FuturesAmerican Anarchy, Chinese Control, International IntermediateVictory Conditions and Surprise EndingsTowards a Recentralized Center5. From Nation States to Network StatesWhy Now?On Nation StatesOn Network States6. AppendixAcknowledgmentsAbout 1729Footnotes
================================================================================
Title: Vitalik Buterin : Things that matter outside of defi - YouTube
Date: Date not available
Content:
Vitalik Buterin : Things that matter outside of defi - YouTubeAcerca dePrensaDerechos de autorComunicarte con nosotrosCreadoresAnunciarDesarrolladoresCondicionesPrivacidadPolíticas y seguridadCómo funciona YouTubePrueba funciones nuevas© 2024 Google LLC
================================================================================
Title: Sharding FAQ · ethereum/wiki Wiki · GitHub
Date: Date not available
Content:
We read every piece of feedback, and take your input very seriously. 
            To see all available qualifiers, see our documentation.
           As part of an ongoing effort to update and overhaul the Ethereum wiki to make it more useful to our community, the sharding FAQs page has now moved to the following location. ethereum.org/sharding | Deutsch
| English
| Español
| Français
| 한국어
| Italiano
| Portuguese
| Română
| العربية
| فارسی
| 中文(繁体) | 中文(简体)
| 日本語
 0x927c0E368722206312D243417dA9797424b56434
================================================================================
Title: Problems · ethereum/wiki Wiki · GitHub
Date: Date not available
Content:
We read every piece of feedback, and take your input very seriously. 
            To see all available qualifiers, see our documentation.
           The science of cryptography, which has existed to some degree for millennia but in a formal and systematized form for less than fifty years, can be most simply defined as the study of communication in an adversarial environment. In a similar vein, we can define cryptoeconomics as a field that goes one step further: the study of economic interaction in an adversarial environment. To distinguish itself from traditional economics, which certainly studies both economic interaction and adversaries, cryptoeconomics generally focuses on interactions that take place over network protocols. Particular domains of cryptoeconomics include: The increasing prominence of cryptoeconomics in the last five years is to a large extent the result of the growth of cryptocurrencies and digital tokens, and brings a new, and interesting, dimension to cryptography. While before cryptography was, by and large, a purely computational and information-theoretic science, with strong guarantees built on security assumptions that are close to absolute, once money enters the picture the perfect world of mathematics must interact with a much more messy reality of human social structures, economic incentives, partial guarantees and known vulnerabilities that can only be mitigated, and not outright removed. While a cryptographer is used to assumptions of the form "this algorithm is guaranteed to be unbreakable provided that these underlying math problems remain hard", the world of cryptoeconomics must contend with fuzzy empirical factors such as the difficulty of collusion attacks, the relative quantity of altruistic, profit-seeking and anti-altruistic parties, the level of concentration of different kinds of resources, and in some cases even sociocultural circumstances. In traditional applied cryptography, security assumptions tend to look something like this: In cryptoeconomics, on the other hand, the basic security assumptions that we depend on are, alongside the cryptographic assumptions, roughly the following: There will also be additional security assumptions specific to certain problems. Thus, quite often it will not even be possible to definitively say that a certain protocol is secure or insecure or that a certain problem has been solved. Rather, it will be necessary to create solutions that are optimized for particular empirical and social realities, and continue further and further optimizing them over time. The decentralized consensus technology used in Bitcoin is impressive to a very large extent because of its simplicity. A 30-year-old problem in computer science was solved via a mechanism which is simple to implement, and so simple to understand that even some semi-technical teenagers can describe the entirety of how it works. However, at the same time the technology in its current form is very limited. The scalability in Bitcoin is very crude; the fact that every full node needs to process every transaction is a large roadblock to the future success of the platform, and a factor preventing its effective use in micropayments (arguably the one place where it is the most useful). Timestamping is flawed, and proof-of-computation algorithms are very limited in the types of computation that they can support. The fact that the original solution was so "easy", however, suggests that there is still a large opportunity to improve, and there are a number of directions in which improvement could be directed. 1. Blockchain Scalability One of the largest problems facing the cryptocurrency space today is the issue of scalability. It is an often repeated claim that, while mainstream payment networks process something like 2000 transactions per second, in its current form the Bitcoin network can only process seven. On a fundamental level, this is not strictly true; simply by changing the block size limit parameter, Bitcoin can easily be made to support 70 or even 7000 transactions per second. However, if Bitcoin does get to that scale, we run into a problem: it becomes impossible for the average user to run a full node, and full nodes become relegated only to that small collection of businesses that can afford the resources. Because mining only requires the block header, even miners can (and in practice most do) mine without downloading the blockchain. The main concern with this is trust: if there are only a few entities capable of running full nodes, then those entities can conspire and agree to give themselves a large number of additional bitcoins, and there would be no way for other users to see for themselves that a block is invalid without processing an entire block themselves. Although such a fraud may potentially be discovered after the fact, power dynamics may create a situation where the default action is to simply go along with the fraudulent chain (and authorities can create a climate of fear to support such an action) and there is a coordination problem in switching back. Thus, at the extreme, Bitcoin with 7000 transactions per second has security properties that are essentially similar to a centralized system like Paypal, whereas what we want is a system that handles 7000 TPS with the same levels of decentralization that cryptocurrency originally promised to offer. Ideally, a blockchain design should exist that works, and has similar security properties to Bitcoin with regard to 51% attacks, that functions even if no single node processes more than 1/n of all transactions where n can be scaled up to be as high as necessary, although perhaps at the cost of linearly or quadratically growing secondary inefficiencies and convergence concerns. This would allow the blockchain architecture to process an arbitrarily high number of TPS but at the same time retain the same level of decentralization that Satoshi envisioned. Problem: create a blockchain design that maintains Bitcoin-like security guarantees, but where the maximum size of the most powerful node that needs to exist for the network to keep functioning is substantially sublinear in the number of transactions. Additional Assumptions and Requirements: 2. Timestamping An important property that Bitcoin needs to keep is that there should be roughly one block generated every ten minutes; if a block is generated every day, the payment system becomes too slow, and if a block is generated every second there are serious centralization and network efficiency concerns that would make the consensus system essentially nonviable even assuming the absence of any attackers. To ensure this, the Bitcoin network adjusts difficulty so that if blocks are produced too quickly it becomes harder to mine a new block, and if blocks are produced too slowly it becomes easier. However, this solution requires an important ingredient: the blockchain must be aware of time. In order to solve this problem, Bitcoin requires miners to submit a timestamp in each block, and nodes reject a block if the block's timestamp is either (i) behind the median timestamp of the previous eleven blocks, or (ii) more than 2 hours into the future, from the point of view of the node's own internal clock. This algorithm is good enough for Bitcoin, because time serves only the very limited function of regulating the block creation rate over the long term, but there are potential vulnerabilities in this approach, issues which may compound in blockchains where time plays a more important role. Problem: create a distributed incentive-compatible system, whether it is an overlay on top of a blockchain or its own blockchain, which maintains the current time to high accuracy. Additional Assumptions and Requirements 3. Arbitrary Proof of Computation Perhaps the holy grail of the study zero-knowledge proofs is the concept of an arbitrary proof of computation: given a program P with input I, the challenge is to create a zero-knowledge proof that you ran P with input I and received output O, such that the proof can be verified quickly (ie. in polylogarithmic or ideally constant time) even if the original computation took a very large number of steps to complete. In an ideal setup, the proof would even hide the value of I, just proving that you ran P with some output with result O, and if I needs to be made public it can be embedded into the program. Such a primitive, if possible, would have massive implications for cryptocurrency: There is a large amount of existing research on this topic, including a protocol known as "SCIP" (Succinct Computational Integrity and Privacy) that is already working in test environments, although with the limitation that a trusted third party is required to initially set up the keys; use of this prior work by both its original developers and others is encouraged. Problem: create programs POC_PROVE(P,I) -> (O,Q) and POC_VERIFY(P,O,Q) -> { 0, 1 } such that POC_PROVE runs program P on input I and returns the program output O and a proof-of-computation Q and POC_VERIFY takes P, O and Q and outputs whether or not Q and O were legitimately produced by the POC_PROVE algorithm using P. Requirements And Additional Assumptions 4. Code Obfuscation For many years now we have known how to encrypt data. Simple, robust and well-tested algorithms exist for both symmetric key encryption, where the same key is needed to encrypt and decrypt, and public key encryption, where the encryption key and decryption key are different and one cannot be derived from the other. However, there is another kind of encryption that can potentially be very useful, but for which we currently have no viable algorithm: the encryption of programs. The holy grail is to create an obfuscator O, such that given any program P the obfuscator can produce a second program O(P) = Q such that P and Q return the same output if given the same input and, importantly, Q reveals no information whatsoever about the internals of P. One can hide inside of Q a password, a secret encryption key, or one can simply use Q to hide the proprietary workings of the algorithm itself. In 2007, it was proven that perfect "black box" encryption is impossible; essentially, the argument is that there is a difference between having black-box access to a program and having the code to that program, no matter how obfuscated, and one can construct certain classes of programs that resist obfuscation. However, there is also a weaker notion of obfuscation, known as indistinguishability obfuscation, that appears to be quite possible. The definition of an indistinguishability obfuscator O is that if you take two equivalent (ie. same inputs -> same outputs) programs A and B and calculate O(A) = P and O(B) = Q, then there is no computationally feasible way for an outsider without access to A or B to tell whether P came from A or B. This type of obfuscation may seem more limited, but it is nevertheless sufficient for many applications. For a heuristic argument why, consider two programs F and G where F internally contains and simply prints out that 32-byte string which is the hash of "12345", whereas G actually computes the hash of "12345" and prints it out. By the indistinguishability obfuscation definition, there is no computationally feasible way to tell O(F) from O(G) apart. Hence, if one can feasibly recover "12345" from O(G), then for O(G) and O(F) to be indistinguishable one would also need to be able to feasibly recover "12345" from O(F) - a feat which essentially entails breaking the preimage resistance of a cryptographic hash function. Recently, a discovery was made by Craig Gentry, Amit Sahai et al on an algorithm which uses a construction known as "multilinear jugsaw puzzles" in order to accomplish this. Their algorithm, described here, claims to satisfy the indistinguishability obfuscation property, although at a high cost: the algorithm requires the use of fully homomorphic encryption, a highly inefficient construction that incurs roughly a one-billion-fold computational overhead. If this construction can be made better, the potential benefits are massive. The most interesting possibility in the world of cryptocurrency is the idea of an on-blockchain contract containing private information. This basically allows for the scripting properties of Turing-complete blockchain technologies, such as Ethereum, to be exported into any other financial or non-financial system on the internet; for example, one can imagine an Ethereum contract which contains a user's online banking password, and if certain conditions of the contract are satisfied the contract would initiate an HTTPS session with the bank, using some node as an intermediary, and log into the bank account with the user's password and make a specified withdrawal. Because the contract would be obfuscated, there would be no way for the intermediary node, or any other player in the blockchain, to modify the request in-transit or determine the user's password. The same trick can be done with any other website, or much more easily with a "dumb" blockchain such as Bitcoin. Problem: create a reasonably efficient indistinguishability obfuscation algorithm. Additional Assumptions and Requirements 5. Hash-Based Cryptography One of the looming threats on the horizon to cryptocurrency, and cryptography in general, is the issue of quantum computers. Currently, the problem does not seem too severe; all quantum computers are either "adiabatic quantum computers", effective at only an extremely limited set of problems and perhaps not even better than classical computers at all, or machines with a very small number of qubits not capable of factoring numbers higher than 35. In the future, however, quantum computers may become much more powerful, and the recent revelations around the activities of government agencies such as the NSA have sparked fears, however unlikely, that the US military may control a quantum computer already. With this in mind, the movement toward quantum-proof cryptography has become a somewhat higher priority. To date, all quantum-proof schemes fall into one of two categories. First, there are algorithms involving lattice-based constructions, relying on the hardness of the problem of finding a linear combination of vectors whose sum is much shorter than the length of any individual member. These algorithms appear to be powerful, and relatively efficient, but many distrust them because they rely on complicated mathematical objects and relatively unproven assumptions. However, there is also another class of algorithms that are quantum-proof: hash-based algorithms. One example of this is the classic Lamport signature: create a Merkle tree of 164 nodes (a figure chosen specifically to match 160 bits of security), publish the root, and then have the signature of a document be the combined Merkle tree proof of a subset of 82 nodes pseudorandomly chosen based on the hash of the document. This signature is one-time, and bulky (~3000 bytes), but fulfils the purpose. The question is, can we do better? There is an approach known as hash ladders, allowing the size of a signature to be brought down to 420 bytes, and one can use Merkle trees on another level to increase the number of signatures possible, although at the cost of adding 100-300 bytes to the signature. However, even still these approaches are imperfect, and if hash-based cryptography is to be competitive the properties of the algorithms will need to be substantially improved in order to have nicer properties. Problem: create a signature algorithm relying on no security assumption but the random oracle property of hashes that maintains 160 bits of security against classical computers (ie. 80 vs. quantum due to Grover's algorithm) with optimal size and other properties. Requirements And Additional Assumptions One of the key elements in the Bitcoin algorithm is the concept of "proof of work". In any Byzantine-fault-tolerant system, the security level is often defined as the minimum percentage of hostile nodes - for example, in the context of secret sharing, the Berlekamp-Welch algorithm with 2x redundancy is guaranteed to provide the correct output assuming that the total number of hostile nodes does not exceed 25% of the network, and in the context of Bitcoin mining the requirement is that the size of the set of honest nodes exceeds the size of any individual hostile coalition. However, all of these security guarantees have one important qualification: there must be some way to define what an individual node is. Before Bitcoin, most fault-tolerant algorithms had high computational complexity and assumed that the size of the network would be small, and so each node would be run by a known individual or organization and so it is possible to count each node individually. With Bitcoin, however, nodes are numerous, mostly anonymous, and can enter or leave the system at any time. Unless one puts in careful thought, such a system would quickly run into what is known as a Sybil attack, where a hostile attacks simply creates five times as many nodes as the rest of the network combined, whether by running them all on the same machine or rented virtual private server or on a botnet, and uses this supermajority to subvert the network. In order to prevent this kind of attack, the only known solution is to use a resource-based counting mechanism. For this purpose, Bitcoin uses a scheme known as proof-of-work, which consists of solving problems that are difficult to solve, but easy to verify. The weight of a node in the consensus is based on the number of problem solutions that the node presents, and the Bitcoin system rewards nodes that present such solutions ("miners") with new bitcoins and transaction fees. Bitcoin's proof of work algorithm is a simple design known as Hashcash, invented by Adam Back in 1995. The hashcash function works as follows: Note that in the actual Bitcoin protocol nonces are limited to 32 bits; at higher difficulty levels, one is required to also manipulate transaction data in the block as a sort of "extranonce". Originally, the intent behind the Bitcoin design was very egalitarian in nature. Every individual would mine on their own desktop computer, producing a highly decentralized network without any point of control and a distribution mechanism that spread the initial supply a BTC across a wide number of users. And for the first 18 months of Bitcoin's existence, the system worked. In the summer of 2010, however, developers released a Bitcoin miner that took advantage of the massive parallelization offered by the graphics processing unit (GPU) of powerful computers, mining about 10-50 times more efficiently than CPUs. In 2013, specialization took a further turn, with the introduction of devices called "application-sepcific integrated circuits" - chips designed in silicon with the sole purpose of Bitcoin mining in mind, providing another 10-50x rise in efficiency. CPU and GPU mining are now completely unprofitable, and the only way to mine is to either start a multimillion-dollar ASIC manufacturing company or purchase an ASIC from one that already exists. Another related issue is mining pool centralization. Theoretically, the legitimate function of a mining pool is simple: instead of mining on their own and receiving a small chance of earning the block reward of 25 BTC, miners mine for a pool, and the pool sends them a proportionate constant payout (eg. 0.002 BTC per block). There are centralized mining pools, but there are also P2P pools which serve the same function. However, P2P pools require miners to validate the entire blockchain, something which general-purpose computers can easily do but ASICs are not capable of; as a result, ASIC miners nearly all opt for centralized mining pools. The result of these trends is grim. Right now, nearly 25% of all new ASIC hashpower is produced in a single factory in Shenzhen, and nearly 50% of the network is controlled by a single mining pool. The second problem is easy to alleviate; one simply creates a mining algorithm that forces every mining node to store the entire blockchain. The first problem, that of mining centralization, is much harder. There is the possibility that the problem will solve itself over time, and as the Bitcoin mining industry grows it will naturally become more decentralized as room emerges for more firms to participate. However, that is an empirical claim that may or may not come to pass, and we need to be prepared for the eventuality that it does not. Furthermore, the wasted energy and computation costs of proof of work as they stand today may prove to be entirely avoidable, and it is worth looking to see if that aspect of consensus algorithms can be alleviated. 6. ASIC-Resistant Proof of Work One approach at solving the problem is creating a proof-of-work algorithm based on a type of computation that is very difficult to specialize. One specific ideas involves creating a hash function that is "memory-hard", making it much more difficult to create an ASIC that achieves massive gains through parallelization. This idea is simple, but fundamentally limited - if a function is memory-hard to compute, it is also generally memory-hard to verify. Additionally, there may be ways to specialize hardware for an algorithm that have nothing to do with hyperparallelizing it. Another approach involves randomly generating new mining functions per block, trying to make specialization gains impossible because the ASIC ideally suited for performing arbitrary computations is by definition simply a CPU. There may also be other strategies aside from these two. Ultimately, perfect ASIC resistance is impossible; there are always portions of circuits that are going to be unused by any specific algorithm and that can be trimmed to cut costs in a specialized device. However, what we are looking for is not perfect ASIC resistance but rather economic ASIC resistance. Economic ASIC resistance can be defined as follows. First of all, we note that in a non-specialized environment mining returns are sublinear - everyone owns one computer, say with N units of unused computational power, so up to N units of mining cost only the additional electricity cost, whereas mining beyond N units costs both electricity and hardware. If the cost of mining with specialized hardware, including the cost of research and development, is higher per unit hashpower than the cost of those first N units of mining per user then one can call an algorithm economically ASIC resistant. For a more in-depth discussion on ASIC-resistant hardware, see https://blog.ethereum.org/2014/06/19/mining/ Problem: Create two functions, PoWProduce(data,diff) -> nonce and PoWVerify(data,nonce,diff) -> { 0, 1 }, to serve as alternatives to Hashcash such that it is economically unattractive to produce an ASIC for PoWProduce Additional Assumptions And Requirements: 7. Useful Proof of Work Another related economic issue, often pointed out by detractors of Bitcoin, is that the proof of work done in the Bitcoin network is essentially wasted effort. Miners spend 24 hours a day cranking out SHA256 (or in more advanced implementations Scrypt) computations with the hopes of producing a block that has a very low hash value, and ultimately all of this work has no value to society. Traditional centralized networks, like Paypal and the credit card network, manage to get by without performing any proof of work computations at all, whereas in the Bitcoin ecosystem about a million US dollars of electricity and manufacturing effort is essentially wasted every day to prop up the network. One way of solving the problem that many have proposed is making the proof of work function something which is simultaneously useful; a common candidate is something like Folding@home, an existing program where users can download software onto their computers to simulate protein folding and provide researchers with a large supply of data to help them cure diseases. The problem is, however, that Folding@home is not "easy to verify"; verifying the someone did a Folding@home computation correctly, and did not cut corners to maximize their rounds-per-second at the cost of making the result useless in actual research, takes as long as doing the computation oneself. If either an efficiently verifiable proof-of-computation for Folding@home can be produced, or if we can find some other useful computation which is easy to verify, then cryptocurrency mining could actually become a huge boon to society, not only removing the objection that Bitcoin wastes "energy", but even being socially beneficial by providing a public good. Note that there is one major concern with this approach that has been identified: if the useful PoW is implemented incorrectly, it can potentially reduce the cost of an attack on the network. If the useful PoW is useful in such a way that it is sometimes economically viable for certain very large entities to perform the computation even without the currency incentive, then those entities have an incentive to launch attacks against the network at no cost, since they would be performing the computations anyway. One simple, though crude and imperfect, way of addressing this problem is to make the PoW a half-and-half mix between useful and useless, making the cost of an attack at least 50% of what it would be in a useless-PoW environemnt. In practice, the overhead of making PoW verifiable may well introduce over 2x inefficiency unintentionally. Another economic solution is to make the computation a "pure" public good such that no individual entity derives a significant benefit from it. Proposed solutions to this problem should include a rigorous analysis of this issue. Problem: Create two functions, PoWProduce(data,diff) -> nonce and PoWVerify(data,nonce,diff) -> { 0, 1 }, to serve as alternatives to Hashcash such that the outputs of PoWProduce are independently useful. Requirements 8. Proof of Stake Another approach to solving the mining centralization problem is to abolish mining entirely, and move to some other mechanism for counting the weight of each node in the consensus. The most popular alternative under discussion to date is "proof of stake" - that is to say, instead of treating the consensus model as "one unit of CPU power, one vote" it becomes "one currency unit, one vote". A very simple proof of stake algorithm requires the miner mining the block to sign it with the private key to the address holding their coins, where the block is valid if sha256(PREVHASH + ADDRESS + TIMESTAMP) <= 2^256 * BALANCE / DIFFICULTY where PREVHASH is the hash of the previous block, ADDRESS is the signer's address with balance BALANCE, TIMESTAMP is the current Unix time in seconds and DIFFICULTY is an adjustable parameter to regulate the frequency of successful signatures. At first glance, this algorithm has the basic required properties: every miner has some random chance per second of succeeding, and if your address has twice as much money in it then you have double the chance of success. However, this algorithm has one important flaw: there is "nothing at stake". In the event of a fork, whether the fork is accidental or a malicious attempt to rewrite history and reverse a transaction, the optimal strategy for any miner is to mine on every chain, so that the miner gets their reward no matter which fork wins. Thus, assuming a large number of economically interested miners, an attacker may be able to send a transaction in exchange for some digital good (usually another cryptocurrency), receive the good, then start a fork of the blockchain from one block behind the transaction and send the money to themselves instead, and even with 1% of the total stake the attacker's fork would win because everyone else is mining on both. Another problem to keep in mind is the issue of so-called "long-range attacks" - attacks where the miner attempts to start a fork not five or ten blocks behind the head of the main chain, as happens normally, but hundreds of thousands of blocks back. If an algorithm is designed incorrectly, it may be possible for an attacker to start from that far back, and then mine billions of blocks into the future (since no proof of work is required), and new users would not be able to tell that the blockchain with billions of blocks more is illegitimate. This can generally be solved with timestamping, but special corner cases do tend to appear in overcomplicated designs. The Slasher algorithm, described here and implemented by Zack Hess as a proof-of-concept here, represents my own attempt at fixing the nothing-at-stake problem. The core idea is that (1) the miners for each block are determined ahead of time, so in the event of a fork a miner will either have an opportunity to mine a given block on all chains or no chains, and (2) if a miner is caught signing two distinct blocks with the same block number they can be deprived of their reward. The algorithm is viable and effective, but it suffers from two flaws of unknown significance. First, if all of the miners for a given block learn each other's identities beforehand, they can meet up and collude to shut down the network. Second, the nothing-at-stake problem remaing for attacks going back more than 3000 blocks, although this is a smaller issue because such attacks would be very obvious and can automatically trigger warnings. For a more in-depth discussion on proof of stake, see https://blog.ethereum.org/2014/07/05/stake/ Problem: create a proof-of-stake algorithm that solves the nothing-at-stake problem and long-range attack problems, without introducing new collusion risks that require less than 25% of stakeholders to succeed. Additional Requirements And Assumptions 9. Proof of Storage A third approach to the problem is to use a scarce computational resource other than computational power or currency. In this regard, the two main alternatives that have been proposed are storage and bandwidth. There is no way in principle to provide an after-the-fact cryptographic proof that bandwidth was given or used, so proof of bandwidth should most accurately be considered a subset of social proof, discussed in later problems, but proof of storage is something that certainly can be done computationally. An advantage of proof-of-storage is that it is completely ASIC-resistant; the kind of storage that we have in hard drives is already close to optimal. The most simple algorithm for proving that you own a file with N blocks is to build a Merkle tree out of it, publish the root, and every k blocks publish a Merkle tree proof of the ith block where i is the previous block hash mod N. However, this algorithm is limited because it is only a simple building block, not a complete solution. In order to turn this into a currency, one would need to determine which files are being stored, who stores whose files, to what extent and how the system should enforce redundancy, and if the files come from the users themselves how to prevent compression optimizations and long-range attacks. Currently, the latest work in this area are two projects called Permacoin and Torcoin, which solve some of the problems in proof of storage with two insights. First, users should not be able to choose which files they store. Instead, files should be randomly selected based on their public key and users should be required to store ALL of the work assigned or else face a zero reward. This idea, provided in the context of proof of bandwidth in the case of Torcoin, prevents attacks involving users only storing their own data. Second, a Lamport-like signature algorithm can be used that requires users to have their private key and store their file locally; as a result; uploading all of one's files to the cloud is no longer a viable strategy. This, to some degree, forces redundancy. However, the problem with Permacoin is that it leaves unclear what files should be stored; cryptocurrency issuance can theoretically pay for billions of dollars of work per year, but there is no single static archive whose storage is worth billions. Ideally, the system would allow for new files to be added, and perhaps even allow users to upload their own files, but without introducing new vulnerabilities. Problem: create a currency that uses proof-of-storage as its consensus and distribution algorithm. Additional Assumptions And Requirements The second part of cryptoeconomics, and the part where solutions are much less easy to verify and quantify, is of course the economics. Cryptocurrencies are not just cryptographic systems, they are also economic systems, and both kinds of security need to be taken into account. Sometimes, cryptographic security may even be slightly compromised in favor of an economic approach - if a signature algorithm takes more effort to crack than one could gain from cracking it, that is often a reasonable substitute for true security. At the same time, economic problems are also much more difficult to define. One cannot usually definitively know whether or not a problem has been solved without extensive experimentation, and the result will often depend on cultural factors or the other organizational and social structures used by the individuals involved. However, if the economic problems can be solved, the solutions may often have reach far beyond just cryptocurrency. 10. Stable-value cryptoassets One of the main problems with Bitcoin is the issue of price volatility. The value of a bitcoin often experiences very large fluctuations, rising or falling by as much as 25% in a single day and 3x in a month. The main economic reason behind this is that the supply of bitcoins is fixed, so its price is directly proportional to demand (and therefore, by efficient market hypothesis, the expected discounted future demand), and demand is very unpredictable. It is not known if Bitcoin will be simply a niche payment method for transcations requiring a high degree of privacy, a replacement for Western Union, a mainstream consumer payment system or the reserve currency of the world, and the expected value of a bitcoin differs over a thousandfold between these various levels of adoption. Furthermore, the utility of the Bitcoin protocol is heavily dependent on the movements of the Bitcoin price (ie. people are interested in Bitcoin more if the price is going up), creating a positive feedback loop, which has arguably been responsible for both Bitcoin's great meteoric rises and its many-month-long periods of rapid decline. To solve this problem, there are generally two paths that can be taken. The first is to have the network somehow detect its current level of economic usage, and have a supply function that automatically increases supply when usage increases. This reduces uncertainty; even though the expected future level of adoption of the protocol may have a variance of 10-100x, the circumstance where adoption increases 100x will also have 100x more supply and so the value of the currency will remain the same. There is a problem that if usage decreases there is no way to remove units from circulation, but even still the lack of upward uncertainty should reduce upward volatility, and downward volatility would also naturally reduce because it is no longer bad news for the value of the currency when an opportunity for increased usage is suddenly removed. Furthermore, in the long term the economy can be expected to grow, so the zero-supply-growth floor may not even ever be reached in practice. The problem is that measuring an economy in a secure way is a difficult problem. The most obvious metric that the system has access to is mining difficulty, but mining difficulty also goes up with Moore's law and in the short term with ASIC development, and there is no known way to estimate the impact of Moore's law alone and so the currency cannot know if its difficulty increased by 10x due to better hardware, a larger user volume or a combination of both. Other metrics, such as transaction count, are potentially gameable by entities that want the supply to change in a particular direction (generally, holders want a lower supply, miners want a higher supply). Another approach is to attempt to create a currency which tracks a specific asset, using some kind of incentive-compatible scheme likely based on the game-theoretic concept of Schelling points, to feed price information about the asset into the system in a decentralized way. This could then be combined with a supply function mechanism as above, or it can be incorporated into a zero-total-supply currency system which uses debts collateralized with other cryptographic assets to offset its positive supply and thus gain the ability to grow and shrink with changes to usage in either direction. The problem here is constructing the scheme in such a way that there is no incentive for entities to feed in false price information in order to increase or decrease the supply of the asset in their favor. Problem: construct a cryptographic asset with a stable price. Requirements 11. Decentralized Public Goods Incentivization One of the challenges in economic systems in general is the problem of "public goods". For example, suppose that there is a scientific research project which will cost $1 million to complete, and it is known that if it is completed the resulting research will save one million people $5 each. In total, the social benefit is clear: if everyone contributes $1, then each individual person will see a benefit of $5 - $1 = $4 for $4 million total. However, the problem is that from the point of view of each individual person contributing does not make sense - whether or not you contribute has close to zero bearing on whether enough money will be collected, so everyone has the incentive to sit out and let everyone else throw their money in, with the result that no one does. So far, most problems to public goods have involved centralization; some large organization, whether a big company or a government, agrees to offer some of its private services only to those individuals who participate in paying for the public good. Often this is done implicitly: for example, some of the money from each purchase of an iPad goes toward research and development (some of which is a public good, and some of which is an excludable "club good"). At other times, it's more explicit, as in the case of taxation. In order for decentralized economic systems (we'll refer to decentralized economic systems that somehow rely on cryptography and/or cryptocurrency as "cryptoeconomic systems") to be effective, ways of incentivizing production of public goods relevant to that system are required. A few possible approaches include: Many of these approached can arguably be done in concert, or even simultaneously within one mechanism. Problem: come up with and implement methods for incentivizing public goods production in a decentralized environment. Additional Assumptions And Requirements 12. Reputation systems A concept which can arguably be considered to be a mirror image of currency is a reputation system. A reputation system serves three functions. First of all, it provides a mechanism for filtering honest people from dishonest people. Different people have different moral preference profiles, and so individuals who cheat less in one context are less likely to cheat in another context. Second, it provides an incentive not to cheat. If an individual can be said to possess a reputation of value R, and he enters a business deal where he is receiving payment V in exchange for a product with cost-of-production C, then as long as R > C the reputation system removes the incentive to run away with the money because doing so would sacrifice the reputation. Finally, reputation can be thought of as a kind of point system that people value intrinsically, both in a private context and as a status good in comparison with others. Money serves functions that are very similar. People who are willing to spend more money on something tend to want it more, creating a filtering function ensuring efficient resource consumption on the demand side. It provides an incentive not to cheat by consuming and not producing, because if you do so your remaining currency units and thus ability to consume in the future will go down. And finally, it is also very much an intrinsically valued point system; in fact, some argue that among very wealthy individuals this function of money is dominant. However, there are also differences. First, money is an absolute score - I have X units of currency C from the point of view of everyone in the world - but reputation is a relative measure, depending on both the owner of the reputation and the observer. I may have a high reputation in North America, a near-zero reputation in Africa, and a negative reputation among certain kinds of antitechnologist and ultranationalist groups. Second, reputation is free to give; it does not cost me anything to praise you, except potentially moral liability that I may incur if you turn out to act immorally in some way. This is in contrast with money, where adding X units to A means subtracting X units from B. However, up until very recently, reputation has been a very informal concept, having no concept of score and instead relying entirely on individual opinion. Because opinion is relatively easy to manipulate, this means that reputation as a concept has been highly suboptimal in its implementation, and has been quite vulnerable to informational and psychological attacks. Some specific problems are: Problem: design a formalized reputation system, including a score rep(A,B) -> V where V is the reputation of B from the point of view of A, a mechanism for determining the probability that one party can be trusted by another, and a mechanism for updating the reputation given a record of a particular open or finalized interaction. Note that for the purpose of this use case we are targeting specifically the "can I trust you" use case of reputation, and not the social-incentivizing "whuffie"-esque currency-like aspect. Additional Assumptions and Requirements In the world of cryptoeconomics, in order for something to be rewarded it must be measured. Some things are easy to measure; for example, just by looking at the string "dog5356356" and its SHA256 hash, 0000390f327fefc900..., one can clearly see that around 216 SHA256 computations were done to produce it. Other computational results that cannot be verified so quickly can be easily measured competitively using challenge-response protocols, where different parties are incentivized to find errors in each other's proofs. Results to mathematical problems are also usually easy to computationally verify. Other things, however, cannot be verified just by looking them; in that case, in both the real world and the cryptographic world, there is only one solution: social proof. To some extent, proof of work consensus is itself a form of social proof. Transaction A happened before transaction B because the majority of users say it did, and there is an economic incentive to go with the majority opinion (specifically, if you generate a block on the incorrect chain, that block will get discarded and the miner will receive no reward). Assuming that most participants act truthfully, the incentive is to go along with the projected majority and tell the truth as well. This insight can be extended into SchellingCoin, a generalized data feed protocol, protocols for proof of bandwidth, and anything else that can be quickly verified. The challenge is, however, what if verification has a cost? What if it takes some effort to determine whether or not a certain thing has happened, or what if the information is in principle only available to a few people? If there is too much gathering cost or secrecy, then centralization becomes necessary; the question is, how high can we go? How much can we measure without any social proof at all, and how much can we measure without a centralized verifier? 13. Proof of excellence One interesting, and largely unexplored, solution to the problem of distribution specifically (there are reasons why it cannot be so easily used for mining) is using tasks that are socially useful but require original human-driven creative effort and talent. For example, one can come up with a "proof of proof" currency that rewards players for coming up with mathematical proofs of certain theorems. There is no generic algorithm, aside from brute force, for proving theorems, and yet proofs of theorems are theoretically computationally easy to verify: one simply needs to write every step of the proof in a formal language, allowing the use of only one inference rule (eg. a + b = b + a or a * (b + c) = a * b + a * c but not a * (b + c) = a * c + b * a) between each step, and having a program verify the correctness of the inferences at each step. For example, a proof of a common algebraic factorization problem appears as follows: Each step of the proof can be verified using pattern matching algorithms, but it is much harder for a computer to figure out that the trick is to add and subtract a*b into the expression (technically, in this case specialized algorithms can do it, but in more general cases especially involving second-order logic it becomes intractable). Note that for computers the proof must be written down in excruciating detail; blockchain-based algorithms specifically heavily benefit from simplicity. To alleviate this problem, compilers can likely be made that can make small two and three-step inferences and expand shorter proofs into more complete ones. Alternatives to proof-of-proof include proof-of-optimization, finding optimal inputs to some function to maximize a particular output (eg. the ability of a radio antenna to receive signals), algorithms involving playing strategy games or multiplayer AI challenges (one can even require users to submit programs to the blockchain that play against each other), and solving a specific math problem at greater and greater difficulty (eg. factoring). Note that because success in these problems is very sporadic, and highly inegalitarian, one cannot use most of these algorithms for consensus; rather, it makes sense to focus on distribution. Problem: create a proof-of-excellence distribution mechanism that rewards solving problems that are both dominated by human effort and whose solutions provide some benefit to humanity. Additional Assumptions and Requirements 15. Anti-Sybil systems A problem that is somewhat related to the issue of a reputation system is the challenge of creating a "unique identity system" - a system for generating tokens that prove that an identity is not part of a Sybil attack. The naive form of anti-Sybil token is simple: a sacrifice or proof of deposit. In a sacrifice setup, such identities simply cost $X, and in a PoD system identities require a deposit of $Y in order to be active, where perhaps the deposit can be taken away or destroyed under certain circumstances. However, we would like to have a system that has nicer and more egalitarian features than "one-dollar-one-vote"; arguably, one-person-one-vote would be ideal. To date, we have seen two major strategies for trying to solve this problem. One potential solution is to come up with a proof-of-work algorithm which is dominated by human labor, and not computers. This is not as difficult as it may seem; although computers get more and more powerful every year, there are a number of problems that have remained out of computers' reach for decades, and it may even be possible to identify a class of problems that are the artificial-intelligence-theoretic equivalent of "NP-complete" - problems such that, if they can be solved, it with high probability implies that AI can essentially replicate human activity in its entirety, in which case we are essentially in a post-scarcity utopia and money and incentivization may not even be necessary. These problems may be non-interactive challenges like CAPTCHAs, although all existing CAPTCHAs are far from adequate for the task, or they may be interactive strategy games like Go. The second strategy is to use social proof, turning the muscle of decentralized information gathering toward a simple problem: are these two identities the same person? If they are not, then they receive two anti-Sybil tokens, and if they are they receive one token. In general, we can separately define two concepts of identity: voluntary identity and involuntary identity. A voluntary identity can be seen as a cluster of interactions which are in some fashion correlated with each other; for example, a cryptographic identity consists of the set of interactions signed by a particular public key. An involuntary identity is a cluster of interactions which are correlated with each other, but where the entity producing the interactions does not want the correlations to be visible. A simple unique identity system would rely on voluntary identities embedded in social networks, with the understanding that creating separate identities with reputations is an expensive task and so most people would not want to do it, but a more advanced system may try to detect involuntary slipups like writing style patterns or IP addresses. The question is, can we use these mechanisms, either separately or together, and perhaps in combination with cryptoeconomic protocols and sacrifices as a fallback in order to create an anti-Sybil system which is highly egalitarian? We will accept that any scheme can be cracked at some cost; however, what we want is for it to be much more efficient for individuals to obtain one anti-Sybil token "the proper way" rather than purchasing one off the grey/black market. The challenge is to push the grey/black market cost as high as possible, as much as possible without making the first token difficult. Problem - create a mechanism for distributing anti-Sybil tokens Additional Assumptions and Requirements: 14. Decentralized contribution metrics Incentivizing the production of public goods is, unfortunately, not the only problem that centralization solves. The other problem is determining, first, which public goods are worth producing in the first place and, second, determining to what extent a particular effort actually accomplished the production of the public good. This challenge deals with the latter issue. Although in the case of computational tasks it's easy to come up with a proof of solution, for non-computational tasks the situation is much more difficult. If a cryptoeconomic system wants to incentivize users to build better graphical user interfaces to its own system, how would it rate people's contributions? Even more problematically, what about potentially quasi-adversarial tasks like incentivizing updates to its own code? What about a DAO that funds healthcare, or tries to incentivize adopting renewable energy? This is a subclass of the general "social proof" problem; here, the particular challenge is that each individual datum in question is something that very few people are interested in, and data gathering costs are often high. Sometimes, there is not even a concept of a single "correct" value with respect to the particular metric; in the case of quality measurement for an interface, a solution like A/B testing may be required. In adversarial cases, there may need to be an opportunity for incentivized opponents to look at a solution and attempt to pick it apart. Problem: come up with and implement a decentralized method for determining whether or not a particular task was performed by a specific person, and for estimating the quality of the work Additional Assumptions and Requirements 16. Decentralized success metrics Another, related, problem to the problem of decentralized contribution metrics is the problem of decentralized success metrics. On the macroscopic scale, how do we know if, and to what extent, an organization has succeeded in accomplishing its objectives? In the case of something like Bitcoin, there is a simple, but imperfect, answer: success can be measured by the hashpower of the network. This setup is reasonably effective, but is flawed in two ways: first, hashpower is an imperfect proxy for price, because the development or nondevelopment of ASICs may skew the results, and second, price is an imperfect proxy for success, because the currency may have greater success as something with a lower market capitalization if it is more used in other ways. In the case of a DAO funding healthcare or anti-climate-change efforts, however, no such heuristic exists at all. Once again, some concept of social proof is the only option. Here, information gathering costs are low, and information is accessible to everyone in the public, so a higher level of accuracy is possible, hopefully even enough for financial contracts based off of the metric to be possible. However, in order to maintain that higher level of accuracy, and in the presence of such financial derivatives, new problems arise. Can one moderately powerful entity manipulate the metric for their own benefit? If information gathering costs do exist, is the system vulnerable to falling into a centralized equilibrium, where everyone is incentivized to simply follow along with the actions of some specific party? Problem: come up with and implement a decentralized method for measuring numerical real-world variables Additional Assumptions and Requirements | Deutsch
| English
| Español
| Français
| 한국어
| Italiano
| Portuguese
| Română
| العربية
| فارسی
| 中文(繁体) | 中文(简体)
| 日本語
 0x927c0E368722206312D243417dA9797424b56434
================================================================================
Title: EIP-4844: Proto-Danksharding
Date: Date not available
Content:
EIP-4844: Shard Blob Transactions EIP-4844 introduces a new kind of transaction type to Ethereum which accepts "blobs" of data to be persisted in the beacon node for a short period of time. These changes are forwards compatible with Ethereum's scaling roadmap, and blobs are small enough to keep disk use manageable. Learn more about EIP-4844 in the recordings below ⤵️  Rollups are in the short and medium term, and possibly in the long term, the only trustless scaling solution for Ethereum. L1 transaction fees are a significant blocker for new users and applications. EIP-4844 will help facilitate an ecosystem-wide move to rollups. Full data sharding will take a considerable amount of time to finish implementing and deploying, yet rollups are here now. EIP-4844 can bring rollup fees down by orders of magnitude and enable Ethereum to remain competitive without sacrificing decentralization. Blobs are committed to with KZG: an efficient vector commitment scheme, with fixed-size proof data, and forward-compatible with data-availability-sampling. These commitments are used in the same scaffolding as the full "danksharding" proposal. Blobs are persisted in beacon nodes, not in execution layer (e.g. in prysm, not in geth). Future sharding work only requires changes to the beacon node, enabling the execution layer to work on other initatives in parallel. Blobs are 4096 field-elements of 32 bytes each, with a long term maximum of 16 blobs per block. 4096 * 32 bytes * 16 per block = 2 MiB per block maximum. The blob cap per block can start low and grow over multiple network upgrades. Blobs are pruned after ~2 weeks. Available long enough for all actors of a L2 to retrieve it, short enough to keep disk use manageable. This allows blobs to be priced cheaper than CALLDATA, which is stored in history forever.  Changes to the execution (i.e., geth, erigon, etc.) and consensus (i.e. prysm, lighthouse, etc.) layer are specified in EIP-4844 and the beacon chain specifications. Changes to the execution (i.e., geth, erigon, etc.) and consensus (i.e. prysm, lighthouse, etc.) layer are specified in EIP-4844 and the beacon chain specifications. Prototypes of the modifications that are going to be necessary in both the consensus layer and execution layer clients. You can follow progress on this front here. Prototypes of the modifications that are going to be necessary in both the consensus layer and execution layer clients. You can follow progress on this front here.  Part of EIP-4844 involves using KZG commitments. To generate the seed for these these, a browser-based widely distributed ceremony will be run so everyone has a chance to ensure it is generated correctly and securely.  Part of EIP-4844 involves using KZG commitments. To generate the seed for these these, a browser-based widely distributed ceremony will be run so everyone has a chance to ensure it is generated correctly and securely. Devnets  To demonstrate the feasability of EIP-4844, a developer network testing environment is now available with an initial implementation of the changes. Instructions to launch a network are available here.  To demonstrate the feasability of EIP-4844, a developer network testing environment is now available with an initial implementation of the changes. Instructions to launch a network are available here. Once the devnet has been shown to work and the contributors have confidence in it, a testnet will be started to show the community how everything works and to allow anyone to be a validator, run a node, etc. To ensure the design of the EIP is sound and all potential issues have been addressed, a public list tracks these concerns and potential solutions here. These are great entry points for new contributors! To ensure the design of the EIP is sound and all potential issues have been addressed, a public list tracks these concerns and potential solutions here. These are great entry points for new contributors! EIP-4844 is project-neutral and being developed 100% in the open by a wide mix of developers across different teams. Any contributions, big or small, are very much welcomed. The best way to help technically is to understand what's going on and dive into one of the repos or discussion groups linked below.  Written by Vitalik Buterin Several teams have contributed to EIP-4844 in addition to core developers, each of them wanting to onboard a large number of users to Ethereum without compromising on affordability or security.  EIP-4844 is widely supported by Ethereum core developers, optimistic rollup and zk-rollup teams, dapp developers, cross-chain bridge implementers, exchanges, and more. Something missing on this website? Message @liamihorne or @timbeiko on Twitter.
================================================================================
Title:  Math 
Date: Date not available
Content:





















Dark Mode Toggle








 Math 

 Math 

Blockchains
Cryptography
Economics
Fun
General
Gitcoin
Math
Philosophy
Translations




2024 Jul 23

Exploring circle STARKs



2021 Jun 18

Verkle trees



2019 May 12

Fast Fourier Transforms



2019 Apr 01

[Mirror] Cantor was Wrong: debunking the infinite set hierarchy


 
================================================================================
Title: Open problem: improving stealth addresses - Cryptography - Ethereum Research
Date: 
                    May 16, 2020,  1:32pm
                  
Content:
Stealth addresses in their most basic form work as follows: This allows paying a recipient without the public learning even that the recipient has been paid (think of the recipient’s key P as being publicly associated with some real-world identity, eg. via ENS). However, this protocol has the downside that some offline channel is required to learn r. One option is to encrypt r with P and publish this to the blockchain, which solves the problem but it comes at an efficiency cost: the recipient now has to scan through all stealth transactions to learn about any payments that are for them. Some of the proposals in the above link can solve this problem by assuming that the recipient knows which sender will send them funds, but this is not always the case; sometimes, the sender may even want to be anonymous. The challenge is: can we improve these protocols in such a way that reduces the scanning overhead for the recipient? The approach above has ~64 bytes and one elliptic curve multiplication per transaction in the anonymity set; can we do better? There are information-theoretic arguments that show some limits: there must be at least O(N) information that the total set of recipients must listen to, as it must somehow contain for every recipient the information of whether or not they received a transaction. If each sender only modifies O(1) elements in this information, then the recipients would have to do an O(N)-sized scan, or else the senders would have to know which portion of the data the recipient is scanning, which can be used to detect transactions that are more likely going to the recipient. Note that enlisting off-chain actors to perform complicated work (eg. updating the entire dataset after each transaction) to assist the recipients is acceptable. Here is one fairly inefficient and complicated (but reasonably elementary in the mathematical sense) solution that seems to work: This does involve a lot of work, though it could be outsourced and incentivized and verified via some ZK-SNARK-based plasma scheme (the dataset would be stored off-chain to avoid huge on-chain gas costs for rewriting it). Another alternative is to use fully homomorphic encryption to outsource checking: use FHE to allow some third party to walk through the entire set of encrypted values, decrypt each value, and return the values that decrypt correctly. Given FHE as a “black box protocol” this is conceptually simpler; it also means that complicated constructions to store and maintain data off-chain are not necessary. However, the FHE approach may be more expensive. Edit: this problem feels very conceptually similar to PIR (either the access variant or the search variant) but not quite the same; the main difference is that each recipient must only be able to read their own values. What I can think of is that, there are two directions to optimise the verification overhead of stealth address: 1) optimising the verification overhead of each tx, 2) reducing the number of txs to verify by filtering.
For 1), the optimisation space is very small, as scalar multiplication on an elliptic curve seems to be the cheapest trapdoor function already. For 2), there seems to be a trade-off between privacy and verification overhead.
Let me informally prove this statement below. I cannot guarantee it’s fully correct, and I’m happy to be proven wrong. We shatr from proving the necessity of the randomness r for constructing stealth address. Lemma 1: To receive money without revealing the receiver’s address, 1) the sender should always use a secret r and send r to the receiver privately, and 2) the receiver should always scan all txs on the blockchain to find txs going to himself.
Proof: Without the first condition, each stealth address can be mapped to a real address deterministically, which leaks the real address.The second condition is always necessary regardless of the stealth address. Consider payments without stealth address, the receiver should still compare his address with addresses in txs on the blockchain. Then, we identify the security foundation of the stealth address, namely the CDH. Lemma 2: To break the privacy guarantee of stealth address, one should break Computational Diffie-Hellman.
Proof: Easy from the security proof of the stealth address, i.e., prG = pR = Pr. CDH relies on a trapdoor function. So far the most practical trapdoor function seems to be the elliptic curve scalar multiplication already. I don’t know any trapdoor function that is more lightweight than this. If there exists one, replacing EC scalar multiplication with this trapdoor can speedup verification directly. Then, we consider the second possibility: filtering txs so that the receiver only needs to perform trapdoor functions on a subset of txs rather than all txs. Here is a simple solution. In a nutshell, each tx attaches a short prefix of the receiver’s PK, and the receiver only needs to run trapdoor functions over txs with his PK’s prefix.
Each tx attaches an extra byte b equal to the first byte of the receiver’s PK. Upon a tx, the receiver checks whether his PK’s first byte equals to this tx’s b. If no, then this tx is not for the receiver. If yes, the receiver further computes the trapdoor function to see whether this tx is really for himself. This allows the receiver to run trapdoor functions on \frac{1}{16} of all txs only.
However, the privacy downgrades for 16 times in the meantime, as the search space narrows down for 16 times. It’s easy to see that, given a fixed trapdoor function, there is a trade-off between privacy and verification overhead.
Less verification overhead -> fewer txs to verify using trapdoor function -> fewer txs to search for identifying the receiver. Yeah I agree the linear privacy / efficiency tradeoff exists and can be exploited. I do think there may be fancier tricks that let us go down from 1 ECsig per transaction (in the anonymity set) to something closer to the theoretical minimum of a few bits per transaction though. Then we should eliminate all asymmetric crypto operations. Consider using something like one-time address scheme. Assuming Bob wants to transfer 1ETH to Alice. In short, this embeds a hashlock to the address, and Alice generates a one-time address scheme for receiving money everytime.
If Alice doesn’t want to construct tx herself, she can just send Bob H(alice\_addr || x) and let Bob do that.
If you want even more security, say anyone other than Alice can know who receives this money even with the knowledge of x, you can replace hash using a VRF. Only Alice can generate a proof. Unfortunately this requires EC operations again. In this scheme, Bob cannot know Alice’s address, so cannot prove he sent Alice money. In addition, it only needs a hash function and Alice can scan txs efficiently, as she only needs to compare the one-time address with all addresses in existing txs (or just compare txid as she generated this tx).
The downside is that, creating receipts can be hard in this scheme.
Note that this approach requires hard forks. Not sure if there is any other design consideration. To me stealth address may not need asymmetric crypto.
Homomorphism (of EC scalar multiplication) adds no more security than the scheme above.
In the original stealth address scheme, Bob sending R to Alice seems to hide the real value of r. This can somewhat prevent Alice from proving “she receives money from Bob”, as Alice should show her sk to prove this. I see no point of making “Alice receiving money from Bob” deniable and unprovable. Meanwhile, with r Bob can still prove he sent some money to Alice’s address by revealing r. When spending tx , Alice should show x One big challenge with the scheme is here; showing x allows anyone else to create a spending transaction and potentially front-run her. Additionally, third parties can’t generate stealth addresses by themselves; Alice has to generate the address for them, so it doesn’t quite fit into the same pattern. One big challenge with the scheme is here; showing  x  allows anyone else to create a spending transaction and potentially front-run her. The output is hold by Alice. How can others create a transaction spending this money without knowing Alice’s secret key? Additionally, third parties can’t generate stealth addresses by themselves; Alice has to generate the address for them, so it doesn’t quite fit into the same pattern. Like I said, Alice (the receiver) can be the one who creates transactions for Bob (the sender). And what do you mean by “third party” here? There seems to only have sender Bob and receiver Alice. Ah sorry, I mean Bob can’t perform the entire procedure offline, and it requires interaction from Alice. That’s the property I was trying to achieve. I see. Indeed Bob needs to wait for Alice to send the transaction to him. If we don’t want Bob to reveal Alice’s identity, then this is inevitable.
To make this protocol non-interactive (for Bob), what we can do is to let Bob choose the random number x, construct/commit a transaction with output H(alice\_addr || x), and sends x to Alice. This achieves the same security guarantee as the original stealth address, yet minimises Alice’s scanning overhead. Vitalik observes the \mathcal{O}(n)/\mathcal{O}(1) tradeoff: namely if sender only modifies \mathcal{O}(1) number of bits, then recipient necessarily needs to do a \mathcal{O}(n) scan. The protocol described below shows that it is possibe to achieve \mathcal{O}(\log n)/\mathcal{O}(\log n) scan sizes asymptotically for sender and recipient. However the concrete efficiency of the scheme is terrible as it requires huge group elements. Preliminaries: the used cryptographic assumption
Informally, the quadratic residuosity assumption states that given integer a and a a semiprime N such that (\frac{a}{N})=1 (Jacobi-symbol), it is computationally infeasible to decide without knowing the factors of N with success probability non-negligibly larger than simply guessing, whether a\bmod{N} is quadratic residue or not. Stealth transaction screening protocol
Setup
Each participant i generates a modulus N_i=p_{i}q_i and publishes a quadratic non-residue \mathit{qn}_{i}\bmod{N_i} such that (\frac{qn_i}{N_i})=1. Since i knows the factors of N_i can easily generate such a quadratic non-residue \mathit{qn}_{i}. Each participants posts the pair (N_i,\mathit{qn}_{i}) to the blockchain and as of now let’s assume that the number of participants in the stealth address system is a fixed constant. We can furthermore assume wlog. that gcd(N_i,N_j)=1 for each i\neq j. Let N=\Pi_{i}N_i. Sending stealth transaction
Let’s assume sender wants to send a transaction to participant with index i. Then sender generates k\in_{R}\{0,1\}^{\lambda}, where \lambda is the security parameter. Then sender computes x\in\mathbb{Z}_{N} such that x\equiv qn_{i}^{2k+1}\bmod{N_i} and for all j\neq i we want x\equiv qn_{j}^{2k}\bmod{N_j}. Such an x can be efficiently computed by applying the Chinese-Remainder Theorem. The motivation behind generating x this way is that it is a quadratic residue by definition modulo every non-recipient index, but it is a quadratic non-residue for the recipient. For every non-participating user quadratic residuosity with respect to any modulus remains hidden, unless they break the quadratic residuosity assumption. Sender attaches x to its transaction and posts it unto the blockchain. Note, that unfortunately the size of x is huge, which is a big disadvantage of the scheme. Given many stealth transactions, we build a binary tree using the x values as follows. Each non-leaf node is computed as the multiple of its children \mod N. See this figure for a tree containing 4 stealth transactions!  Screening for a stealth transaction
After every incoming stealth transaction either on-chain, but most likely off-chain we update the binary tree of the x_j values. The number of the leaves correspond to the number of stealth transactions. Whenever a user comes online, checks whether the root is quadratic non-residue with respect to her modulus. If no, then she did not receive a transaction. If yes, then checks which of the children is a quadratic non-residue with respect to her modulus and recursively can find the corresponding x_j value whose quadratic non-residuosity propagated to the root with respect to her modulus. Once this specific x_j was found, the referenced transaction on the blockchain can be found easily (for instance there will be an event which logs the x value of each stealth transaction). And then only the correct event needs to be fetched with the specific x_j value. Altogether this method allows a logarithmic lookup of a stealth transaction in the number of all stealth transactions. However, the scheme is not practical, since all the values in the tree are prohibitively large, given that they are elements in \mathbb{Z}_N, where N is the product of all participants moduli. Immediate downsides Nodes in the tree are prohibitively large as they are elements in \mathbb{Z}_{N}. Only an odd number of incoming stealth transactions can be detected this way as the effect of two incoming transactions would kill each other, since the multiple of two quadratic non-residues is quadratic-residue. Advantages Asymptotically interesting construction It allows to detect not only whether recipient got a stealth transaction but also recipient can locate the stealth transaction in logarithmic time. Could there be a way to make this scheme practical? Isn’t N = \prod_i N_i an O(n) sized value, and so the x value that the sender needs to publish to chain would also be O(n) sized? How is this asymptotically better than more naive approaches? Is it optimized for a “many transactions but not many users” scenario? Yes, you’re right. Indeed, x\bmod{N} would be a huge \mathcal{O}(n) sized value. I was taking the asymptotics in the number of stealth transactions and considered any group operation as constant regardless of the size of the underlying group. Maybe there is a tension between number of users and stealth transactions? Would be nice to have a scheme which is scalable to many users AND many stealth transactions. Maybe one could demand from senders that x should be not more than, say 2048 bits. When sender sends a stealth transaction to participant j, then x is generated such that x\equiv qn_{i}^{2k}\bmod{N_i} for all i\neq j and  x\equiv qn_{j}^{2k+1}\bmod{N_j} by using the Chinese Remainder Theorem. MAYBE sender could choose the k values in a way, that the resulting x would be small. But I suppose the best approach would be for this is brute-forcing k unless factoring or composite DLOG is easy. One way to improve concrete efficiency might be: have every participant declare, for every prime in \{2, 3, 5 ..... 997\}, whether or not that prime is a residue. Then Alice could just choose a random x, solve a linear system of binary equations to figure out which subset of those to multiply it by to make x have the right residuosity over all moduli, and use that value. Would still be O(n) but at least it would only be a few bits per participant. Wow! This is a nice idea! If I understand correctly your idea then it would allow essentially constant-sized leaves, say 2048-bits. Altogether this improvement yields logarithmic-sized tree root (in the number of stealth transactions). I suppose to maintain such a tree on-chain is prohibitively expensive. This makes the scheme just a theoretic curiosity. Other major drawbacks/challenges none of the two proposed schemes above solved so far: Fixed set of recipients
To make such a technique practical it must be permissionless. Namely, it should be able to support any parties to join the stealth transaction scheme after the stealth transaction scheme launched. Security against malicious senders
Both of the proposed schemes implicitly assumed honest senders. Ie. they took granted that participants will insert leaves honestly in the tree or in Vitalik’s scheme they will compute the value S_i correctly. This obviously could be solved with simple zero-knowledge proofs, but would make the schemes even more inefficient as, in general, ZKPs for hidden order groups are quite inefficient, see Bangerter et al. This is obviously not true, if zk proofs are not needed to be posted on-chain. This is a solution I came up with! Notation : M: Number of receivers t : Index of last checked stealth transaction t’ : Index of latest stealth transaction R_i : receiver S : Sender Setup
Each receiver broadcasts a scan public key pk_i, for a homomorphic encryption scheme An array A is initialized as [Enc_{pk_1}(0), … Enc_{pk_M}(0) ] Send
To send a transaction to receiver R_i, the sender S creates an array, txA = [Enc_{pk_1}(0), … Enc_{pk_1}(1),..., Enc_{pk_M}(0) ] and computes A' = txA + A = [Enc_{pk_1}(s_1), … Enc_{pk_i}(s_i + 1),..., Enc_{pk_M}(s_M)] (Basically add an encryption of 1 to the receiver’s encryption and an encryption of 0 to all others.) Sender broadcasts the updated A' Receive
A receiver R_i comes online at index t’, (let the array A_{t'} be the array) and check if Dec(A_{t'}[i]-A_{t}[i]) > 0. If yes, this implies that there exists a transaction for R_i in the interval [t,t’]. R_i then checks Dec(A_{t'}[i]-A_{(t’+t)/2}[i]) and Dec(A_{(t’ + t)/2}[i] - A_{t}[i]). The receiver can decide to go left or right and recursively compute the index of its transaction. The complexity of the receiver thus is O(log(t’ - t)). Privacy of the recipient is guaranteed since only the receiver is able to decrypt the encryption at its index. With respect to efficiency, the receiver needs to do only O(log (t’-t)) checks. Downsides: Other nice things we can do: Does this approach require the sender to broadcast (publish to chain?) an O(M) sized piece of data? If so I do think that’s unfortunately too inefficient. On-chain data is expensive  That said, if you’re willing to use medium-degree somewhat-homomorphic encryption (ie. lattices), you can solve this whole problem by just outsourcing the search - which could in the long run be the most correct approach. The following protocol exploits the subgroup hiding assumption in groups of unkown order to hide a bit (or few, see “Some considerations”) of information sent to users’ public registers. This bit tells recipient if they received one or more stealth transaction from their last check. In practice, the sender sends a 1 bit to the recipient of his stealth transaction, while sends the 0 bit to all other members in the anonymity set. Feedbacks are welcome! Keygen. User i generates two safe primes p_i= 2\tilde{p_i}+1 and {q_i} = 2\tilde{q_i}+1 and computes n_i = p_iq_i. It follows that |\mathbb{Z}_{n_i}^*| = 4\tilde{p_i}\tilde{q_i} = 4\tilde{n_i} and randomly chooses g_i,u_i of order \tilde{n_i} in \mathbb{Z}_{n_i}. Sets h_i = u_i^{\tilde{q_i}} \text{ mod }n_i (so h_i has order \tilde{p_i}) and publishes his public key as (n_i, g_i, h_i). Register Initialization. Each user i initializes a public register S_i to h_i^{r_i} \text{ mod }n_i for a random value r_i and sets a secret register \omega_i to 1. Send. A sender wants to send a secret bit b to user i: he then updates user’s public register as S_i = S_i\cdot w_i \text{ mod }n_i. Receive. User i computes s_i = S_i^{\tilde{p_i}} \equiv g_i^{\tilde{p_i}\sum_l a_l} \text{ mod }n_i and checks if s_i is equal to \omega_i. If they’re equal, he then received only 0 bits from his last check. If not, he received at least one 1 bit and updates his secret register \omega_i as \omega_i = s_i. Register Reset. After receiving one or more 1 bit, each user i could reset his public register by computing w_i = S_i^{\tilde{q_i}-1}\cdot h_i^{r_i} for random r_i and letting S_i = S_i \cdot w_i \text{ mod }n_i. He then resets his secret register \omega_i to 1. Well - what is described here does look very much like identify-based signatures. There is a master key that can be used to derive private keys from public strings … Identity-based cryptography is a type of public-key cryptography in which a publicly known string representing an individual or organization is used as a public key. The public string could include an email address, domain name, or a physical IP address.
 The first implementation of identity-based signatures and an email-address based public-key infrastructure (PKI) was developed by Adi Shamir in 1984, which allowed users to verify digital signatures using only public information such as the user... To me it seems that this construction is quite similar in its nature to the one described above using quadratic residuosity (QR). Note, that also the QR assumption is a subgroup hiding assumption of some sort. Vitalik’s idea for reducing the size of \omega also applies here. So you can claim \mathcal{O}(1) sizes for \omega at the expense of increased \mathcal{O}(M) sender computation for generating the correct \omega. It is cool that you can “store” several bits in the register. @kladkogex Looks interesting, but I didn’t really get how it applies here. IDB is not my area, but from the Wikipedia description the advantage seems to be that senders can generate receivers’ public key on the fly and send their bits: this would indeed improve efficiency (no need to download PKs)although you would need a central authority, which usually is not desiderable… If you meant another application could you please elaborate more with a small example? @seresistvan Yes they have clear similarities, although this construction solves the problem of not detecting an even number of received transactions. Powered by Discourse, best viewed with JavaScript enabled
================================================================================
Title: Pragmatic signature aggregation with BLS - Sharding - Ethereum Research
Date: 
                    May 31, 2018,  2:00pm
                  
Content:
TLDR: We suggest using BLS signature aggregation as a pragmatic medium-term solution to the signature verification bottleneck of sharding and Casper, later replacing it with STARK-based aggregation for quantum security. Background Signature verification is the major bottleneck for both sharding and Casper. Assuming 32 ETH deposits (relatively small deposits to encourage participation and decentralisation) and ~10,000,000 ETH at stake we get ~312,500 validators. Casper finality requires 2/3 of the validators to vote, and with ECDSA signatures a single on-chain Casper cycle would take ~1 day. For sharding, the signature verification bottleneck forces us to compromise: (With signature abstraction individual signatures can be an order of magnitude more expensive to process, worsening the bottleneck compared to ECDSA.) One strategy to relieve the signature verification bottleneck is signature aggregation. Two aggregation techniques have been developed in-house but neither is fully satisfactory: Two other options we have considered for aggregation are BLS signatures and STARKs. Up until recently both were not viable. Specifically, while BLS signatures can shrink the size of signatures, they would still require n+1 relatively expensive pairings to verify n aggregated signatures. Furthermore, BLS signatures are not quantum-secure. As for STARKs, their 3-4 MB size made them unwieldy for the foreseeable future. Coincidentally, and in a stroke of good fortune, there have been two recent cryptographic breakthroughs: These two breakthroughs combined point to an attractive roadmap for signature aggregation: BLS aggregation design Before digging into BLS aggregation performance and example use cases we recap the simple and elegant design (the notation differs from the paper): Notice that aggregation is non-interactive (i.e. signatures can be aggregated by anyone after broadcast) and is incremental (i.e. incorporating a new signature s_{n+1} into an aggregate signature \sigma can be done with multiplication). BLS aggregation performance As suggested in the BLS paper we use the 128-bit security BLS12-381 curve. This curve will be used by Zcash for its next-generation SNARKs, and by Chia (see here) to compress signatures for its blockchain. The curve is asymmetric (i.e. G_1 \ne G_2) with one of the two groups G_1, G_2 being big-and-slow, and the other small-and-fast. For performance Zcash uses G_1 as the small-and-fast group, whereas Chia uses G_1 as the big-and-slow group (see here). We follow Chia’s direction by having G_1 be big-and-slow. Concrete overheads (numbers from the Zcash implementation optimised for safety; Chia is working on speed optimisations): Example 1: Casper finality loop Let’s assume 2/3 of the 312,500 validators voted on the same Casper checkpoint. The corresponding aggregate signature would consist of 312,500 bits (39,062 bytes) describing the subset of validators that voted. The aggregate signature proper would add another 96 bytes for a total under 40kB. For on-chain verification, it would take 2/3 * 312,500 * 1,350ns = 281.25ms to reconstruct the aggregate public key, plus 2 * 2.7ms for the two pairings, for a total under 300ms on a single core. With quad-core parallelisation it would be ~75ms. The bottleneck for Casper signature processing is no longer signature verification (the beacon chain can easily verify a full Casper vote every minute). Instead, the question is how fast can 2/3 * 312,500 messages (each of size ~300 bytes including Ethernet, IP and TCP headers) be aggregated offchain? One natural direction is “sharded aggregation” where beacon chain leaders are only responsible for aggregating signature in the shard for which they are a proposer. (Each shard has 3,125 infrequently shuffled proposers.) We can reuse the shard gossip channels, and limiting throughput to 4 messages per second allows us to aggregate all messages in about 9 minutes. Example 2: Crosslinks Let’s assume that at every beacon chain block (every ~5 seconds) a 500-of-1000 committee crosslink is added. In total a crosslink would be ~300 bytes (1000 bits to describe which validators voted, plus 96 bytes for the aggregate signature, plus 32 bytes for the chunks root, plus overhead) and would take at worst 1000 * 1,350ns + 2 * 2.7ms = 6.75ms to verify. This is a small load on the beacon chain every 5 seconds. Because each shard would get crosslinked on average once per 100 blocks, crosslinking would happen roughly every 9 minutes. Conclusion With BLS signature aggregation we may be able to address the signature verification bottleneck. This would allow for 10-minute onchain Casper finality loops, 500-of-1000 committees, stronger windback validation, 10-minute crosslinking, and more shards (possibly up to 1,000 shards). If and when quantum computers threaten BLS cryptography the plan is to do a drop-in replacement using STARKs. Sorry, I haven’t been reading the posts on the new sharding designs, so I have a question from the point of view of Casper only. What is a “beacon chain” in the context of Casper-FFG? As a side comment, one should be careful about using anything that comes out of Stanford since Stanford has a policy of patenting things. The original BLS scheme was patented. Another question I have is why is it an aggregate signature and not a threshold signature? My understanding is that for an aggregate signature all parties need to participate, so a malicious validator can simply withold its signature What is a “beacon chain” in the context of Casper-FFG? Good question  It’s the same beacon chain as for sharding. We are considering merging Casper and sharding such that the Casper FFG system logic and the sharding system logic both run on the beacon chain instead of on the legacy main chain. For validators to make 32 ETH deposits the legacy chain would have a one-way burn contract. Withdrawals of deposits and rewards would remain disabled until we ship the EVM 2.0 in the shards. Advantages of this new approach include: Stanford has a policy of patenting things. The original BLS scheme was patented. Good point—I’ll look into it. Do you have a link to the patent for the original BLS scheme? why is it an aggregate signature and not a threshold signature? We can use an aggregate signature, it just means that a fresh public key needs to computed for every new subset of signing validators (as opposed to always reusing the same public key). That’s OK because computing public keys only involves fast multiplications and is highly parallelisable. The new BLS paper does also provide a threshold signature scheme but it requires a one-time interactive setup to build the public key. This setup doesn’t scale well and doesn’t easily allow for changes to the validator set. I think here is the original patent that cites threshold encryption among other things related to IBE https://patents.google.com/patent/US7113594B2/en?q=boneh&q=threshold&oq=boneh+threshold An entire company (Voltage Security) was based on this patent.  I guess they are not enforcing is so much anymore, although Aug 13 2001 is less than 20 years in the past. Eli and his team from StarkWare have been able to reduce the size of STARKs to 80kB. Got a reference for that? I can’t find any info searching online. Curious for some clarification, how does the legacy main chain (current chain) relate to the proposed beacon chain? here is the original patent Dan Boneh didn’t file BLS patents, and is not aware of patents on BLS. Got a reference for that? I can’t find any info searching online. Sorry I don’t think it’s online yet. The info came from discussions with Eli Ben-Sasson. As I understand 80bK is the size StarkWare got for the equivalent of a single Zcash transaction. There are a couple of factors that may increase the size to the 100kB-200kB range for us: how does the legacy main chain (current chain) relate to the proposed beacon chain? The beacon chain is a sidechain to legacy chain in the sense that: At some point in the future the legacy chain can become a sidechain to the beacon chain. Dan Boneh didn’t file BLS patents, and is not aware of patents on BLS. Thats great that he explicitly says that Rob and/or Alistair noticed this proposal uses only pk_i^{H(pk_i)} while the paper uses pk_i^{H(pk_i, \{ pk_1, ... pk_n \})}.  In the paper, the security proof models H as a random oracle, so the version presented here sounds fine, assuming ROM, but… Random oracles do not actually exist, so one normally implements them as if they were a PRF by giving them a nonce/key.  This pk_1, ..., pk_n is that key. Afaik, there should be no real performance penalty, or implementation issues, arising from adding the pk_1, ..., pk_n here.  In principle, one could use another key instead, but most good alternatives do come with implementation headaches, ala using the most recent block or whatever. this proposal uses only pk_i^{H(pk_i)} while the paper uses pk_i^{H(pk_i, \{ pk_1, ... pk_n \})}.  In the paper, the security proof models H as a random oracle, so the version presented here sounds fine Well spotted, and thanks for bringing this up! I also thought that we didn’t need the pk_1, ..., pk_n in H. (Partly because the blog post prior to peer review didn’t include them.) It turns out—somewhat expectedly—that cutting corners on the reviewed paper was a bad idea.  In an email conversation Dan Boneh writes: “there is a sub-exponential time attack on the resulting system, described on page 12 of the Maxwell et al. paper”. As I see it adding the pk_1, ..., pk_n in H is a significant slowdown because the public key exponentiations have to be redone (i.e. cannot be cached). The good news is that we do not need the 2018 BLS paper at all, i.e. it suffices to do plain BLS aggregation with proofs-of-possession at registration to address the rogue public key attack. As I understand, a proof-of-possession is simply the BLS signature of the public key, but the hash function for the proof-of-possession must be different to the one used for signing messages. Using proofs-of-possession has the added advantage that the aggregation scheme is even simpler than the one presented in the original post. In fact, the blog post does use pk_1, \ldots, pk_n when it writes t_1, \ldots, t_n \leftarrow H(pk_1, \ldots, pk_n).  It just folds the pk_i into the list and distinguishes by output stream location. I’m surprised about there being an attack myself, but maybe I have not read the paper closely enough.  Afaik, there is no way to avoid the public key exponentiation anyways since the versifier must check that too anyways. Is there a reference for this proof-of-possession thing?  It’s just adding the BLS signature on themselves?  I’d need to think about the attack when using the same hash function. the blog post does use pk_1, \ldots, pk_n when it writes t_1, \ldots, t_n \leftarrow H(pk_1, \ldots, pk_n) Oh right! I miss-read that  Afaik, there is no way to avoid the public key exponentiation anyways since the versifier must check that too anyways. Yes but it would be a one-time cost, and the verification could have been done at registration by the blockchain at no cost to verifiers. Is there a reference for this proof-of-possession thing? It’s just adding the BLS signature on themselves? I’d need to think about the attack when using the same hash function. See this paper. On page 4 it states: “We show that the standardized POP mechanism described above, when applied to these schemes, does not lead to secure multisignatures. Both schemes fall to rogue-key attacks despite the use of the standardized POPs. We present a straightforward and natural fix for this problem: simply use separate hash functions for POPs and multisignatures.” Thanks for the reference! Yes but it would be a one-time cost, and the verification could have been done at registration by the blockchain at no cost to verifiers. I think this depends what you means by blockchain:  If you mean the whole network, then yes but if accounts are single use then amortized this gives the same cost.  If you means some smallish set, then no because an adversary could corrupt that entire set, and then submit false transactions. I figured it out, probably.  We already can aggregate the proofs of possession because they are on different messages, so this should all be fine in the end. Aggregation over different messages is not as efficient because you need one pairing per message, but that’s better than two pairings per message. Actually, one exponentiation per key for Dan’s scheme should be dramatically faster though. I’m also wondering if the exponents need to be big.  In Dan’s paper, they must be big because of the reduction to co-CDH, but intuitively 128 bits sounds sufficient so one wonders. I don’t understand the concern of your last two replies. Are you worried about the costs of registering a new BLS public key? if accounts are single use Accounts are not at all single use. Keep in mind that the deregistration period of a validator will be ~4 months, and that every validator is invited to make a signature every ~5 second for attestations. So validator accounts will likely be making millions of BLS signatures in their life time with the same public key. If you means some smallish set, then no because an adversary could corrupt that entire set, and then submit false transactions. I don’t understand this sentence.  Set of what? What false transactions? We already can aggregate the proofs of possession because they are on different messages Right, we could aggregate proofs of possession for ~2x reduced verification costs. But is the extra complexity worth it? Without aggregation each proof of possession takes ~5ms to verify so even assuming conservatively 100,000 registrations per month that’s ~4 minutes of verification time saved per month. one exponentiation per key for Dan’s scheme should be dramatically faster The one-time proof of possession might be slower to verify than an exponential, but then every single signature (of which there are millions per public key) would be faster to verify. Are you worried about the costs of registering a new BLS public key? I had not quite understood if registration was even the right model. Keep in mind that the deregistration period of a validator will be ~4 months, and that every validator is invited to make a signature every ~5 second for attestations. So validator accounts will likely be making millions of BLS signatures in their life time with the same public key. I see.  We’re not even talking about account keys, but validator’s signatures.  In that case, there isn’t so much difference between the threat models anyways, so probably fine. I don’t understand this sentence.  Set of what? What false transactions? I’m asking about corrupting the entire validator set, or maybe just 2/3rds, entering rogue keys for large accounts that rarely move, and much later stealing the balances form the target accounts.  It’s kinda the long-term double spend attacks, but with a simpler payoff and an arbitrary delay that likely increases its viability. You’re not talking about aggregating transaction signatures though, and doing so must deal with different messages anyways, while only validator signatures cover the same message. I’m asking about corrupting the entire validator set, or maybe just 2/3rds, entering rogue keys for large accounts that rarely move, and much later stealing the balances form the target accounts. It’s kinda the long-term double spend attacks, but with a simpler payoff and an arbitrary delay that likely increases its viability. I’m confused here. How is entering rogue keys for other accounts even possible if you have to make a proof of possession at time of registration? I’m confused here. How is entering rogue keys for other accounts even possible if you have to make a proof of possession at time of registration? Rogue keys are not possible under the assumption that registration happened correctly.  I’m pointing out that assumption can be violated more easily than standard cryptographic assumptions.  In particular, a correct registration assumption might hold for one proof-of-stake scheme but cause problems for another one that handles the economic threats differently. Ah, I see. I think in general registration is an unavoidable part of all of the kinds of deposit-based PoS algorithms we are using, because a signature is not even valid in a beacon chain unless the validator that made the signature has already sent a deposit transaction and been inducted into that beacon chain. So it’s totally ok to assume that registration happened correctly in our case. Powered by Discourse, best viewed with JavaScript enabled
================================================================================
Title: Polygon Blog | Announcements, updates, and news
Date: Date not available
Content:
The trustless, cross-chain interoperability protocol Build Ethereum layer2s with industry leading ZK tech An EVM enabled sidechain An EVM equivalent, open-source zk-Rollup Zk-optimized rollup with client-side proving Build and design fast, efficient zkVMs and zkEVMs. Explore our protocol documents and wiki. Collection of tools to help you develop on Polygon Protocols Connect with Solution Providers on Polygon to help build your dApp Learn everything to get started on Polygon Find your crew Participate in shaping Polygon Protocols Meet us at events across the globe Book 1:1 meetings with our developer relations team Explore the vast Polygon Ecosystem Find a job in the Polygon Ecosystem Get funding for your project Where builders, tinkerers and developers come together to create the future, on Polygon Meet our team and hear our origin story Polygon's gas token Find your dream job Reach out with any questions Bridge, swap and manage assets on Polygon Participate in securing the network Explore transactions on Polygon PoS Explore transactions on Polygon zkEVM Ecosystem, dapp dev and support Protocol Research & Development The trustless, cross-chain interoperability protocol Build Ethereum layer2s with industry leading ZK tech An EVM enabled sidechain An EVM equivalent, open-source zk-Rollup Zk-optimized rollup with client-side proving Ecosystem, dapp dev and support Protocol Research & Development Explore our protocol documents and wiki. Learn everything you need to know to get started on Polygon Collection of tools to help you develop on Polygon Protocols Connect with Solution Providers on Polygon to help build your dApp Ecosystem, dapp dev and support Protocol Research & Development Find your crew Participate in shaping Polygon Protocols Get funding for your project Meet us at events across the globe Book 1:1 meetings with our developer relations team Where builders, tinkerers and developers come together to create the future, on Polygon Explore the vast Polygon Ecosystem Find a job in the Polygon Ecosystem Ecosystem, dapp dev and support Protocol Research & Development Build and design fast, efficient zkVMs and zkEVMs Ecosystem, dapp dev and support Protocol Research & Development Meet our team and hear our origin story Polygon's gas token Find your dream job Reach out with any questions Ecosystem, dapp dev and support Protocol Research & Development Bridge, swap and manage assets on Polygon Participate in securing the network Explore Transacion on Polygon PoS Explore Transacion on Polygon PoS Ecosystem, dapp dev and support Protocol Research & Development Instagram users will soon be able to use the site to mint, showcase and sell digital collections powered by non-fungible token (NFTs) on Polygon, giving creators a new way to engage with and monetize their fan communities and other areas of interest Instagram users will soon be able to use the site to mint, showcase and sell digital collections powered by non-fungible token (NFTs) on Polygon, giving creators a new way to engage with and monetize their fan communities and other areas of interest Instagram users will soon be able to use the site to mint, showcase and sell digital collections powered by non-fungible token (NFTs) on Polygon, giving creators a new way to engage with and monetize their fan communities and other areas of interest Instagram users will soon be able to use the site to mint, showcase and sell digital collections powered by non-fungible token (NFTs) on Polygon, giving creators a new way to engage with and monetize their fan communities and other areas of interest After a year of community-led discussions and consensus, MATIC has been upgraded to POL as the network token for Polygon The POL upgrade is coming September 4th Polygon Plonky3 is the Next Generation of ZK Proving Systems The AggLayer’s main benefits can solve crypto’s biggest problems of fragmentation Season 01 of the Community Grants Program, overseen by the neutral Community Treasury Board, will distribute 35M MATIC to projects building on Polygon A recap of everything that's happened in Polygon 2.0, to date. L3s have drawbacks aggregated L2s don't have. As an approach to scaling blockchains, the “aggregated” category is brand new.  Union will connect to the AggLayer, enabling message-passing and token transfers between the AggLayer and Cosmos chains connected to IBC.  X Layer will also connect to the AggLayer, allowing the exchange giant's 50M+ users to connect to an aggregated blockchain environment. This post introduces a new mental model: Polygon is the first aggregated blockchain network Unpacking the Napoli upgrade, and a farewell to the beloved Mumbai testnet AggLayer's first components are live Ecosystem, dapp dev and support Protocol Research & Development
================================================================================
Title:  Translations 
Date: Date not available
Content:





















Dark Mode Toggle








 Translations 

 Translations 

Blockchains
Cryptography
Economics
Fun
General
Gitcoin
Math
Philosophy
Translations




2022 Oct 28

我在加密世界的一些个人体验



2022 Oct 28

收入-邪恶曲线：思考“公共物品融资优先”的另一种方式



2022 Aug 29

不同類型的 ZK-EVM



2022 Aug 04

Farklı ZK-EVM Türleri



2022 Jul 13

「网络国家」之我见



2021 May 25

La votación mediante blockchain está sobrevalorada entre personas desinformadas pero subestimada entre personas informadas



2021 Mar 23

El recurso escaso más importante es la legitimidad



2021 Jan 05

La Guía Incompleta de los Rollups



2020 Nov 06

為什麼權益證明棒棒的（2020 年十一月）



2020 Oct 18

 7ème tour des subventions Gitcoin - Rétrospective 



2020 Feb 18

預測市場：一個選舉小故事（2021年 二月）



2016 Dec 29

[Mirror] Bir Proof of Stake Tasarım Felsefesi



2000 Jan 01

Über Kollusion



2000 Jan 01

Situazioni di collusione



2000 Jan 01

Na colusão



2000 Jan 01

Zmowa


 
================================================================================
Title: Deterring Adversarial Behavior at Scale in Gitcoin Grants | by BlockScience | BlockScience | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in BlockScience Follow BlockScience -- 1 Listen Share This post shares our most recent findings on social and technical behaviors in Gitcoin Grant Round 9, and proposes a framework for community-based policy making in semi-automated systems. These processes need the help of the Gitcoin community to continue testing, iterating, and improving ‘decentralized’ community-based funding methods like Quadratic Funding in Gitcoin Grants. Gitcoin Grants Round 9 witnessed an exciting uptick in donations from previous rounds, exceeding those rounds with 168,000 donations totaling $1.38MM, with $500k of quadratically matched funds as a cherry on top! In this round, we also saw an increase in suspicious behaviors and the beginnings of what is likely automated collusion and sybil attacks coordinated using bots. In this article, we will introduce a four step framework to identify and prevent these adversarial behaviors, as well as how that framework involves the help of the Gitcoin community. Broadly, this is a post about system design. As with any blockchain-enabled governance system, there are both social and technical dynamics at play. We are in the early days of policy making in complex human-machine systems, and as an early experiment in community funding mechanisms, we need to build and improve these systems iteratively in terms of both their code and their human-governance processes. This first section explains the kinds of attacks we saw in Round 9. We dig into a few specific examples of what could be perceived as adversarial behavior, and touch on why it is important to maintain the subjective input of human moderators in the definition, detection, evaluation and sanctioning of these behaviors in the Grants process for an effective ecosystem. More than any other Round, we’re seeing a huge increase in spammed microdonations to many grants. It has been pointed out by some in the Gitcoin community that this is likely an attempt to maximize exposure to potential future airdrops, which were handed out after Round 8 by several independent organizations looking to reward crypto-philanthropists and increase their token distribution. Since this type of incentive complicates our understanding of the “intent” of these donors from supporting projects they think are important, towards seeking to maximize economic rewards, we may choose to reduce this kind of behavior via the proposed framework for the long term health of the ecosystem. The system design question here becomes: how do we define, detect, and mitigate adversarial behavior in a Gitcoin Grant round to pursue the goal of funding Ethereum public goods? Given the new donation behaviors witnessed in Grants Round 9, the Gitcoin team has been working closely with the data scientists and systems architects at BlockScience and the Token Engineering community to identify replicable processes to separate legitimate grants and donations from spammers and bots. The 4-step framework introduced below is an iterative approach to increasing the sophistication of detection and mitigation of these kinds of unwanted behaviors. As mentioned, this is a policy-making approach; a set of ideas and steps used as a basis for making decisions about what is and isn’t acceptable behavior in a semi-automated system. The above framework is being expanded upon in other works by the BlockScience team, and builds on existing work on algorithmic policy more generally. Next, we apply this framework to what we are seeing unfold in Gitcoin Round 9. The Gitcoin team is assembling a council of community-stewards to gather diversified feedback in defining & sanctioning unacceptable behaviors in the Grants ecosystem. Feedback will also be solicited from the wider community via Twitter and Discord. Please reach out there if you are interested in participating in the discussion! This council process will be coupled and integrated to a semi-supervised machine-learning pipeline to leverage a “cyborg learning” approach towards detecting attackers. (What this means is that we use machine learning to scale the limited capacity of humans to label things).When compared to standard machine learning, this allows full use of both the intellectual and data resources available in the ecosystem. The result is algorithms that are more accurate, transparent, fair and agile to implement, while also being more adaptable to sudden changes and developments. The intention behind these discussions is to open up the configuration of this attack-mitigation framework to a wider stakeholder community than just the core Gitcoin team. This is part of the plan to progressively decrease centralized control measures in the Gitcoin ecosystem. Appropriate human intervention and strong community engagement is essential to the proper operation of socio-technical systems — not everything needs to be automated away, and what is, should be done so carefully. Public goods systems, such as Gitcoin, are inextricably socio-technical. Many lessons in AI ethics and algorithmic fairness can be gained from Aaron Roth’s The Ethical Algorithm and ongoing work on algorithms in society by some of our research contributors. The goal is transparent, accessible, and tangible policy involving humans in the loop where needed in automated policy systems. The community council is not a centralized force but rather a coalition of willing community members — the members are by exactly those who have stepped up to donate their time and attention in service of the community. This group administrates a broad albeit rough consensus on definitions and sanctions towards adversarial behavior. The group of Gitcoin community-stewards have been invited by the Gitcoin Team based upon the following criteria: This process is about engaging in an effective experiment in open-source community funding, under ongoing iteration and improvement, with help from a community of participants that make it meaningful. Next, we’ll walk through the framework step-by-step in further detail. It is worthwhile to note here that by no means do we wish to insinuate that this discovery, development, and improvement process invalidates the outcomes of Gitcoin grants in any way. The process being conducted is as follows: Definitions are inherently troublesome, as certain vocabulary means different things across different areas of expertise. There are also assumptions to overcome about the normative basis of what is ‘acceptable’, as the Gitcoin community decides on the subjective basis of these definitions. As pointed out in a previous article, collusion is tricky to define, since sometimes coordinated but honest behavior can look like an attack. Often, intent is the key difference between acceptable coordination and unacceptable collusion in grant funding. Given the difficulty of measuring the intent of each grant and donation in a graph of tens of thousands of such contributions, instead patterns of behavior that look like collusion must be defined, so that appropriate detection and flagging algorithms can be set to deal with them accordingly at scale. While we expect all participating communities in the grants ecosystem to coordinate to some degree on funding their grant, we need to ensure that the near-term needs of participants are in line with the long-term sustainability of the Grants ecosystem. How we define acceptable contribution behaviors needs to involve the Gitcoin community, because you are the biggest stakeholders in the Grants ecosystem, after all. What is and is not acceptable donation behavior to the Ethereum public goods funding community? What role should bots and automation play in the future of the Grants platform? These are questions that will be pondered by the council and wider Gitcoin community. After defining the types of behavior we want to mitigate in the Gitcoin Grants ecosystem, the next step to mitigating those attack vectors is detecting when they occur. In this step we can use many different tools, from community reporting to algorithms that monitor and flag suspicious grant or donor behaviors. Let’s look at an example of a suspicious donation pattern, where someone donates less than a dollar to 10 grants, all of which seem likely to give an airdrop. There are a few options we can consider in this scenario: The donor is a bot — This option presents multiple issues for discussion, since not only is a bot most likely a sybil account, we also need to understand the use of automated donations in the Grants ecosystem, and whether we choose to allow bots to participate at all. The donor is a sybil account — By creating a multitude of new accounts donating to the same grants, this causes the formula to overweight the matching funds received by the grant. This attack would be outside the rules of the Gitcoin ecosystem and in need of appropriate sanction. The donor is a real person just trying to get by in the world — Perhaps the donor was truly a real person, who wants to support organic web3 projects who are likely to give airdrops in the future. As a low income individual, perhaps this donor was only able to contribute small amounts to these grants, making them look like a bot attack. Is this not the kind of person whose voice we are trying to protect — even augment — with quadratic funding? At first pass, many of our detection tactics and algorithms may flag innocent grants and donors as malicious because of their occasionally similar patterns. But this is not a bad thing . Due to the difficulty of defining collusion in the first place, the ecosystem benefits from having aggressive flagging mechanisms to catch potential wrongdoers and rely on appropriate lenience from the judgement of human evaluators. In the next section, we show how this works in practice. After detection comes evaluating the flagged grants and donations. Due to the highly subjective nature of evaluating flagged grants, this stage is best handled by humans who can understand the context of a given situation. This group of moderators is tasked to determine whether flagged events go against the Terms & Conditions of the Grants ecosystem, or if they are merely organic communities coordinating in ways that resemble attack vectors (as explored in our previous post). We must exercise caution in this stage to adhere to the goal of the system. Since the intention of Quadratic Funding is to essentially amplify the voice of financially underrepresented contributors, we must be aware that these contributors could look like bots or attackers via similar data trails: for example, the use of small donations to isolated local projects, or the sharing of devices or accounts. In the evaluation phase, moderators have a few things to consider. First, they can look at the creators of flagged grants. What seems to be their intention? What other behaviors have they engaged in? Are they asking for a quid pro quo for donations? Does their data-trail suggest they are in a sybil-ring? Second, they can consider the intent of flagged contributors. Are there reasons that a series of small donations could be a legitimate contribution from a well meaning donor, despite the pattern resembling a bot? At this point in time and due to the sensitivity of the data in discussion, the Gitcoin team can steward the best interests of the Gitcoin ecosystem by evaluating flagged behaviors but their interest in progressive decentralization could provide the opportunity to iteratively include more community input via future mechanisms of the Gitcoin platform. Once the list of flagged transactions have been sorted appropriately, the next stage of the framework is the application of graduated sanctions to confirmed offenders. There are a number of ways we can sanction inappropriate actions in the Grants ecosystem. Once again, we need the feedback of the Gitcoin community in determining what are appropriate sanctions for different behaviors. As suggested by Ostrom’s principles for the management of common resources (like the Gitcoin matching pool), ‘graduated sanctions’ should increase in severity based on the seriousness of the infraction. For example, is the offender a bot or a repeat offender? Some examples of scaled sanctions could be: Sanctions are a necessary step for accountability and recourse, which should be transparently communicated with participants to set clear community boundaries and allow participants to choose their behaviors within the decision-space that is determined as appropriate. Again, this is a subjective and iterative practice. This is where precedents get set, and the definitions of what is appropriate become normalized and becomes internalized to the rules of the system and the norms and behaviors of the community. The Gitcoin team is coordinating a group of community stewards who will provide key input to the sanction process, to ensure community needs are met with new policy decisions being made moving forward. Ultimately, this input is key to maintaining a well operating, credibly neutral web3 grants platform for funding public goods. Computer systems make viable making more sustainable, diverse and efficient human organizations. Even though algorithms are code-based, in the end they consist of human-machine ensembles. This means that policy-making processes which set out how decisions are made, not just in terms of code but also appropriate human involvement, are crucial to the sustainable functioning of the system. This process is in-flight. Below are a few ways you can be involved: Gitcoin will soon be publishing a Round 9 governance brief for community review. All are invited to comment on twitter and in the gov.gitcoin.co forum. Stay in touch with the latest on this exciting research: Gitcoin: twitter.com/gitcoinBlockScience: twitter.com/block_science Article by Jeff Emmett, Kelsie Nabben, Danilo Lessa Bernardineli, and Michael Zargham, with thanks to Kevin Owocki, Disruption Joe, and Matthew Carano for key insights and feedback. -- -- 1 BlockScience BlockScience® is a complex systems engineering firm that combines research and engineering to design safe and resilient socio-technical systems. Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title:  Fun 
Date: Date not available
Content:





















Dark Mode Toggle








 Fun 

 Fun 

Blockchains
Cryptography
Economics
Fun
General
Gitcoin
Math
Philosophy
Translations




2024 Apr 01

Degen communism: the only correct political ideology



2023 Apr 14

Travel time ~= 750 * distance ^ 0.6



2022 Jun 20

My 40-liter backpack travel guide



2022 Apr 01

In Defense of Bitcoin Maximalism



2019 Dec 24

Christmas Special



2019 Oct 01

In-person meatspace protocol to prove unconditional possession of a private key



2019 Apr 01

[Mirror] Cantor was Wrong: debunking the infinite set hierarchy


 
================================================================================
Title: Minimal anti-collusion infrastructure - Applications - Ethereum Research
Date: 
                    May 4, 2019, 12:49pm
                  
Content:
For background see https://vitalik.ca/general/2019/04/03/collusion.html Suppose that we have an application where we need collusion resistance, but we also need the blockchain’s guarantees (mainly correct execution and censorship resistance). Voting is a prime candidate for this use case: collusion resistance is essential for the reasons discussed in the linked article, guarantees of correct execution is needed to guard against attacks on the vote tallying mechanism, and preventing censorship of votes is needed to prevent attacks involving blocking votes from voters. We can make a system that provides the collusion resistance guarantee with a centralized trust model (if Bob is honest we have collusion resistance, if Bob is dishonest we don’t), and also provides the blockchain’s guarantees unconditionally (ie. Bob can’t cause the other guarantees to break by being dishonest). We assume that we have a registry R that contains a list of public keys K_1 ... K_n. It’s assumed that R is a smart contract that has some procedure for admitting keys into this registry, with the social norm that participants in the mechanism should only act to support admitting keys if they verify two things: Each user is also expected to put down a deposit; if anyone publishes a signature of their own address with the private key, they can steal the deposit and cause the account to be removed from the list (this feature is there to heavily discourage giving any third party access to the key). We assume that there is an operator with a private key k_{\omega} and a corresponding public key K_{\omega}. We assume that there is a mechanism M, which we define as a function action^n \rightarrow Outputs, where the input is the action taken by each of the n participants and the output is some output as defined by the mechanism. For example, a simple voting mechanism would be the function that returns the action that appears the most times in the input. At time T_{start}, the operator begins with an internal state S_{start} = \{i: (key=K_i, action=\emptyset)\} for i \in 1...n. Anyone can compute this internal state; the registry contract itself could do this. Between times T_{start} and T_{end}, anyone has the right to publish messages into an on-chain registry (eg. set the to address to be a smart contract that saves them into a linked hash list) that are encrypted with the key k. There are two types of messages: We assume an encryption function where the user can provide a salt to make an arbitrarily large number of possible encryptions for any given value. The operator’s job is to process each message in the order the messages appear on chain as follows: After time T_{end}, the operator must publish the output M(state[1].action .... state[n].action), and a ZK-SNARK proving that the given output is the correct result of doing the above processing on the messages that were published. Suppose a user wants to prove that they took some action A. They can always simply point to the transaction enc(msg=(i, sign(msg=A, key=k_i)), pubkey=K_{\omega}) on chain, and provide a zero-knowledge-proof that the transaction is the encrypted version of the data containing A. However, they have no way of proving that they did not send an earlier transaction that switched the key to some NewK_i, thereby turning this action into a no-op. The new key then could have been used to take some other action. The user could give someone else access to the key, and thereby give them the ability to race the user to get a new-key message in first. However, this (i) only has a 50% success rate, and (ii) would allow the other user the ability to take away their deposit. The former could be mitigated by deliberately complicated signature schemes that are not trusted hardware / multisig friendly, though the verification of such a scheme would need to be succinct enough to be ZKP-friendly. The latter could be solved with an “in-person zero knowledge proof protocol”, eg. the user derives x and y where x+y=k_i, publishes X = x * G and Y = y * G, and shows the verifier two envelopes containing x and y; the verifier opens one, checks that the published Y is correct, and checks that X + Y = K_i. So just after T_{start}  the first user (user_0) is able to publish their vote and get bribed because it is impossible that she created an older transaction to changed her key.  However I understnad the arugment as that this user can still after the fact update their vote again and there is no way for them to prove they did not do this. However if user_0 can add the first two actions to the list then can So now user_0 can sell their vote. As the current state for the briber is If user_1 wants to sell her vote she can also do it by voting and burning her key. The current state for the briber becomes after user_0 shares her key with briber. Even are honest voters interacting with the system the bribery can continue Imagine that user_2 takes an action and does not publish it. Our current briber state becomes So if all the users from user_3 to user_4 wants to see their vote they cannot right because we are not sure that that user did not invalidate their key at step 5. But what we can do is have them all vote and invalidate in series and then publish the data afterwards. The briber current state is Now we don’t know if user_4 or user_5 invalided their key. So the argument says we cannot bribe them. But we can bribe both of them half the amount we bribed user_0 and be sure that we paid and bought one vote. Because we know for one of them did vote the way that we wanted them to. This think this can be a serious attack. Especially that a briber can reward users for participating early in the epoch. Let me know thoughts. I can further analyze this if there is contention about its impact. That’s assuming an ability to add the first two actions to the list. One could easily make it default software for every user to switch their key to some other key and publish that message immediately after T_{start}, making it very hard for any specific user to get that position of being first. The operator themselves could even have the first right to publish messages, allowing them to receive key switch messages from the participants through some other channel and include them before the “official” period starts. Thinking a bit about doing the computation in MPC. It seems fundamentally not too hard. Note particularly that there’s nothing wrong with it being public whether a message is a key change or an action. You want something like: For all j: k[j] = newKey * verifySig(newKey, k[j]) + k[j] * (1 - verifySig(newKey, k[j])) For all j: a[j] = action * verifySig(newKey, k[j]) + a[j] * (1 - verifySig(newKey, k[j])) Making a ZK-SNARK over the individual MPC transcripts should be harder, but seems fundamentally doable. If I understand the problem correctly: you are proposing a scheme where users, identified cryptographically, can vote on something, but are disincentivized from selling their votes to each other (“collusion resistance”). If I understand the solution correctly: users are to be indexed, in exchange for a deposit, in a centralized registry operated by a trusted third party, and may update their identity there by providing proof of it.  Both updates and votes are sent signed and encrypted to the operator, so no one can enumerate the full history of a user’s actions, even though the user can prove any individual update or vote by producing the corresponding signed message that encrypts to one that has been put on-chain.  Therefore, no one can really trust another user they are trying to buy a vote from, who may be hiding the fact that what they are selling is no longer in the registry. I may be missing some design criterion here, but why not just require a user to cast a vote, secretly, at the time they make the deposit?  If the trusted operator can be so omniscient as to enforce setup rule 1, they can be equally certain that the vote is genuinely by the person casting it, and the secret ballot works just as it does in real life to prevent selling one’s vote. Actually, rule 1 is the big problem that consensus mechanisms need to solve (who gets to participate), and I think it deserves a little more respect as a big problem here, because without it, there’s nothing stopping a sockpuppet army or plutocracy from taking over. Rule 2, in my experience, has no teeth: unless you want people to turn up in their physical person to vote, they are anonymized enough that the most secure way to identify them is actually with the key they are submitting.  You may as well just say that a user is their key.  I suppose you could argue that the user could be globally identified by one master key, but submit a secondary key signed by the first one to this particular contest, but that just kicks the problem up to verifying the master key (the analogue of showing up in person) as well as introducing another layer of trusted centralization. Okay, but let’s say the voters really need to be able to change their minds, and that the system for selecting them is satisfactory, and that we even manage to do this decentrally.  Then I think that the argument for collusion-resistance is similar to the common internet security pattern, “After creating an account, you must immediately change your password through the encrypted connection.”  At that point, an attacker has no idea “who” you really are, even if they knew your account creation data. However, the two have the same vulnerability to shoulder-surfing (as it were).  In fact, a conspiracy dedicated to buying the election could make monetary offers in advance and in exchange for installing a monitor on the various sellers’ computers in order to see what their actual messages really were.  This might even satisfy the sellers as to personal security if the monitor is unable to access their authentication data or private keys (say, by literally being a camera pointed over their shoulder at the voting app). So although I agree that this scheme severely demoralizes attempts to fix the election by soliciting bribes, it seems to have a real-world vulnerability to a prepared adversary due to its dependence on the secrecy of the message history. I may be missing some design criterion here, but why not just require a user to cast a vote, secretly, at the time they make the deposit? The goal of the scheme is to make it so that the setup needs to only be done once, and from that point it on the key be used for many different mechanisms. So the marginal cost of running a mechanism drops greatly. The intention is to help bring about a world where mechanisms (like quadratic voting etc) could be used for all sorts of use cases, and this requires the marginal cost of spinning up such a vote, and making it work reasonably securely, to be low. I don’t think a scheme of this type needs to be secure against all sorts of fancy attacks involving shoulder surfing and cameras to be very useful; you get the bulk of the benefit by being secure against attacks that could be done purely online (like smart contract bribes). And actually installing a monitor on people’s computers seems like something that would require a high cost for people to be willing to put up with, and cheatable in many ways (how do you know I’m not going to vote with a different computer?) I see, so the [T_\text{start}, T_\text{end}] period is repeatable: the registry is maintained, only the tally is performed at the end of each period.  This is much less of a surveillance risk, because the window for accumulating a complete history ends once the setup is complete. It still bugs me that this is centralized.  Obviously you can’t make it decentralized in exactly the form given, because the private key k_\omega would need to be public.  Instead, let’s say that each voter has two private keys, k_i and k_i', and submits \text{enc}(K_i, k_i') when a new election begins.  All messages are sent in the clear: but of course, the signature can’t be verified because no one knows the actual public key…yet.  At the end of the election, voters sacrifice their k_i' and reveal it publicly, and the entire stream of messages is verified all at once before the tally is taken.  For the next round of elections, the voter can make their old k_i into their new k_i' and pick another k_i, so that the key that is private in one election is revealed in the next one. Until the reveal, it is impossible to know whether a given message has any effect, just as in the centralized scheme.  So this is still collusion-resistant.  One failing is that eventually, any potential briber knows that they were cheated, which is not possible in the centralized scheme, and invites possible retaliation even if the election is not affected. Although anyone looking back through the history can (of course) figure out what all the messages mean, no one living the history can do this until the reveal.  So the transactions are not truly private, but they stay secret long enough to have the intended effect. Yeah, I’ve thought about schemes that involve not revealing info until later, and they all run into the issue that if the briber is a little more patient they’re no good. I agree the centralization is unfortunate! The nice thing though is that the centralization is only for the collusion-resistance guarantee, the centralized party can’t break anything else. Note that some meatspace verification being done by someone somewhere is indispensable because any scheme that requires anti-collusion infrastructure also requires unique-identity verification (or else someone can just gather up many identities and collude with themselves). If we want to mitigate the centralization, the best that I can come up with is turning it from 1-of-1 into M-of-N via multi-party computation. We can potentially make the security even higher than 1/2 if we have a scheme that favors safety over liveness, and in the case where liveness fails detect it on-chain and automatically remove the non-live parties from the committee and restart. How does the withdraw of hte deposit works? If I start with key x and update it to key y do I withdraw with key y ? Is the withdraw public in the smart contract ? Is the withdraw protected with the same coersion resistance mechanisim ? My specific concern is something like this. I deposit eth and participate in a vote. Afterwards I withdraw my ETH deposit. If this is public I can use my withdrawal transaction from public key x as evidence to a briber that I did not update my key at any time during the Vote. Its still possible here that I voted twice with the same public key. But I can run the probabilistic bribe attack above but this time at the end of the epoch. So I would reveal my vote that is close to the end of hte epoch and get bribed. Let formalize the bribe amount. The operator creates a batch of transactions that overlap the end of the epoch and bribes each reveeler
cost_per_vote * (no_transparent_actions_in_batch / no_hidden_actions_in_batch) The cost_per_vote is how valuable their votes are to them. In the quadratic voting analysis even if no_transparent_actions_in_batch < no_hidden_actions_in_batch this attack can still be more efficient. Key selling would be a case of transitive trust. If trust is reliant upon repeated interactions from a single individual, could that not also then be packaged and sold? How does that interact with incentive compatibility wrt mechanisms? I have been a bit wary on sMPC, but not through code tests which I should perhaps engage in. How could we decouple trust from engaging with a key signing process? This of course assumes that individuals have varying collusive tendencies. It should be clear that the risk is through a break down of trust. Keys however might be distributed widely to ensure non-collusion without discretion, but that is a shaky argument. Believe I have mentioned before, but ring signatures and threshold signatures are essentially dual, former requiring minimal endorsement, latter requiring maximal endorsement, ie collaboration in decryption as opposed to signing. It comes down to the manner in which the keys are served to people then and for what ideally limited purpose. ZK-SNARKs have opened us back to solutions from verifiable computation, but that does not address the trust issue in repeated execution of the protocol via any given party. We’d have to think in a multilinear way with trust levels so to speak, or it all falls back to 1-2 oblivious transfer. This appears to be the gold standard of any MPC as it is transitive on the single operation of a protocol. Have to reread the collusion post, but those are my 200 wei for now. Coming back to the centralized version, I wonder if the following simpler scheme wouldn’t work better. The idea is that, if you want to prevent bribery, you want a secret ballot; that’s what they were introduced for, in fact.  I assume there is a good reason for us to assume messages are public (if only because they will be transmitted over the internet and not a secure private network), so why not just do as we do already with online secrecy and open an encrypted channel? So, when a voter registers with the operator, rather than giving it her public key, they do a key exchange (as in, a handshake encrypted by public key crypto that results in each of them agreeing on a symmetric key).  Now the operator is storing a separate totally secret key for each voter, and each voter can cast a ballot consisting of their voter number (in the clear) and the encrypted vote. It is impossible to determine anything more than that a vote was cast, and even if a briber wants the voter to reveal a ballot as proof, the the voter would have to reveal both the ballot and their individual secret key in order for the briber to match it with an observed message.  (This is different from the public/private key situation you worked with, because there, the briber does know how to encrypt a message to match it with an observed one.) Note that even though each voter gets their own secret key, the operator isn’t storing any more information than in your scheme, which keeps track of an individual public key for each voter.  The voters, in turn, are not responsible for any harder a task than when they had to hold a private key.  Finally, the messages are secure against tampering since the key encrypting the vote has to be the one stored by the operator for the numbered voter, and if that key stays secret, only the voter can accomplish this. Unless there is a need for the votes to be public (and I don’t see why that is at all desirable as a default), or there is some aspect of the operator’s workings that precludes a key exchange, wouldn’t this work? There is a need for encrypted votes to be public, which is that we don’t want to trust the operator for correctness, so we need the operator to be able to zero-knowledge prove that they counted all of the votes correctly and particularly did not “censor” any votes. The only thing a malicious operator should be able to break is the collusion resistance guarantee, not any safety or liveness guarantees. In both schemes, the votes are “public” in the sense that they appear, encrypted, on-chain.  I meant that the secret-key scheme does not make it possible ever to prove (to the public, not the operator) how someone voted, unless they give up their secret key.  Whereas of course, the public-key scheme does allow a claimed vote to be checked against the record by encrypting it. Is there something about the public-key setup that makes a ZK proof possible where it is not possible for the secret-key setup?  That is, given the stream of encrypted messages that are handled as you describe by the operator, there is a zero-knowledge proof that some correctly-signed votes and key-changes exist that make the alleged output and encrypt to the given messages; but given the stream of encrypted messages that I described, there is not a proof that some votes and some set of secret keys exist with that property?  They both sound like the same kind of problem (and also that the proofs would be exceedingly long and hard to compute; however, in both cases, the circuit only needs to be constructed once when the contract is written). (As an aside, in order for the ZK proof for the secret-key scheme to show that the votes were cast by the users and not made up by the operator, I would have to say that each user does have a public key, which is initially placed into the contract, and with which they also sign the votes that they encrypt onto the chain.  Then the problem would contain an additional predicate that the same key was used for both.  Only the operator sees the signature, but that is enough for the ZK proof to reflect the fact that it is valid, like in the public-key setup.) There’s also the possibility of a player agreeing with the operator on a key k1, but then using a different key k2 to encrypt the message, or that of a malicious operator claiming that another player did such a thing. Unless the exchanged key is somehow committed to on chain in a way that the player can verify, this seems unavoidable, and if the exchanged key is committed to on chain in a way that the player can verify then they could prove how they voted. So I think the ability to specifically cancel a key is important. I see the problem here: the public has no means to verify an operator’s claim that some vote is invalid due to encryption with the wrong key, or that some invalid vote is valid because it’s encrypted with a key that the operator knows but isn’t the one that particular voter should use.  Fair enough: this violates the requirement that an operator failure shouldn’t affect the outcome of the vote. Let’s modify my previous aside, which suggested that each user’s public key be kept on-chain for identity verification, to also keep the operator’s public-key encryption of the secret key of each user (the user as well as the ZKP can verify this because both would also have the operator’s public key and the user’s own secret key; no one else can learn anything from it).  The operator (and, correspondingly, the ZKP), is required to use that secret key to decrypt votes.  This ensures that a malicious operator can’t pretend that a vote is invalid, or that a vote encrypted with someone else’s secret key is valid, since the means to validate is visible, if not usable, to the public. In general, it seems to me that by encrypting with the operator’s public key, any internal state maintained by the operator can be manifested in public, indecipherably, but still visibly enough to figure in a zero-knowledge proof that it was used correctly by the operator. But then wouldn’t a user be able to prove what their secret key is, if they’re the ones to encrypt it to the operator? I suppose you could get around that if the operator encrypts, but then that seems like it would put a lot of load on the operator to make many more proofs. I don’t think this reveals anything that the people who can find out don’t already know.  Maybe I should make explicit the structure that’s been coming together in pieces here. The contract contains the following data object, annotated in some made-up, suggestive type system: Each voter also has a data object: The operator has a very simple data object: The voter and operator data are, of course, known only to the respective parties, while the contract data is public.  For each voter, there is an entry in registry (with pseudocode crypto API): This can be constructed entirely by the voter, since it uses only data visible to them (their own and the contract’s). Conversely, the operator can read each vote, including validating the voter: Therefore, the operator can construct a proof that M(votes) == outcome, for whatever outcome.  The proof is of the existence only of operator.myPrivKey, and because of the expression above, includes proofs of the validity of each vote.  It shows that the various nonsense blobs in the contract are actually encryptions of correct data. As you can see, only each voter knows their own symmetric key; it is stored as a message encrypted to the operator alone, and its correctness is established by the proof that the equation holds with the definition of votes given. Of course, only after posting that long thing did I understand what you were asking.  I’ll leave it there since it seems useful, but I’ll answer your actual question here. It does seem true that a voter could choose to reveal their own secret (symmetric) key in a way that someone else could verify, since it’s encrypted with the operator’s public key.  And I do agree that this could be fixed if the operator actually kept their “public” key private, and placed that encrypted value themselves. Would this actually require more zero-knowledge proofs?  I think the voter could actually be sure their correct vote was used, if the expression for votes I gave in the long post is the one that goes into the overall proof: it requires checking the signature on their vote.  The operator should be unable to produce any valid voter-signed message, particularly not in the way that this exploit we’re talking about would require: the operator would have to place the wrong symmetric key in the registry, which would result in the vote being censored just because it doesn’t decrypt correctly (but then break the proof because the signature is also not validated); to actually place a fake vote, the operator would have to somehow come up with a fake symmetric key that causes this bad decryption to be a correctly-signed vote.  This is just not feasible. The voter could of course give up their private key to a dishonest operator.  However, the operator would still have to figure out an alternate symmetric key that would decrypt the actual encrypted vote to a signed, fake vote of their choice.  I don’t think this is feasible either, though that depends on the encryption method and seems similar to actually cracking the encryption entirely. My proposal was that the operator put the voter’s symmetric key on-chain encrypted with the operator’s own public key. The voter would have no way of verifying that this was actually done, unless the encryption scheme is deterministic, and in the latter case the voter could prove to others what their key is. I feel like any scheme that doesn’t involve a key revocation game is going to keep having these kinds of issues… After some thought, I have to agree that without the game it seems almost necessarily the case that a voter would be able to prove their vote.  Essentially, the voter can prove their vote to a briber (thus soliciting a bribe) if they can supply a probabilistic algorithm computing their set of messages.  In your scheme, they can enumerate it but not its complement.  My scheme definitely has a deterministic proof of vote; actually, it shows up a lot earlier in the conversation, since the voter can always just reveal their “secret” key.  Any voting scheme where the ultimate vote depends on a single message would have this problem; it has to be possible, no matter what the voter reveals, that they have omitted something important.  Which is a game. This has been very educational.  I hope I wasn’t too obnoxious in the process. Powered by Discourse, best viewed with JavaScript enabled
================================================================================
Title:  A Quick Gasprice Market Analysis 
Date: Date not available
Content:
Here is a file that contains data, extracted from geth, about transaction fees in every block between 4710000 and 4730000. For each block, it contains an object of the form: The "deciles" variable contains 11 values, where the lowest is the lowest gasprice in each block, the next is the gasprice that only 10% of other transaction gasprices are lower than, and so forth; the last is the highest gasprice in each block. This gives us a convenient summary of the distribution of transaction fees that each block contains. We can use this data to perform some interesting analyses. First, a chart of the deciles, taking 50-block moving averages to smooth it out:  What we see is a gasprice market that seems to actually stay reasonably stable over the course of more than three days. There are a few occasional spikes, most notably the one around block 4720000, but otherwise the deciles all stay within the same band all the way through. The only exception is the highest gasprice transaction (that red squiggle at the top left), which fluctuates wildly because it can be pushed upward by a single very-high-gasprice transaction. We can try to interpret the data in another way: by calculating, for each gasprice level, the average number of blocks that you need to wait until you see a block where the lowest gasprice included is lower than that gasprice. Assuming that miners are rational and all have the same view (implying that if the lowest gasprice in a block is X, then that means there are no more transactions with gasprices above X waiting to be included), this might be a good proxy for the average amount of time that a transaction sender needs to wait to get included if they use that gasprice. The stats are:  There is clear clustering going on at the 4, 10 and 20 levels; it seems to be an underexploited strategy to send transactions with fees slightly above these levels, getting in before the crowd of transactions right at the level but only paying a little more. However, there is quite a bit of evidence that miners do not have the same view; that is, some miners see a very different set of transactions from other miners. First of all, we can filter blocks by miner address, and check what the deciles of each miner are. Here is the output of this data, splitting by 2000-block ranges so we can spot behavior that is consistent across the entire period, and filtering out miners that mine less than 10 blocks in any period, as well as filtering out blocks with more 21000 free gas (high levels of free gas may signify an abnormally high minimum gas price policy, like for example 0x6a7a43be33ba930fe58f34e07d0ad6ba7adb9b1f at ~40 gwei and 0xb75d1e62b10e4ba91315c4aa3facc536f8a922f5 at ~10 gwei). We get: The first miner is consistently higher than the others; the last is also higher than average, and the second is consistently among the lowest. Another thing we can look at is timestamp differences - the difference between a block's timestamp and its parent. There is a clear correlation between timestamp difference and lowest gasprice:  This makes a lot of sense, as a block that comes right after another block should be cleaning up only the transactions that are too low in gasprice for the parent block to have included, and a block that comes a long time after its predecessor would have many more not-yet-included transactions to choose from. The differences are large, suggesting that a single block is enough to bite off a very substantial chunk of the unconfirmed transaction pool, adding to the evidence that most transactions are included quite quickly. However, if we look at the data in more detail, we see very many instances of blocks with low timestamp differences that contain many transactions with higher gasprices than their parents. Sometimes we do see blocks that actually look like they clean up what their parents could not, like this: But sometimes we see this: And sometimes we see miners suddenly including many 1-gwei transactions: This strongly suggests that a miner including transactions with gasprice X should NOT be taken as evidence that there are not still many transactions with gasprice higher than X left to process. This is likely because of imperfections in network propagation. In general, however, what we see seems to be a rather well-functioning fee market, though there is still room to improve in fee estimation and, most importantly of all, continuing to work hard to improve base-chain scalability so that more transactions can get included in the first place.
================================================================================
Title: Credible Neutrality As A Guiding Principle
Date: 
              Jan 3, 2020
          
Content:
Consider the following: One possible reaction to some of these situations is to shout “gotcha!” and bask in the glory of having seemingly unmasked a hypocrite. And indeed, sometimes this reaction is correct. In my view, it is genuinely a mistake to treat carbon taxes as statist interventionism while treating government enforcement of property rights as just enforcement of natural law. It is genuinely also a mistake to treat miners working to secure a blockchain as laborers doing Real Thermodynamic Work worthy of compensation, but treat any attempt to compensate developers improving the blockchain’s code as being an act of “printing free money”. But even if attempts to systematize one’s intuitions often go astray, deep moral intuitions like this are rarely entirely devoid of value. And in this case, I would argue that there is a very important principle that is at play, and one that is likely to become key to the discourse of how to build efficient, pro-freedom, fair and inclusive institutions that influence and govern different spheres of our lives. And that principle is this: when building mechanisms that decide high-stakes outcomes, it’s very important for those mechanisms to be credibly neutral. First, what is a mechanism? Here I use the term in a way similar to that used in the game theory literature when talking about mechanism design: essentially, a mechanism is an algorithm plus incentives. A mechanism is a tool that takes in inputs from multiple people, and uses these inputs as a way to determine things about its participants’ values, so as to make some kind of decision that people care about. In a well-functioning mechanism, the decision made by the mechanism is both efficient - in the sense that the decision is the best possible outcome given the participants’ preferences, and incentive-compatible, meaning that people have the incentive to participate “honestly”. It’s easy to come up with examples of mechanisms. A few examples: We are entering a hyper-networked, hyper-intermediated and rapidly evolving information age, in which centralized institutions are losing public trust and people are searching for alternatives. As such, different forms of mechanisms – as a way of intelligently aggregating the wisdom of the crowds (and sifting it apart from the also ever-present non-wisdom of the crowds) – are likely to only grow more and more relevant to how we interact. Now, let us talk about this all-important idea, “credible neutrality”. Essentially, a mechanism is credibly neutral if just by looking at the mechanism’s design, it is easy to see that the mechanism does not discriminate for or against any specific people. The mechanism treats everyone fairly, to the extent that it’s possible to treat people fairly in a world where everyone’s capabilities and needs are so different. “Anyone who mines a block gets 2 ETH” is credibly neutral, “Bob gets 1000 coins because we know he’s written a lot of code and we should reward him” is not. “Any post that five people flag as being bad does not get shown” is credibly neutral, “any post that our moderation team decides is prejudiced against blue-eyed people does not get shown” is not. “The government grants a 20-year limited monopoly to any invention” is credibly neutral (though there are serious challenges around the edges in determining what inventions qualify), “the government decides that curing cancer is important, and so appoints a committee to distribute $1 billion among people trying to cure cancer” is not. Of course, neutrality is never total. Block rewards discriminate in favor of those that have special connections that give them access to hardware and cheap electricity. Capitalism discriminates in favor of concentrated interests and the wealthy, and against the poor and those who rely heavily on public goods. Political discourse discriminates against anything caught on the wrong side of social desirability bias. And any mechanism that corrects for coordination failures has to make some assumptions about what those failures are, and discriminates against those whose coordination failures it underestimates. But this does not detract from the fact that some mechanisms are much more neutral than others. This is why private property is as effective as it is: not because it is a god-given right, but because it’s a credibly neutral mechanism that solves a lot of problems in society - far from all problems, but still a lot. This is why filtering by popularity is okay, but filtering by political ideology is problematic: it’s easier to agree that a neutral mechanism treats everyone reasonably fairly than it is to convince a diverse group of people that some particular blacklist of unallowed political viewpoints is correct. And this is why on-chain developer rewards are viewed more suspiciously than on-chain mining rewards: it’s easier to verify who’s a miner than it is to verify who’s a developer, and most attempts to identify who is a developer in practice easily fall prey to accusations of favoritism. Note that it is not just neutrality that is required here, it is credible neutrality. That is, it is not just enough for a mechanism to not be designed to favor specific people or outcomes over others; it’s also crucially important for a mechanism to be able to convince a large and diverse group of people that the mechanism at least makes that basic effort to be fair. Mechanisms such as blockchains, political systems and social media are designed to facilitate cooperation across large, and diverse, groups of people. In order for a mechanism to actually be able to serve as this kind of common substrate, everyone participating must be able to see that the mechanism is fair, and everyone participating must be able to see that everyone else is able to see that the mechanism is fair, because everyone participating wants to be sure that everyone else will not abandon the mechanism the next day. That is, what we need is something like a game-theoretic concept of common knowledge - or, in less mathematical terms, a widely shared notion of legitimacy. To achieve this kind of common knowledge of neutrality, the neutrality of the mechanism must be very easy to see - so easy to see, that even a relatively uneducated observer can see it, even in the face of a hostile propaganda effort to make the mechanism seem biased and untrustworthy. There are four primary rules to building a credibly neutral mechanism: (1) is simple to understand. To go back to our previous examples, “Anyone who mines a block gets 2 ETH” is credibly neutral, “Bob gets 1000 coins” is not. “Downvotes mean a post gets shown less” is credibly neutral, “prejudice against blue-eyed people means a post gets shown less” is not. “Bob” is a specific person, and “prejudice against blue-eyed people” is a specific outcome. Now of course, Bob may genuinely be a great developer who was really valuable to some blockchain project’s success, and deserves a reward, and anti-blue-eyed prejudice is certainly an idea I, and hopefully you, don’t want to see becoming prominent. But in credibly neutral mechanism design, the goal is that these desired outcomes are not written into the mechanism; instead, they are emergently discovered from the participants’ actions. In a free market, the fact that Charlie’s widgets are not useful but David’s widgets are useful is emergently discovered through the price mechanism: eventually, people stop buying Charlie’s widgets, so he goes bankrupt, while David earns a profit and can expand and make even more widgets. Most bits of information in the output should come from the participants’ inputs, not from hard-coded rules inside of the mechanism itself. (2) is also simple to understand: the rules of the mechanism should be public, and it should be possible to publicly verify that the rules are being executed correctly. Note that in many cases, you don’t want the inputs or outputs to be public; this article goes into the reasons why a very strong level of privacy, where you cannot even prove how you participated if you want to, is often a good idea. Fortunately, verifiability and privacy can be achieved at the same time with a combination of zero knowledge proofs and blockchains; see here for more details. (3), the idea of simplicity, is ironically the least simple. This post on “central planning as overfitting” goes into many of the arguments much more deeply, but it’s worth summarizing. The more simple a mechanism is, and the fewer parameters a mechanism has, the less space there is to insert hidden privilege for or against a targeted group. If a mechanism has fifty parameters that interact in complicated ways, then it’s likely that for any desired outcome you can find parameters that will achieve that outcome. But if a mechanism has only one or two parameters, this is much more difficult. You can create privilege for very broad groups (“demagogues”, “the rich”, etc) but you cannot target a narrow group of people, and your ability to target specific outcomes goes down further with time, as there is more and more of a “veil of ignorance” between you at time A that is creating the mechanism and your beneficiaries at time B and the specific situation they will be in that might let them disproportionately benefit from the mechanism. And this brings us to rule (4), not changing the mechanism too often. Changing the mechanism is a type of complexity, and it also “resets the clock” on the veil of ignorance, giving you the opportunity to adjust the mechanism to favor your particular friends and attack your particular enemies with the most up-to-date information about what unique positions these groups are in and how different adjustments to the mechanism would affect them. A common fallacy of the more extreme versions of the ideologies that I alluded to at the beginning of this post is a kind of neutrality maximalism: if it can’t be done completely neutrally, it should not be done at all! The fallacy here is that this viewpoint achieves narrow-sense neutrality at the cost of broad-sense neutrality. For example, you can guarantee that every miner will be on the same footing as every other miner (12.5 BTC or 2 ETH per block), and that every developer will be on the same footing as every other developer (with no remuneration beyond thanks for their public service), but what you sacrifice is that development becomes highly under-incentivized relative to mining. It is unlikely that the last 20% of miners contribute more to a blockchain’s success than its developers, and yet that’s what the current reward structures seem to imply. Speaking more broadly, there are many kinds of things in society that need to be produced: private goods, public goods, accurate information, good governance decisions, goods we don’t value now but will value in the future, and so forth; the list goes on. Some of these things are easier to create credibly neutral mechanisms for than others. And if we adopt an uncompromising narrow-sense neutrality purism that says that only extremely credibly-neutral mechanisms are acceptable, then only those problems for which such mechanisms are easy to create will be solved. The community's other needs will see no systematic support at all, and so broad-sense neutrality suffers. Hence, the principle of credible neutrality, must also be augmented with another idea, the principle of efficacy. A good mechanism is also a mechanism that actually does solve the problems that we care about. Often, this means that developers of even the most obviously credibly-neutral mechanisms should be open to critique, as it’s very possible for a mechanism to be both credibly neutral and terrible (as patents are often argued to be). Sometimes, this even means that if a credibly neutral mechanism to solve some problem has not yet been found, an imperfectly neutral mechanism should be adopted in the short term. Premines and time-limited developer rewards in blockchains are one example of this; using centralized methods for detecting accounts that represent a unique human and filtering out others when decentralized methods are not yet available is another. But recognizing credible neutrality as something that is very valuable, and striving to get closer to that ideal over time, is nevertheless important. If one is truly concerned about an imperfectly neutral mechanism leading to loss of trust or political capture, then there are ways to adopt a “fail-safe” approach to implementing it. For example, one can direct transaction fees and not issuance toward developer funding, creating a “Schelling fence” limiting how much funding can be made. One can add time limits, or an “ice age”, where the rewards fade away over time and must be renewed explicitly. One can implement the mechanism inside of a “layer 2” system, such as a rollup or an eth2 execution environment, that has some network effect lock-in, but can be abandoned with coordinated effort if the mechanism goes astray. When we foresee a possible breakdown in voice, we can mitigate the risks by improving freedom of exit. Credibly neutral mechanisms for solving many kinds of problems do exist in theory, and need to be developed and improved in practice. Examples include: We do not yet know well what versions of ideas like these, and completely new ones, will work well, and we will need many rounds of experimentation to figure out what kinds of rules lead to good outcomes in different contexts. The need to have the mechanism’s rules be open, but at the same time resistant to attack, will be a particular challenge, though cryptographic developments that allow open rules and verifiable execution and outputs together with private inputs will make some things considerably easier.  We know in principle that it is completely possible to make such robust sets of rules - as mentioned above, we’ve basically done it in many cases already. But as the number of software-intermediated marketplaces of different forms that we rely on keeps increasing, it becomes ever more important to make sure that these systems do not end up giving power to a select few - whether the operators of those platforms or even more powerful forces that end up capturing them - and instead create credible systems of rules that we can all get behind.
================================================================================
Title: Scalability, Part 2: Hypercubes | Ethereum Foundation Blog
Date: Date not available
Content:
EF Blog Categories R&D Research & Development Events Events Org Organizational ESP Ecosystem Support Program ETH.org Ethereum.org Sec Security NxBn Next Billion Protocol Protocol Announcements Languages Research & Development Special thanks to Vlad Zamfir, Chris Barnett and Dominic Williams for ideas and inspiration In a recent blog post I outlined some partial solutions to scalability, all of which fit into the umbrella of Ethereum 1.0 as it stands. Specialized micropayment protocols such as channels and probabilistic payment systems could be used to make small payments, using the blockchain either only for eventual settlement, or only probabilistically. For some computation-heavy applications, computation can be done by one party by default, but in a way that can be "pulled down" to be audited by the entire chain if someone suspects malfeasance. However, these approaches are all necessarily application-specific, and far from ideal. In this post, I describe a more comprehensive approach, which, while coming at the cost of some "fragility" concerns, does provide a solution which is much closer to being universal. First of all, before we get into the details, we need to get a much deeper understanding of what we actually want. What do we mean by scalability, particularly in an Ethereum context? In the context of a Bitcoin-like currency, the answer is relatively simple; we want to be able to: The first goal alone is easy; we just remove the block size limit and let the blockchain naturally grow until it becomes that large, and the economy takes care of itself to force smaller full nodes to continue to drop out until the only three full nodes left are run by GHash.io, Coinbase and Circle. At that point, some balance will emerge between fees and size, as excessize size leads to more centralization which leads to more fees due to monopoly pricing. In order to achieve the second, we can simply have many altcoins. To achieve all three combined, however, we need to break through a fundamental barrier posed by Bitcoin and all other existing cryptocurrencies, and create a system that works without the existence of any "full nodes" that need to process every transaction. In an Ethereum context, the definition of scalability gets a little more complicated. Ethereum is, fundamentally, a platform for "dapps", and within that mandate there are two kinds of scalability that are relevant: The first is inherently easier than the second. The only property that the "build lots and lots of alt-Etherea" approach does not have is that each individual alt-Ethereum has relatively weak security; at a size of 1000 alt-Etherea, each one would be vulnerable to a 0.1% attack from the point of view of the whole system (that 0.1% is for externally-sourced attacks; internally-sourced attacks, the equivalent of GHash.io and Discus Fish colluding, would take only 0.05%). If we can find some way for all alt-Etherea to share consensus strength, eg. some version of merged mining that makes each chain receive the strength of the entire pack without requiring the existence of miners that know about all chains simultaneously, then we would be done. The second is more problematic, because it leads to the same fragility property that arises from scaling Bitcoin the currency: if every node sees only a small part of the state, and arbitrary amounts of BTC can legitimately appear in any part of the state originating from any part of the state (such fungibility is part of the definition of a currency), then one can intuitively see how forgery attacks might spread through the blockchain undetected until it is too late to revert everything without substantial system-wide disruption via a global revert. We'll start off by describing a relatively simple model that does provide both kinds of scalability, but provides the second only in a very weak and costly way; essentially, we have just enough intra-dapp scalability to ensure asset fungibility, but not much more. The model works as follows: Suppose that the global Ethereum state (ie. all accounts, contracts and balances) is split up into N parts ("substates") (think 10 <= N <= 200). Anyone can set up an account on any substate, and one can send a transaction to any substate by adding a substate number flag to it, but ordinary transactions can only send a message to an account in the same substate as the sender. However, to ensure security and cross-transmissibility, we add some more features. First, there is also a special "hub substate", which contains only a list of messages, of the form [dest_substate, address, value, data]. Second, there is an opcode CROSS_SEND, which takes those four parameters as arguments, and sends such a one-way message enroute to the destination substate. Miners mine blocks on some substate s[j], and each block on s[j] is simultaneously a block in the hub chain. Each block on s[j] has as dependencies the previous block on s[j] and the previous block on the hub chain. For example, with N = 2, the chain would look something like this: The block-level state transition function, if mining on substate s[j], does three things: From a scalability perspective, this gives us a substantial improvement. All miners only need to be aware of two out of the total N + 1 substates: their own substate, and the hub substate. Dapps that are small and self-contained will exist on one substate, and dapps that want to exist across multiple substates will need to send messages through the hub. For example a cross-substate currency dapp would maintain a contract on all substates, and each contract would have an API that allows a user to destroy currency units inside of one substate in exchange for the contract sending a message that would lead to the user being credited the same amount on another substate. Messages going through the hub do need to be seen by every node, so these will be expensive; however, in the case of ether or sub-currencies we only need the transfer mechanism to be used occasionally for settlement, doing off-chain inter-substate exchange for most transfers. Now, let us take this simple scheme and analyze its security properties (for illustrative purposes, we'll use N = 100). First of all, the scheme is secure against double-spend attacks up to 50% of the total hashpower; the reason is that every sub-chain is essentially merge-mined with every other sub-chain, with each block reinforcing the security of all sub-chains simultaneously. However, there are more dangerous classes of attacks as well. Suppose that a hostile attacker with 4% hashpower jumps onto one of the substates, thereby now comprising 80% of the mining power on it. Now, that attacker mines blocks that are invalid - for example, the attacker includes a state transition that creates messages sending 1000000 ETH to every other substate out of nowhere. Other miners on the same substate will recognize the hostile miner's blocks as invalid, but this is irrelevant; they are only a very small part of the total network, and only 20% of that substate. The miners on other substates don't know that the attacker's blocks are invalid, because they have no knowledge of the state of the "captured substate", so at first glance it seems as though they might blindly accept them. Fortunately, here the solution here is more complex, but still well within the reach of what we currently know works: as soon as one of the few legitimate miners on the captured substate processes the invalid block, they will see that it's invalid, and therefore that it's invalid in some particular place. From there, they will be able to create a light-client Merkle tree proof showing that that particular part of the state transition was invalid. To explain how this works in some detail, a light client proof consists of three things: The first two "intermediate state roots" are the roots of the Ethereum Patricia state tree before and after executing the transaction; the Ethereum protocol requires both of these to be in every block. The Patricia state tree nodes provided are needed in order to the verifier to follow along the computation themselves, and see that the same result is arrived at the end. For example, if a transaction ends up modifying the state of three accounts, the set of tree nodes that will need to be provided might look something like this:  Technically, the proof should include the set of Patricia tree nodes that are needed to access the intermediate state roots and the transaction as well, but that's a relatively minor detail. Altogether, one can think of the proof as consisting of the minimal amount of information from the blockchain needed to process that particular transaction, plus some extra nodes to prove that those bits of the blockchain are actually in the current state. Once the whistleblower creates this proof, they will then be broadcasted to the network, and all other miners will see the proof and discard the defective block. The hardest class of attack of all, however, is what is called a "data unavailability attack". Here, imagine that the miner sends out only the block header to the network, as well as the list of messages to add to the hub, but does not provide any of the transactions, intermediate state roots or anything else. Now, we have a problem. Theoretically, it is entirely possible that the block is completely legitimate; the block could have been properly constructed by gathering some transactions from a few millionaires who happened to be really generous. In reality, of course, this is not the case, and the block is a fraud, but the fact that the data is not available at all makes it impossible to construct an affirmative proof of the fraud. The 20% honest miners on the captured substate may yell and squeal, but they have no proof at all, and any protocol that did heed their words would necessarily fall to a 0.2% denial-of-service attack where the miner captures 20% of a substate and pretends that the other 80% of miners on that substate are conspiring against him. To solve this problem, we need something called a challenge-response protocol. Essentially, the mechanism works as follows: Note that the mechanism requires a few added complexities on order to work. If a block is published alongside all of its transactions except for a few, then the challenge-response protocol could quickly go through them all and discard the block. However, if a block was published truly headers-only, then if the block contained hundreds of transactions, hundreds of challenges would be required. One heuristic approach to solving the problem is that miners receiving a block should privately pick some random nonces, send out a few challenges for those nonces to some known miners on the potentially captured substate, and if responses to all challenges do not come back immediately treat the block as suspect. Note that the miner does NOT broadcast the challenge publicly - that would give an opportunity for an attacker to quickly fill in the missing data. The second problem is that the protocol is vulnerable to a denial-of-service attack consisting of attackers publishing very very many challenges to legitimate blocks. To solve this, making a challenge should have some cost - however, if this cost is too high then the act of making a challenge will require a very high "altruism delta", perhaps so high that an attack will eventually come and no one will challenge it. Although some may be inclined to solve this with a market-based approach that places responsibility for making the challenge on whatever parties end up robbed by the invalid state transition, it is worth noting that it's possible to come up with a state transition that generates new funds out of nowhere, stealing from everyone very slightly via inflation, and also compensates wealthy coin holders, creating a theft where there is no concentrated incentive to challenge it. For a currency, one "easy solution" is capping the value of a transaction, making the entire problem have only very limited consequence. For a Turing-complete protocol the solution is more complex; the best approaches likely involve both making challenges expensive and adding a mining reward to them. There will be a specialized group of "challenge miners", and the theory is that they will be indifferent as to which challenges to make, so even the tiniest altruism delta, enforced by software defaults, will drive them to make correct challenges. One may even try to measure how long challenges take to get responded, and more highly reward the ones that take longer. Note: this is NOT the same as the erasure-coding Borg cube. For more info on that, see here: https://blog.ethereum.org/2014/08/16/secret-sharing-erasure-coding-guide-aspiring-dropbox-decentralizer/ We can see two flaws in the above scheme. First, the justification that the challenge-response protocol will work is rather iffy at best, and has poor degenerate-case behavior: a substate takeover attack combined with a denial of service attack preventing challenges could potentially force an invalid block into a chain, requiring an eventual day-long revert of the entire chain when (if?) the smoke clears. There is also a fragility component here: an invalid block in any substate will invalidate all subsequent blocks in all substates. Second, cross-substate messages must still be seen by all nodes. We start off by solving the second problem, then proceed to show a possible defense to make the first problem slightly less bad, and then finally get around to solving it completely, and at the same time getting rid of proof of work. The second flaw, the expensiveness of cross-substate messages, we solve by converting the blockchain model from this: To this: Except the cube should have twelve dimensions instead of three. Now, the protocol looks as follows: Essentially, instead of travelling through the hub, messages make their way around the substates along edges, and the constantly reducing Hamming distance ensures that each message always eventually gets to its destination. The key design decision here is the arrangement of all substates into a hypercube. Why was the cube chosen? The best way to think of the cube is as a compromise between two extreme options: on the one hand the circle, and on the other hand the simplex (basically, 2N-dimensional version of a tetrahedron). In a circle, a message would need to travel on average a quarter of the way across the circle before it gets to its destination, meaning that we make no efficiency gains over the plain old hub-and-spoke model. In a simplex, every pair of substates has an edge, so a cross-substate message would get across as soon as a block between those two substates is produced. However, with miners picking random edges it would take a long time for a block on the right edge to appear, and more importantly users watching a particular substate would need to be at least light clients on every other substate in order to validate blocks that are relevant to them. The hypercube is a perfect balance - each substate has a logarithmically growing number of neighbors, the length of the longest path grows logarithmically, and block time of any particular edge grows logarithmically. Note that this algorithm has essentially the same flaws as the hub-and-spoke approach - namely, that it has bad degenerate-case behavior and the economics of challenge-response protocols are very unclear. To add stability, one approach is to modify the header chain somewhat. Right now, the header chain is very strict in its validity requirements - if any block anywhere down the header chain turns out to be invalid, all blocks in all substates on top of that are invalid and must be redone. To mitigate this, we can require the header chain to simply keep track of headers, so it can contain both invalid headers and even multiple forks of the same substate chain. To add a merge-mining protocol, we implement exponential subjective scoring but using the header chain as an absolute common timekeeper. We use a low base (eg. 0.75 instead of 0.99) and have a maximum penalty factor of 1 / 2N to remove the benefit from forking the header chain; for those not well versed in the mechanics of ESS, this basically means "allow the header chain to contain all headers, but use the ordering of the header chain to penalize blocks that come later without making this penalty too strict". Then, we add a delay on cross-substate messages, so a message in an outbox only becomes "eligible" if the originating block is at least a few dozen blocks deep. Now, let us work on porting the protocol to nearly-pure proof of stake. We'll ignore nothing-at-stake issues for now; Slasher-like protocols plus exponential subjective scoring can solve those concerns, and we will discuss adding them in later. Initially, our objective is to show how to make the hypercube work without mining, and at the same time partially solve the fragility problem. We will start off with a proof of activity implementation for multichain. The protocol works as follows: To actually check the validity of a block, the consensus group members would do two things. First, they would check that the initial state roots provided in the block match the corresponding state roots in the header chain. Second, they would process the transactions, and make sure that the final state roots match the final state roots provided in the header chain and that all trie nodes needed to calculate the update are available somewhere in the network. If both checks pass, they sign the block, and if the block is signed by sufficiently many consensus group members it gets added to the header chain, and the state roots for the two affected blocks in the header chain are updated. And that's all there is to it. The key property here is that every block has a randomly chosen consensus group, and that group is chosen from the global state of all account holders. Hence, unless an attacker has at least 33% of the stake in the entire system, it will be virtually impossible (specifically, 2-70 probability, which with 230 proof of work falls well into the realm of cryptographic impossiblity) for the attacker to get a block signed. And without 33% of the stake, an attacker will not be able to prevent legitimate miners from creating blocks and getting them signed. This approach has the benefit that it has nice degenerate-case behavior; if a denial-of-service attack happens, then chances are that almost no blocks will be produced, or at least blocks will be produced very slowly, but no damage will be done. Now, the challenge is, how do we further reduce proof of work dependence, and add in blockmaker and Slasher-based protocols? A simple approach is to have a separate blockmaker protocol for every edge, just as in the single-chain approach. To incentivize blockmakers to act honestly and not double-sign, Slasher can also be used here: if a signer signs a block that ends up not being in the main chain, they get punished. Schelling point effects ensure that everyone has the incentive to follow the protocol, as they guess that everyone else will (with the additional minor pseudo-incentive of software defaults to make the equilibrium stronger). These protocols allow us to send one-way messages from one substate to another. However, one way messages are limited in functionality (or rather, they have as much functionality as we want them to have because everything is Turing-complete, but they are not always the nicest to work with). What if we can make the hypercube simulate a full cross-substate EVM, so you can even call functions that are on other substates? As it turns out, you can. The key is to add to messages a data structure called a continuation. For example, suppose that we are in the middle of a computation where a contract calls a contract which creates a contract, and we are currently executing the code that is creating the inner contract. Thus, the place we are in the computation looks something like this: Now, what is the current "state" of this computation? That is, what is the set of all the data that we need to be able to pause the computation, and then using the data resume it later on? In a single instance of the EVM, that's just the program counter (ie. where we are in the code), the memory and the stack. In a situation with contracts calling each other, we need that data for the entire "computational tree", including where we are in the current scope, the parent scope, the parent of that, and so forth back to the original transaction: This is called a "continuation". To resume an execution from this continuation, we simply resume each computation and run it to completion in reverse order (ie. finish the innermost first, then put its output into the appropriate space in its parent, then finish the parent, and so forth). Now, to make a fully scalable EVM, we simply replace the concept of a one-way message with a continuation, and there we go. Of course, the question is, do we even want to go this far? First of all, going between substates, such a virtual machine would be incredibly inefficient; if a transaction execution needs to access a total of ten contracts, and each contract is in some random substate, then the process of running through that entire execution will take an average of six blocks per transmission, times two transmissions per sub-call, times ten sub-calls - a total of 120 blocks. Additionally, we lose synchronicity; if A calls B once and then again, but between the two calls C calls B, then C will have found B in a partially processed state, potentially opening up security holes. Finally, it's difficult to combine this mechanism with the concept of reverting transaction execution if transactions run out of gas. Thus, it may be easier to not bother with continuations, and rather opt for simple one-way messages; because the language is Turing-complete continuations can always be built on top. As a result of the inefficiency and instability of cross-chain messages no matter how they are done, most dapps will want to live entirely inside of a single sub-state, and dapps or contracts that frequently talk to each other will want to live in the same sub-state as well. To prevent absolutely everyone from living on the same sub-state, we can have the gas limits for each substate "spill over" into each other and try to remain similar across substates; then, market forces will naturally ensure that popular substates become more expensive, encouraging marginally indifferent users and dapps to populate fresh new lands. So, what problems remain? First, there is the data availability problem: what happens when all of the full nodes on a given sub-state disappear? If such a situation happens, the sub-state data disappears forever, and the blockchain will essentially need to be forked from the last block where all of the sub-state data actually is known. This will lead to double-spends, some broken dapps from duplicate messages, etc. Hence, we need to essentially be sure that such a thing will never happen. This is a 1-of-N trust model; as long as one honest node stores the data we are fine. Single-chain architectures also have this trust model, but the concern increases when the number of nodes expected to store each piece of data decreases - as it does here by a factor of 2048. The concern is mitigated by the existence of altruistic nodes including blockchain explorers, but even that will become an issue if the network scales up so much that no single data center will be able to store the entire state.  Second, there is a fragility problem: if any block anywhere in the system is mis-processed, then that could lead to ripple effects throughout the entire system. A cross-substate message might not be sent, or might be re-sent; coins might be double-spent, and so forth. Of course, once a problem is detected it would inevitably be detected, and it could be solved by reverting the whole chain from that point, but it's entirely unclear how often such situations will arise. One fragility solution is to have a separate version of ether in each substate, allowing ethers in different substates to float against each other, and then add message redundancy features to high-level languages, accepting that messages are going to be probabilistic; this would allow the number of nodes verifying each header to shrink to something like 20, allowing even more scalability, though much of that would be absorbed by an increased number of cross-substate messages doing error-correction. A third issue is that the scalability is limited; every transaction needs to be in a substate, and every substate needs to be in a header that every node keeps track of, so if the maximum processing power of a node is N transactions, then the network can process up to N2 transactions. An approach to add further scalability is to make the hypercube structure hierarchical in some fashion - imagine the block headers in the header chain as being transactions, and imagine the header chain itself being upgraded from a single-chain model to the exact same hypercube model as described here - that would give N3 scalability, and applying it recursively would give something very much like tree chains, with exponential scalability - at the cost of increased complexity, and making transactions that go all the way across the state space much more inefficient. Finally, fixing the number of substates at 4096 is suboptimal; ideally, the number would grow over time as the state grew. One option is to keep track of the number of transactions per substate, and once the number of transactions per substate exceeds the number of substates we can simply add a dimension to the cube (ie. double the number of substates). More advanced approaches involve using minimal cut algorithms such as the relatively simple Karger's algorithm to try to split each substate in half when a dimension is added. However, such approaches are problematic, both because they are complex and because they involve unexpectedly massively increasing the cost and latency of dapps that end up accidentally getting cut across the middle. Of course, hypercubing the blockchain is not the only approach to making the blockchain scale. One very promising alternative is to have an ecosystem of multiple blockchains, some application-specific and some Ethereum-like generalized scripting environments, and have them "talk to" each other in some fashion - in practice, this generally means having all (or at least some) of the blockchains maintain "light clients" of each other inside of their own states. The challenge there is figuring out how to have all of these chains share consensus, particularly in a proof-of-stake context. Ideally, all of the chains involved in such a system would reinforce each other, but how would one do that when one can't determine how valuable each coin is? If an attacker has 5% of all A-coins, 3% of all B-coins and 80% of all C-coins, how does A-coin know whether it's B-coin or C-coin that should have the greater weight? One approach is to use what is essentially Ripple consensus between chains - have each chain decide, either initially on launch or over time via stakeholder consensus, how much it values the consensus input of each other chain, and then allow transitivity effects to ensure that each chain protects every other chain over time. Such a system works very well, as it's open to innovation - anyone can create new chains at any point with arbitrarily rules, and all the chains can still fit together to reinforce each other; quite likely, in the future we may see such an inter-chain mechanism existing between most chains, and some large chains, perhaps including older ones like Bitcoin and architectures like a hypercube-based Ethereum 2.0, resting on their own simply for historical reasons. The idea here is for a truly decentralized design: everyone reinforces each other, rather than simply hugging the strongest chain and hoping that that does not fall prey to a black swan attack. Previous post Next post Sign up to receive email notifications for protocol-related announcements, such as network upgrades, FAQs or security issues. You can opt-out of these at any time. Ethereum Foundation Ethereum.org ESP Bug Bounty Program Do-not-Track Archive Research & Development Events Organizational Ecosystem Support Program Ethereum.org Security Next Billion Protocol Announcements
================================================================================
Title: EIP-1559: Fee market change for ETH 1.0 chain
Date: Date not available
Content:
A transaction pricing mechanism that includes fixed-per-block network fee that is burned and dynamically expands/contracts block sizes to deal with transient congestion. We introduce a new EIP-2718 transaction type, with the format 0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]). There is a base fee per gas in protocol, which can move up or down each block according to a formula which is a function of gas used in parent block and gas target (block gas limit divided by elasticity multiplier) of parent block.
The algorithm results in the base fee per gas increasing when blocks are above the gas target, and decreasing when blocks are below the gas target.
The base fee per gas is burned.
Transactions specify the maximum fee per gas they are willing to give to miners to incentivize them to include their transaction (aka: priority fee).
Transactions also specify the maximum fee per gas they are willing to pay total (aka: max fee), which covers both the priority fee and the block’s network fee per gas (aka: base fee).
Senders will always pay the base fee per gas of the block their transaction was included in, and they will pay the priority fee per gas set in the transaction, as long as the combined amount of the two fees doesn’t exceed the transaction’s maximum fee per gas. Ethereum historically priced transaction fees using a simple auction mechanism, where users send transactions with bids (“gasprices”) and miners choose transactions with the highest bids, and transactions that get included pay the bid that they specify. This leads to several large sources of inefficiency: The proposal in this EIP is to start with a base fee amount which is adjusted up and down by the protocol based on how congested the network is. When the network exceeds the target per-block gas usage, the base fee increases slightly and when capacity is below the target, it decreases slightly. Because these base fee changes are constrained, the maximum difference in base fee from block to block is predictable. This then allows wallets to auto-set the gas fees for users in a highly reliable fashion. It is expected that most users will not have to manually adjust gas fees, even in periods of high network activity. For most users the base fee will be estimated by their wallet and a small priority fee, which compensates miners taking on orphan risk (e.g. 1 nanoeth), will be automatically set. Users can also manually set the transaction max fee to bound their total costs. An important aspect of this fee system is that miners only get to keep the priority fee. The base fee is always burned (i.e. it is destroyed by the protocol). This ensures that only ETH can ever be used to pay for transactions on Ethereum, cementing the economic value of ETH within the Ethereum platform and reducing risks associated with miner extractable value (MEV). Additionally, this burn counterbalances Ethereum inflation while still giving the block reward and priority fee to miners. Finally, ensuring the miner of a block does not receive the base fee is important because it removes miner incentive to manipulate the fee in order to extract more fees from users. Block validity is defined in the reference implementation below.
The GASPRICE (0x3a) opcode MUST return the effective_gas_price as defined in the reference implementation below. As of FORK_BLOCK_NUMBER, a new EIP-2718 transaction is introduced with TransactionType 2. The intrinsic cost of the new transaction is inherited from EIP-2930, specifically 21000 + 16 * non-zero calldata bytes + 4 * zero calldata bytes + 1900 * access list storage key count + 2400 * access list address count. The EIP-2718 TransactionPayload for this transaction is rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]). The signature_y_parity, signature_r, signature_s elements of this transaction represent a secp256k1 signature over keccak256(0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list])). The EIP-2718 ReceiptPayload for this transaction is rlp([status, cumulative_transaction_gas_used, logs_bloom, logs]). Note: // is integer division, round down. Legacy Ethereum transactions will still work and be included in blocks, but they will not benefit directly from the new pricing system.  This is due to the fact that upgrading from legacy transactions to new transactions results in the legacy transaction’s gas_price  entirely being consumed either by the base_fee_per_gas and the priority_fee_per_gas. The datastructure that is passed into keccak256 to calculate the block hash is changing, and all applications that are validating blocks are valid or using the block hash to verify block contents will need to be adapted to support the new datastructure (one additional item).  If you only take the block header bytes and hash them you should still correctly get a hash, but if you construct a block header from its constituent elements you will need to add in the new one at the end. Previous to this change, GASPRICE represented both the ETH paid by the signer per gas for a transaction as well as the ETH received by the miner per gas.  As of this change, GASPRICE now only represents the amount of ETH paid by the signer per gas, and the amount a miner was paid for the transaction is no longer accessible directly in the EVM. This EIP will increase the maximum block size, which could cause problems if miners are unable to process a block fast enough as it will force them to mine an empty block.  Over time, the average block size should remain about the same as without this EIP, so this is only an issue for short term size bursts.  It is possible that one or more clients may handle short term size bursts poorly and error (such as out of memory or similar) and client implementations should make sure their clients can appropriately handle individual blocks up to max size. With most people not competing on priority fees and instead using a baseline fee to get included, transaction ordering now depends on individual client internal implementation details such as how they store the transactions in memory.  It is recommended that transactions with the same priority fee be sorted by time the transaction was received to protect the network from spamming attacks where the attacker throws a bunch of transactions into the pending pool in order to ensure that at least one lands in a favorable position.  Miners should still prefer higher gas premium transactions over those with a lower gas premium, purely from a selfish mining perspective. It is possible that miners will mine empty blocks until such time as the base fee is very low and then proceed to mine half full blocks and revert to sorting transactions by the priority fee.  While this attack is possible, it is not a particularly stable equilibrium as long as mining is decentralized.  Any defector from this strategy will be more profitable than a miner participating in the attack for as long as the attack continues (even after the base fee reached 0).  Since any miner can anonymously defect from a cartel, and there is no way to prove that a particular miner defected, the only feasible way to execute this attack would be to control 50% or more of hashing power.  If an attacker had exactly 50% of hashing power, they would make no Ether from priority fee while defectors would make double the Ether from priority fees.  For an attacker to turn a profit, they need to have some amount over 50% hashing power, which means they can instead execute double spend attacks or simply ignore any other miners which is a far more profitable strategy. Should a miner attempt to execute this attack, we can simply increase the elasticity multiplier (currently 2x) which requires they have even more hashing power available before the attack can even be theoretically profitable against defectors. By burning the base fee, we can no longer guarantee a fixed Ether supply.  This could result in economic instability as the long term supply of ETH will no longer be constant over time.  While a valid concern, it is difficult to quantify how much of an impact this will have.  If more is burned on base fee than is generated in mining rewards then ETH will be deflationary and if more is generated in mining rewards than is burned then ETH will be inflationary.  Since we cannot control user demand for block space, we cannot assert at the moment whether ETH will end up inflationary or deflationary, so this change causes the core developers to lose some control over Ether’s long term quantity. Copyright and related rights waived via CC0. Please cite this document as: Vitalik Buterin (@vbuterin), Eric Conner (@econoar), Rick Dudley (@AFDudley), Matthew Slipper (@mslipper), Ian Norden (@i-norden), Abdelhamid Bakhta (@abdelhamidbakhta), "EIP-1559: Fee market change for ETH 1.0 chain," Ethereum Improvement Proposals, no. 1559, April 2019. [Online serial]. Available: https://eips.ethereum.org/EIPS/eip-1559. Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, such as core protocol specifications.
================================================================================
Title: GitHub - vbuterin/scalability_paper
Date: Date not available
Content:
We read every piece of feedback, and take your input very seriously. 
            To see all available qualifiers, see our documentation.
          
================================================================================
Title: Quadratic Arithmetic Programs: from Zero to Hero | by Vitalik Buterin | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in Vitalik Buterin Follow -- 31 Listen Share There has been a lot of interest lately in the technology behind zk-SNARKs, and people are increasingly trying to demystify something that many have come to call “moon math” due to its perceived sheer indecipherable complexity. zk-SNARKs are indeed quite challenging to grasp, especially due to the sheer number of moving parts that need to come together for the whole thing to work, but if we break the technology down piece by piece then comprehending it becomes simpler. The purpose of this post is not to serve as a full introduction to zk-SNARKs; it assumes as background knowledge that (i) you know what zk-SNARKs are and what they do, and (ii) know enough math to be able to reason about things like polynomials (if the statementP(x) + Q(x) = (P + Q)(x) , where P and Q are polynomials, seems natural and obvious to you, then you’re at the right level). Rather, the post digs deeper into the machinery behind the technology, and tries to explain as well as possible the first half of the pipeline, as drawn by zk-SNARK researcher Eran Tromer here: The steps here can be broken up into two halves. First, zk-SNARKs cannot be applied to any computational problem directly; rather, you have to convert the problem into the right “form” for the problem to operate on. The form is called a “quadratic arithmetic program” (QAP), and transforming the code of a function into one of these is itself highly nontrivial. Along with the process for converting the code of a function into a QAP is another process that can be run alongside so that if you have an input to the code you can create a corresponding solution (sometimes called “witness” to the QAP). After this, there is another fairly intricate process for creating the actual “zero knowledge proof” for this witness, and a separate process for verifying a proof that someone else passes along to you, but these are details that are out of scope for this post. The example that we will choose is a simple one: proving that you know the solution to a cubic equation: x**3 + x + 5 == 35 (hint: the answer is 3). This problem is simple enough that the resulting QAP will not be so large as to be intimidating, but nontrivial enough that you can see all of the machinery come into play. Let us write out our function as follows: The simple special-purpose programming language that we are using here supports basic arithmetic (+, -, *, /), constant-power exponentiation (x**7 but not x**y) and variable assignment, which is powerful enough that you can theoretically do any computation inside of it (as long as the number of computational steps is bounded; no loops allowed). Note that modulo (%) and comparison operators (<, >, ≤, ≥) are NOT supported, as there is no efficient way to do modulo or comparison directly in finite cyclic group arithmetic (be thankful for this; if there was a way to do either one, then elliptic curve cryptography would be broken faster than you can say “binary search” and “Chinese remainder theorem”). You can extend the language to modulo and comparisons by providing bit decompositions (eg. 13 = 2**3 + 2**2 + 1) as auxiliary inputs, proving correctness of those decompositions and doing the math in binary circuits; in finite field arithmetic, doing equality (==) checks is also doable and in fact a bit easier, but these are both details we won’t get into right now. We can extend the language to support conditionals (eg. if x < 5: y = 7; else: y = 9) by converting them to an arithmetic form: y = 7 * (x < 5) + 9 * (x >= 5); though note that both “paths” of the conditional would need to be executed, and if you have many nested conditionals then this can lead to a large amount of overhead. Let us now go through this process step by step. If you want to do this yourself for any piece of code, I implemented a compiler here (for educational purposes only; not ready for making QAPs for real-world zk-SNARKs quite yet!). The first step is a “flattening” procedure, where we convert the original code, which may contain arbitrarily complex statements and expressions, into a sequence of statements that are of two forms:x = y (where y can be a variable or a number)and x = y (op) z (where op can be +, -, *, / and y and z can be variables, numbers or themselves sub-expressions). You can think of each of these statements as being kind of like logic gates in a circuit. The result of the flattening process for the above code is as follows: If you read the original code and the code here, you can fairly easily see that the two are equivalent. Now, we convert this into something called a rank-1 constraint system (R1CS). An R1CS is a sequence of groups of three vectors (a, b, c), and the solution to an R1CS is a vector s, where s must satisfy the equation s . a * s . b - s . c = 0, where . represents the dot product - in simpler terms, if we "zip together" a and s, multiplying the two values in the same positions, and then take the sum of these products, then do the same to b and s and then c and s, then the third result equals the product of the first two results. For example, this is a satisfied R1CS: But instead of having just one constraint, we are going to have many constraints: one for each logic gate. There is a standard way of converting a logic gate into a (a, b, c) triple depending on what the operation is (+, -, * or /) and whether the arguments are variables or numbers. The length of each vector is equal to the total number of variables in the system, including a dummy variable~one at the first index representing the number 1, the input variables, a dummy variable ~out representing the output, and then all of the intermediate variables (sym1 and sym2 above); the vectors are generally going to be very sparse, only filling in the slots corresponding to the variables that are affected by some particular logic gate. First, we’ll provide the variable mapping that we’ll use: The solution vector will consist of assignments for all of these variables, in that order. Now, we’ll give the (a, b, c) triple for the first gate: You can see that if the solution vector contains 3 in the second position, and 9 in the fourth position, then regardless of the rest of the contents of the solution vector, the dot product check will boil down to 3 * 3 = 9, and so it will pass. If the solution vector has -3 in the second position and 9 in the fourth position, the check will also pass; in fact, if the solution vector has 7 in the second position and 49 in the fourth position then that check will still pass — the purpose of this first check is to verify the consistency of the inputs and outputs of the first gate only. Now, let’s go on to the second gate: In a similar style to the first dot product check, here we’re checking that sym_1 * x = y. Now, the third gate: Here, the pattern is somewhat different: it’s multiplying the first element in the solution vector by the second element, then by the fifth element, adding the two results, and checking if the sum equals the sixth element. Because the first element in the solution vector is always one, this is just an addition check, checking that the output equals the sum of the two inputs. Finally, the fourth gate: Here, we’re evaluating the last check, ~out = sym_2 + 5. The dot product check works by taking the sixth element in the solution vector, adding five times the first element (reminder: the first element is 1, so this effectively means adding 5), and checking it against the third element, which is where we store the output variable. And there we have our R1CS with four constraints. The witness is simply the assignment to all the variables, including input, output and internal variables: You can compute this for yourself by simply “executing” the flattened code above, starting off with the input variable assignment x=3, and putting in the values of all the intermediate variables and the output as you compute them. The complete R1CS put together is: The next step is taking this R1CS and converting it into QAP form, which implements the exact same logic except using polynomials instead of dot products. We do this as follows. We go from four groups of three vectors of length six to six groups of three degree-3 polynomials, where evaluating the polynomials at each x coordinate represents one of the constraints. That is, if we evaluate the polynomials at x=1, then we get our first set of vectors, if we evaluate the polynomials at x=2, then we get our second set of vectors, and so on. We can make this transformation using something called a Lagrange interpolation. The problem that a Lagrange interpolation solves is this: if you have a set of points (ie. (x, y) coordinate pairs), then doing a Lagrange interpolation on those points gives you a polynomial that passes through all of those points. We do this by decomposing the problem: for each x coordinate, we create a polynomial that has the desired y coordinate at that x coordinate and a y coordinate of 0 at all the other x coordinates we are interested in, and then to get the final result we add all of the polynomials together. Let’s do an example. Suppose that we want a polynomial that passes through (1, 3), (2, 2) and (3, 4). We start off by making a polynomial that passes through (1, 3), (2, 0) and (3, 0). As it turns out, making a polynomial that “sticks out” at x=1 and is zero at the other points of interest is easy; we simply do: Which looks like this: Now, we just need to “rescale” it so that the height at x=1 is right: This gives us: We then do the same with the other two points, and get two other similar-looking polynomials, except that they “stick out” at x=2 and x=3 instead of x=1. We add all three together and get: With exactly the coordinates that we want. The algorithm as described above takes O(n**3) time, as there are n points and each point requires O(n**2) time to multiply the polynomials together; with a little thinking, this can be reduced to O(n**2) time, and with a lot more thinking, using fast Fourier transform algorithms and the like, it can be reduced even further — a crucial optimization when functions that get used in zk-SNARKs in practice often have many thousands of gates. Now, let’s use Lagrange interpolation to transform our R1CS. What we are going to do is take the first value out of every a vector, use Lagrange interpolation to make a polynomial out of that (where evaluating the polynomial at i gets you the first value of the ith a vector), repeat the process for the first value of every b and c vector, and then repeat that process for the second values, the third, values, and so on. For convenience I'll provide the answers right now: Coefficients are in ascending order, so the first polynomial above is actually 0.833 * x**3 — 5*x**2 + 9.166*x - 5. This set of polynomials (plus a Z polynomial that I will explain later) makes up the parameters for this particular QAP instance. Note that all of the work up until this point needs to be done only once for every function that you are trying to use zk-SNARKs to verify; once the QAP parameters are generated, they can be reused. Let’s try evaluating all of these polynomials at x=1. Evaluating a polynomial at x=1 simply means adding up all the coefficients (as 1**k = 1 for all k), so it’s not difficult. We get: And lo and behold, what we have here is exactly the same as the set of three vectors for the first logic gate that we created above. Now what’s the point of this crazy transformation? The answer is that instead of checking the constraints in the R1CS individually, we can now check all of the constraints at the same time by doing the dot product check on the polynomials. Because in this case the dot product check is a series of additions and multiplications of polynomials, the result is itself going to be a polynomial. If the resulting polynomial, evaluated at every x coordinate that we used above to represent a logic gate, is equal to zero, then that means that all of the checks pass; if the resulting polynomial evaluated at at least one of the x coordinate representing a logic gate gives a nonzero value, then that means that the values going into and out of that logic gate are inconsistent (ie. the gate is y = x * sym_1 but the provided values might be x = 2,sym_1 = 2 and y = 5). Note that the resulting polynomial does not itself have to be zero, and in fact in most cases won’t be; it could have any behavior at the points that don’t correspond to any logic gates, as long as the result is zero at all the points that do correspond to some gate. To check correctness, we don’t actually evaluate the polynomial t = A . s * B . s - C . s at every point corresponding to a gate; instead, we divide t by another polynomial, Z, and check that Z evenly divides t - that is, the division t / Z leaves no remainder. Z is defined as (x - 1) * (x - 2) * (x - 3) ... - the simplest polynomial that is equal to zero at all points that correspond to logic gates. It is an elementary fact of algebra that any polynomial that is equal to zero at all of these points has to be a multiple of this minimal polynomial, and if a polynomial is a multiple of Z then its evaluation at any of those points will be zero; this equivalence makes our job much easier. Now, let’s actually do the dot product check with the polynomials above. First, the intermediate polynomials: Now, A . s * B . s — C . s: Now, the minimal polynomial Z = (x - 1) * (x - 2) * (x - 3) * (x - 4): And if we divide the result above by Z, we get: With no remainder. And so we have the solution for the QAP. If we try to falsify any of the variables in the R1CS solution that we are deriving this QAP solution from — say, set the last one to 31 instead of 30, then we get a t polynomial that fails one of the checks (in that particular case, the result at x=3 would equal -1 instead of 0), and furthermore t would not be a multiple of Z; rather, dividing t / Z would give a remainder of [-5.0, 8.833, -4.5, 0.666]. Note that the above is a simplification; “in the real world”, the addition, multiplication, subtraction and division will happen not with regular numbers, but rather with finite field elements — a spooky kind of arithmetic which is self-consistent, so all the algebraic laws we know and love still hold true, but where all answers are elements of some finite-sized set, usually integers within the range from 0 to n-1 for some n. For example, if n = 13, then 1 / 2 = 7 (and 7 * 2 = 1), 3 * 5 = 2, and so forth. Using finite field arithmetic removes the need to worry about rounding errors and allows the system to work nicely with elliptic curves, which end up being necessary for the rest of the zk-SNARK machinery that makes the zk-SNARK protocol actually secure. Special thanks to Eran Tromer for helping to explain many details about the inner workings of zk-SNARKs to me. -- -- 31 Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title:  Cryptography 
Date: Date not available
Content:





















Dark Mode Toggle








 Cryptography 

 Cryptography 

Blockchains
Cryptography
Economics
Fun
General
Gitcoin
Math
Philosophy
Translations




2024 Sep 02

Glue and coprocessor architectures



2024 Jul 23

Exploring circle STARKs



2024 Apr 29

Binius: highly efficient proofs over binary fields



2024 Feb 09

Ask security questions



2022 Sep 17

What kind of layer 3s make sense?



2022 Jun 15

Some ways to use ZK-SNARKs for privacy



2022 Mar 14

How do trusted setups work?



2021 Nov 05

Halo and more: exploring incremental verification and SNARKs without pairings



2021 Jun 18

Verkle trees



2021 Jan 26

An approximate introduction to how zk-SNARKs are possible



2020 Jul 20

Exploring Fully Homomorphic Encryption



2020 Mar 21

A Quick Garbled Circuits Primer



2019 Nov 22

Hard Problems in Cryptocurrency: Five Years Later



2019 Oct 01

In-person meatspace protocol to prove unconditional possession of a private key



2019 Sep 22

Understanding PLONK



2019 May 12

Fast Fourier Transforms



2018 Jul 21

STARKs, Part 3: Into the Weeds



2017 Nov 22

STARKs, Part II: Thank Goodness It's FRI-day



2017 Nov 09

STARKs, Part I: Proofs with Polynomials



2017 Feb 01

[Mirror] Zk-SNARKs: Under the Hood



2017 Jan 14

[Mirror] Exploring Elliptic Curve Pairings



2016 Dec 10

[Mirror] Quadratic Arithmetic Programs: from Zero to Hero


 
================================================================================
Title: Why I Built Zuzalu
Date: October 6, 2023
Content:
We tend to think about physical places, as well as the activities and cultures that come with those places, as being immutable. As an individual, you may have a choice to move to a particular place: to San Francisco for its open and accepting culture or for its AI development scene, to Berlin for the open source hacker culture, or to Asia to be part of a new and rising world.  At the same time, we take all of those features as given, as an exogenous and fixed part of the human world—there are tradeoffs, and you have to choose. But what if this could be different? What if cultures or tribes that have formed online with their own goals and values could materialize offline, and new physical places could grow due to intention rather than random chance? Ideas like this have floated around online philosophical circles for decades. In 1988, the French sociologist Michel Maffesoli wrote a book called The Time of the Tribes, arguing that the next era will see more agency exercised in groups defined by common interests, rather than common history or blood and soil. More recently, Balaji Srinivasan wrote The Network State, arguing that communities defined by common interests can start off as purely online discussion forums, but then “materialize” into in-person hubs over time. From the perspective of economic democracy, David de Ugarte’s Phyles advocated for cultural and economic collaboration between transnational groups that would coordinate both online and offline. The virtual transnational community that this author calls home is the crypto space, and it is a unique place from which to view these issues. On the one hand, it is a “tech” industry. The whole space runs on advanced software and mathematics like blockchains and zero-knowledge proofs. Users interact with it through applications that they run on computers and phones that receive data served over the internet.  But it also has plenty of its own unique characteristics. Unlike other tech industries, which typically consolidate around San Francisco or sometimes New York City, crypto has strangely resisted the gravitational pull of geographical centralization. Ethereum is legally based in Switzerland, with a second major entity in Singapore. Many of its developers are in Berlin. Major development teams are based in places such as Romania and Australia. One layer-2 scaling protocol is based in India and another is in China.  In some sense, Ethereum already is one of these digital internet tribes. It already frequently “materializes” through regular conferences that happen in all parts of the world and attract many thousands of people each time. These give participants the opportunity for regular in-person interaction and serendipitous connections without the need to get a U.S. visa or pay sky-high rents. For weeks at a time, the Ethereum community is already shaping human geography to a significant extent, not just responding to it. By 2022, I had been thinking about many of these topics for a while. I read and reviewed Balaji Srinivasan’s book on network states, wrote posts about what a crypto city might look like, and explored issues of governance in the context of blockchain-native digital constructs like DAOs. But the discussion seemed like it was remaining too theoretical for too long, and the time seemed ripe for a more practical experiment. And so came the idea for Zuzalu. Zuzalu was an experiment in taking these ideas to the next level. We already have hacker houses, and hacker houses can last for months or even years, but they usually only fit around ten or twenty people. We already have conferences, and conferences fit thousands of people, but each conference only lasts a week. That is enough time to have serendipitous meetings, but not enough to have connections with true depth. So let’s take one step in both directions: create a pop-up mini-city that houses two hundred people, and lasts for two whole months.  This hits a sweet spot: it’s ambitious enough and different enough from what has already been repeated ad nauseam that we actually learn something, but still light enough that it’s logistically manageable. And it also intentionally does not center any specific vision about how something like this should be done, whether Balaji’s or otherwise. The work started in January. A team that started with about four people scouted out locations and decided on a resort in Montenegro. The resort is ordinarily quite expensive, but the negotiating power of renting a hundred apartments at once, plus picking an off-season time when the resort is usually empty, pushed the costs much lower.  We invited about a dozen inviters, who in turn invited more people, along with sharing an application form in a few communities: the Ethereum community, with a focus on developers and researchers working on zero-knowledge proofs, the longevity and broader biotech industry, and European rationalists. We also engaged researchers and builders of “the meta:” internet tribes, network states, community building, and governance. By February, the team expanded to about eight people and worked quickly on logistics. It was a challenge but working with an existing resort made it surprisingly manageable. On March 25th, the event began and the two hundred guests quickly began rolling in. The parts of Zuzalu that were “centrally planned” were available from the start. We cooperated with a local restaurant to make a breakfast buffet based loosely on longevity guru Bryan Johnson’s Blueprint menu. The meals fused Bryan’s ideals of identifying the healthiest possible diet and lifestyle with the needs of practicality, such as sticking to a budget of $15 per person per day.  On the crypto side, the 0xPARC team created Zupass, an identity system based on zero-knowledge proofs that you could use to prove that you were a resident of Zuzalu without revealing which one. This could be used both in-person and online, including to anonymously sign in to applications like Zupoll. Soon after, we turned the balcony of one of the apartments into a gym. What happened from that point forward, however, was completely bottom-up. A tradition of taking daily morning cold plunges emerged on its own and grew over time. Groups started to independently cook their own food. After a month, we started to have karaoke sessions. In the beginning, the core team organized a meeting room with high-quality audio-visual equipment and created a webpage that any resident could use to permissionlessly book a time slot and make their own event. Soon, residents were creating sub-events and tracks started to emerge.  All in all, it felt like Zuzalu had achieved its core objectives: it brought together a new combination of cultures and it felt like a city. The “form factor” of two hundred people coming to live in a place for an extended duration really did work. People were willing to come, and those people who came almost universally reported enjoying the experience. This reflected something I also experienced later at a four-day blockchain conference in the Pacific island nation of Palau: the event was deliberately light on sessions and heavy on informal spend-time-together activities, and many attendees reported being very appreciative of the unique form factor.  Over time, the longer duration of Zuzalu succeeded at creating a different mindset. A four-day conference is a break from your life, but a two-month stay is your life. And for at least some people, it turned out that the small but highly focused network effect of a few hundred people who care about the precise thing you care about really can substitute the massive but much more unfocused network effects of the global megacities. The idea of building and beta-testing a technology inside of a community of dedicated enthusiasts also proved a success. Zupass started off as essentially a clunky piece of hackathon software, but through real-time use and feedback from users, usability quickly and noticeably improved to the point where it became more usable than many multi-year-old blockchain applications. A healthy lifestyle is also a technology—one which works best as a social technology—and this too improved quickly at Zuzalu.  We did not quite reach the goal of developing a less costly and time-consuming version of Bryan Johnson’s extreme longevity lifestyle but we did make significant progress. Technologies that have a heavy cultural component, where new software tools and new human habits are being developed at the same time, are likely a great fit for this approach. That said, there remain plenty of experiments still left to do. Crypto payments, a long-time dream of the Bitcoin and Ethereum communities, were present but limited. No one even considered governing Zuzalu with a DAO, a decentralized autonomous organization running on a blockchain. A two-hundred-person community lasting for two months was either too short, too small, or both for such a thing to really make sense. But these two dreams are important enough that future experiments, whether run by the Zuzalu community or by independent spinoffs, will undoubtedly make a much more concerted effort to realize them. Zuzalu also succeeded at being a highly international community: no single country was the source of more than one-third of the attendees; the top two were, unsurprisingly, the United States and China. This diversity was in large part deliberate, an intentional strategy to avoid getting captured by the internal struggles and excesses of any one single national culture. As far as subject areas went, Zuzalu was less diverse: while non-crypto communities were present and appreciated the experience, the Ethereum community was a clear forerunner.  But perhaps this is not a failure: diversity done well is not about equally representing all of society or humanity, it’s about strategically bringing together groups that would otherwise not care for each other and building bridges. What the experiment did less well at was showing a clear picture of where to go from here. Balaji’s The Network State did talk about the multi-century history of small-scale “communistic societies” in the U.S. and elsewhere, but also highlighted a grand geopolitical vision: the Decentralized Movement, a twenty-first-century non-aligned movement that can protect freedom in an unfree and high-conflict world. Perhaps such a movement can even provide a peaceful alternative to the unstable geopolitical bipole of China and the U.S. Zuzalu, however, did not yet feel like something that was actually achieving such a lofty goal. Many cultural movements—digital nomadism, cryptoanarchy, and others come to mind—excitedly grow at first, but then settle down into becoming part of the global political and cultural landscape. They are stable and even significant, but ultimately not world-changing once they saturate their natural base of enthusiasts. Would “Zuzaluism” meet the same fate? And might it in fact be good to decrease ambitions somewhat and let that happen? It is easy to argue the case that Zuzaluism in its current form is destined to be fairly niche. The community that is attracted to Zuzalu, while impressive, has clear biases: many of the attendees are young, there were few families with children and those who did come only stayed for a few days, and roughly a third of the attendees were already digital nomads. Thanks to subsidies, many people who were not rich in money were able to come, but they were still quite elite in terms of their social connections. More broadly, many strands of evidence show that unless faced by a “push factor” as strong as a literal war of conquest taking over one’s land, it is very rare for a demographically significant portion of a previously static population to pick up and move somewhere else. Even in Russia, less than one percent of the population has left the country following the start of the current war. Certainly, many of those who left are Russia’s best and brightest, serving the function of weakening an aggressive power and setting an example to others who might do the same. But it’s also clear that large-scale emigration is still far from a grand solution to major geopolitical problems.

And so this leaves the question: where do we go from here? There are plenty of historical examples of intentionally created, medium-sized, and longer-term gatherings that don’t overturn the world, but still leave a worthy impact. Universities are one good precedent to think about—an ironic precedent, given how many of us a decade ago were enthusiasts of disrupting in-person universities with online MOOC services such as Udacity and Coursera, but an underappreciated precedent nonetheless.  Monasteries are another example; a few years ago, the philosopher Samo Burja asked why there are no monasteries dedicated to perfecting software, given that many software engineers have made enough money and now desire personal spiritual progress. Ultimately, the Zuzalu community does have ambitions that stretch somewhat higher than creating universities and monasteries, even if they are lower than fixing global politics. And in any case, the model that makes sense to apply somewhere new is rarely exactly a carbon copy of any specific thing that came before. My own prediction is that Zuzalu will in part become a structure that has aspects of universities, monasteries, and digital nomad hubs. But it will also introduce entirely new activities like “incubating” novel technologies, including social technologies, by testing them out within a dedicated community. It will also find its niche in “the meta” by being a gathering spot for the future builders of new physical places and new societies of all kinds. That said, there is a long way to go. Many paths still unexplored or even unknown, and so the journey is just beginning. Vitalik Buterin is the founder of Ethereum. You can follow him at @vitalik.eth.
================================================================================
Title: Transaction: 3a1b9e330d32fef1ee42f8e86420d2be978bbe0dc5862f17da9027cf9e11f8c4 | Blockchain.com
Date: Date not available
Content:
Transaction: 3a1b9e330d32fef1ee42f8e86420d2be978bbe0dc5862f17da9027cf9e11f8c4 | Blockchain.comBlockchain.comHomePricesChartsNFTsBuyMoreHomePricesChartsNFTsDeFiAcademyNewsDevelopersWalletExchangeBitcoinEthereumBitcoin CashEnglishEspañolPortuguêsPyccкийFrançaisDeutschBlockchain.com Sign In Sign InTXAmountFeeFromToAdvanced DetailsToFromExplore top crypto assets.
================================================================================
Title: Fee market change for ETH 1.0 chain · Issue #1559 · ethereum/EIPs · GitHub
Date: Date not available
Content:
We read every piece of feedback, and take your input very seriously. 
            To see all available qualifiers, see our documentation.
           
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
   By clicking “Sign up for GitHub”, you agree to our terms of service and
  privacy statement. We’ll occasionally send you account related emails. 
    Already on GitHub?
    Sign in
    to your account
   The final standard can be found here: https://eips.ethereum.org/EIPS/eip-1559 Provide a concrete proposal for implementing the fee market proposed in https://ethresear.ch/t/draft-position-paper-on-resource-pricing/2838 on the current 1.0 chain. See zcash/zcash#3473 for more detailed arguments for why this is a good idea. For all blocks where block.number >= FORK_BLKNUM: As a default strategy, miners set MINFEE as follows. Let delta = block.gas_used - TARGET_GASUSED (possibly negative). Set MINFEE = PARENT_MINFEE + PARENT_MINFEE * delta // TARGET_GASUSED //  MINFEE_MAX_CHANGE_DENOMINATOR, clamping this result inside of the allowable bounds if needed (with the parameter setting above clamping will not be required). There is a MINFEE value in protocol, which can move up or down by a maximum of 1/8 in each block; initially, miners adjust this value to target an average gas usage of 8 million, increasing MINFEE if usage is higher and decreasing it if usage is lower. Transaction senders specify their fees by providing two values: Ultra-short-term volatility in transaction demand or block times will now translate mostly into ultra-short-term volatility in block sizes instead of volatility in transaction fees. During normal conditions, fee estimation becomes extremely simple: just set the premium to some specific value, eg. 1 gwei, and select a high cap. If a transaction sender highly values urgency during conditions of congestion, they are free to instead set a much higher premium and effectively bid in the traditional first-price-auction style. 



              The text was updated successfully, but these errors were encountered:
             s|//|/|g? 





 



    Sorry, something went wrong.
   Regarding ethpricing.pdf and your notes on time-value of storage. Please consider this concrete implementation of a solution: #1418. This implements lazy evaluation and does not require pokes. 





 



    Sorry, something went wrong.
   I think '//' means integer division. 





 



    Sorry, something went wrong.
   This proposal is completely separate from storage maintenance fees; it's purely about gas as it exists within the current 1.0 chain. 





 



    Sorry, something went wrong.
   In every block, a miner gets a reward equal to 1/N (eg. 1/10000) of the money remaining in the pot (note that this amount does NOT depend on the transactions they include in their block). Doesn't this creates an incentive to mine empty blocks? Since the miner gets only a 1/1000 of the current transaction fees, and instead they go to a public commons, while a naive miner is incentivized to put as much as possible in the pot so they can get more in the future, a selfish miner could decide to save computation time by ignoring all transactions. They still get the fee and it's the next miner that will get penalized for his actions. Of course, it's a prisoner's dilemma: if all miners refuse transactions it's worse for everyone, but if others cooperate and you refuse, then you get rewarded. 





 



    Sorry, something went wrong.
   Doesn't this creates an incentive to mine empty blocks? Ah sorry, I did not mean to say that the incentive to include transactions is literally zero. The tx.fee_premium component still goes 100% to the miner. It's up to the market to determine how much of a premium is incentive enough, but the key point is that the value that we can expect to be a sufficient incentive can be expected to be roughly constant over time, and not change block by block with changing levels of congestion/demand or even just bad luck of the Poisson process. 





 



    Sorry, something went wrong.
   What do you think about introducing smoothing (aggregating gasused over multiple blocks) and some lag (aggregating over past blocks rather than very recent blocks)? Smoothing would increase the price of manipulation, and lag would make MINFEE more predictable (for better usability) 





 



    Sorry, something went wrong.
   Anyone wanting to tweak the parameters on something like this would be well advised to read Feedback Control for Computer Systems. I think this will need some simulation to determine the correct parameters. 





 



    Sorry, something went wrong.
   What do you think about introducing smoothing (aggregating gasused over multiple blocks) There is already implicit smoothing because each block only moves the fee by a relatively small amount. and some lag (aggregating over past blocks rather than very recent blocks)? Smoothing would increase the price of manipulation, and lag would make MINFEE more predictable (for better usability) That's definitely interesting! I guess the goal would be to make MINFEE predictable N blocks in advance instead of just one? Certainly doable though it would add complexity. 





 



    Sorry, something went wrong.
   Anyone wanting to tweak the parameters on something like this would be well advised to read Feedback Control for Computer Systems. I am getting this book tomorrow :) 





 



    Sorry, something went wrong.
   Anyone wanting to tweak the parameters on something like this would be well advised to read Feedback Control for Computer Systems. I think this will need some simulation to determine the correct parameters. Are you kidding, this has to be a horrible book for Feedback or Control Theory. Is this the principal forum for discussion on these matters? 





 



    Sorry, something went wrong.
   What do you think about introducing smoothing (aggregating gasused over multiple blocks) and some lag (aggregating over past blocks rather than very recent blocks)? Smoothing would increase the price of manipulation, and lag would make MINFEE more predictable (for better usability) I think an applications of Controls Theory concepts is very interesting here. In order for it to work though, you have to identify a few things in the system: what are we optimizing for? what are our "control variables" (things we can control in the protocol)? what are our sensory inputs we can read (things we can observe)? how do we want to model the system we are controlling (the "plant")? There are tons of very interesting things that can be done, very simply and very effectively (especially since we have a TON of data to analyze about the current system), but applying controls theory works best when you go through the exercise of defining the system in the framework. It might be good to start by modeling the existing system using a Controls Theory model (State Space or "classical") 





 



    Sorry, something went wrong.
   Is this the principal forum for discussion on these matters? I vote we move discussion to https://ethereum-magicians.org/t/eip-1559-fee-market-change-for-eth-1-0-chain/2783 It's a better forum for these types of discussions 





 



    Sorry, something went wrong.
   Closed now that the EIP is specified here
https://eips.ethereum.org/EIPS/eip-1559 and the discussion-thread is here
https://ethereum-magicians.org/t/eip-1559-fee-market-change-for-eth-1-0-chain/2783 





 



    Sorry, something went wrong.
   cool 





 



    Sorry, something went wrong.
   No branches or pull requests
================================================================================
Title: Plasma chains | ethereum.org
Date: Date not available
Content:
Last edit: @wackerow(opens in a new tab), January 25, 2024 A Plasma chain is a separate blockchain anchored to Ethereum Mainnet but executing transactions off-chain with its own mechanism for block validation. Plasma chains are sometimes referred to as "child" chains, essentially smaller copies of the Ethereum Mainnet. Plasma chains use  (like optimistic rollups) to arbitrate disputes. Merkle trees enable the creation of an endless stack of these chains that can work to offload bandwidth from parent chains (including Ethereum Mainnet). However, while these chains derive some security from Ethereum (via fraud proofs), their security and efficiency are affected by several design limitations. You should have a good understanding of all the foundational topics and a high-level understanding of Ethereum scaling. Plasma is a framework for improving scalability in public blockchains like Ethereum. As described in the original Plasma whitepaper(opens in a new tab), Plasma chains are built atop another blockchain (called a "root chain"). Each "child chain" extends from the root chain and is generally managed by a smart contract deployed on the parent chain. The Plasma contract functions, among other things, as a bridge allowing users to move assets between Ethereum Mainnet and the plasma chain. Although this makes them similar to sidechains, plasma chains benefit—at least, to some extent—from Ethereum Mainnet's security. This is unlike sidechains that are solely responsible for their security. The basic components of the Plasma framework are: Ethereum's current processing speed is limited to ~ 15-20 transactions per second, reducing the short-term possibility of scaling to handle more users. This problem exists mainly because Ethereum's consensus mechanism requires many peer-to-peer nodes to verify every update to the blockchain's state. Although Ethereum's consensus mechanism is necessary for security, it may not apply to every use case. For example, Alice may not need her daily payments to Bob for a cup of coffee verified by the entire Ethereum network since some trust exists between both parties. Plasma supposes that Ethereum Mainnet doesn't need to verify all transactions. Instead, we can process transactions off Mainnet, freeing nodes from having to validate every transaction. Off-chain computation is necessary since Plasma chains can optimize for speed and cost. For example, a Plasma chain may—and most often does—use a single "operator" to manage the ordering and execution of transactions. With just one entity verifying transactions, processing times on a plasma chain are faster than Ethereum Mainnet. While Plasma executes transactions off-chain, they are settled on the main Ethereum execution layer—otherwise, Plasma chains cannot benefit from Ethereum's security guarantees. But finalizing off-chain transactions without knowing the state of the plasma chain would break the security model and allow the proliferation of invalid transactions. This is why the operator, the entity responsible for producing blocks on the plasma chain, is required to publish "state commitments" on Ethereum periodically. A commitment scheme(opens in a new tab) is a cryptographic technique for committing to a value or statement without revealing it to another party. Commitments are "binding" in the sense that you cannot change the value or statement once you've committed to it. State commitments in Plasma take the form of "Merkle roots" (derived from a Merkle tree) which the operator sends at intervals to the Plasma contract on the Ethereum chain. Merkle roots are cryptographic primitives that enable compressing of large amounts of information. A Merkle root (also called a "block root" in this case) could represent all the transactions in a block. Merkle roots also make it easier to verify that a small piece of data is part of the larger dataset. For instance, a user can produce a Merkle proof to prove the inclusion of a transaction in a specific block. Merkle roots are important for providing information about the off-chain's state to Ethereum. You can think of Merkle roots as "save points": the operator is saying, "This is the state of the Plasma chain at x point in time, and this is the Merkle root as proof." The operator is committing to the current state of the plasma chain with a Merkle root, which is why it is called a "state commitment". For Ethereum users to take advantage of Plasma, there needs to be a mechanism for moving funds between Mainnet and plasma chains. We cannot arbitrarily send ether to an address on the plasma chain, though—these chains are incompatible, so the transaction would either fail or lead to lost funds. Plasma uses a master contract running on Ethereum to process user entries and exits. This master contract is also responsible for tracking state commitments (explained earlier) and punishing dishonest behavior via fraud proofs (more on this later). To enter the plasma chain, Alice (the user) will have to deposit ETH or any ERC-20 token in the plasma contract. The plasma operator, who watches contract deposits, recreates an amount equal to Alice's initial deposit and releases it to her address on the plasma chain. Alice is required to attest to receiving the funds on the child chain and can then use these funds for transactions. Exiting the plasma chain is more complex than entering it for several reasons. The biggest one is that, while Ethereum has information about the plasma chain's state, it cannot verify if the information is true or not. A malicious user could make an incorrect assertion ("I have 1000 ETH") and get away with providing fake proofs to back up the claim. To prevent malicious withdrawals, a "challenge period" is introduced. During the challenge period (usually a week), anyone can challenge a withdrawal request using a fraud-proof. If the challenge succeeds, then the withdrawal request is denied. However, it is usually the case that users are honest and make correct claims about the funds they own. In this scenario, Alice will initiate a withdrawal request on the root chain (Ethereum) by submitting a transaction to the plasma contract. She must also provide a Merkle proof verifying that a transaction creating her funds on the Plasma chain was included in a block. This is necessary for iterations of Plasma, such as Plasma MVP(opens in a new tab), that use a Unspent Transaction Output (UTXO)(opens in a new tab) model. Others, like Plasma Cash(opens in a new tab), represent funds as non-fungible tokens instead of UTXOs. Withdrawing, in this case, requires proof of ownership of tokens on the Plasma chain. This is done by submitting the two latest transactions involving the token and providing a Merkle proof verifying the inclusion of those transactions in a block. The user must also add a bond to the withdrawal request as a guarantee of honest behavior. If a challenger proves Alice's withdrawal request invalid, her bond is slashed, and some of it goes to the challenger as a reward. If the challenge period elapses without anyone providing a fraud-proof, Alice's withdrawal request is considered valid, allowing her to retrieve deposits from the Plasma contract on Ethereum. Like any blockchain, plasma chains need a mechanism for enforcing the integrity of transactions in case participants act maliciously (e.g. double-spending funds). To this end, plasma chains use fraud proofs to arbitrate disputes concerning the validity of state transitions and penalize bad behavior. Fraud proofs are used as a mechanism through which a Plasma child chain files a complaint to its parent chain or to the root chain. A fraud-proof is simply a claim that a particular state transition is invalid. An example is if a user (Alice) tries to spend the same funds twice. Perhaps she spent the UTXO in a transaction with Bob and wants to spend the same UTXO (which is now Bob's) in another transaction. To prevent the withdrawal, Bob will construct a fraud-proof by providing evidence of Alice spending the said UTXO in a previous transaction and a Merkle proof of the transaction's inclusion in a block. The same process works in Plasma Cash—Bob would need to provide proof that Alice earlier transferred the tokens she's trying to withdraw. If Bob's challenge succeeds, Alice's withdrawal request is canceled. However, this approach relies on Bob's ability to watch the chain for withdrawal requests. If Bob is offline, then Alice can process the malicious withdrawal once the challenge period elapses. The mass exit problem occurs when a large number of users try to withdraw from a plasma chain at the same time. Why this problem exists has to do with one of Plasma's biggest problems: data unavailability. Data availability is the ability to verify that the information for a proposed block was actually published on the blockchain network. A block is "unavailable" if the producer publishes the block itself but withholds data used to create the block. Blocks must be available if nodes are to be able to download the block and verify the validity of transactions. Blockchains ensure data availability by forcing block producers to post all transaction data on-chain. Data availability also helps with securing off-chain scaling protocols that build on Ethereum's base layer. By forcing operators on these chains to publish transaction data on Ethereum, anyone can challenge invalid blocks by constructing fraud proofs referencing the correct state of the chain. Plasma chains primarily store transaction data with the operator and do not publish any data on Mainnet (i.e., besides periodic state commitments). This means users must rely on the operator to provide block data if they need to create fraud proofs challenging invalid transactions. If this system works, then users can always use fraud proofs to secure funds. The problem starts when the operator, not just any user, is the party acting maliciously. Because the operator is in sole control of the blockchain, they have more incentive to advance invalid state transitions on a larger scale, such as stealing funds belonging to users on the plasma chain. In this case, using the classic fraud-proof system does not work. The operator could easily make an invalid transaction transferring Alice and Bob's funds to their wallet and hide the data necessary for creating the fraud-proof. This is possible because the operator isn't required to make data available to users or Mainnet. Therefore, the most optimistic solution is to attempt a "mass exit" of users from the plasma chain. The mass exit slows down the malicious operator's plan to steal funds and provides some measure of protection for users. Withdrawal requests are ordered based on when each UTXO (or token) was created, preventing malicious operators from front-running honest users. Nonetheless, we still need a way to verify the validity of withdrawal requests during a mass exit—to prevent opportunistic individuals from cashing in on the chaos processing invalid exits. The solution is simple: require users to post the last valid state of the chain to exit their money. But this approach still has problems. For instance, if all users on a plasma chain need to exit (which is possible in the case of a malicious operator), then the entire valid state of the plasma chain must be dumped on Ethereum's base layer at once. With the arbitrary size of plasma chains (high throughput = more data) and constraints on Ethereum's processing speeds, this is not an ideal solution. Although exit games sound nice in theory, real-life mass exits will likely trigger network-wide congestion on Ethereum itself. Besides harming Ethereum's functionality, a poorly coordinated mass exit means that users may be unable to withdraw funds before the operator drains every account on the plasma chain. While Plasma was once considered a useful scaling solution for Ethereum, it has since been dropped in favor of layer 2 (L2) scaling protocols. L2 scaling solutions remedy several of Plasma's problems: Zero-Knowledge rollups generate cryptographic proofs of the validity of each batch of transactions processed off-chain. This prevents the users (and operators) from advancing invalid state transitions, eliminating the need for challenge periods and exit games. It also means users don't have to watch the chain periodically to secure their funds. Another problem with the plasma framework was the inability to support the execution of Ethereum smart contracts(opens in a new tab). As a result, most implementations of Plasma were mostly built for simple payments or the exchange of ERC-20 tokens. Conversely, optimistic rollups, are compatible with the Ethereum Virtual Machine and can run Ethereum-native smart contracts, making them a useful and secure solution for scaling decentralized applications. Similarly, plans are underway to create a zero-knowledge implementation of the EVM (zkEVM)(opens in a new tab) that would allow ZK-rollups to process arbitrary logic and execute smart contracts. As explained earlier, plasma suffers from a data availability problem. If a malicious operator advanced an invalid transition on the plasma chain, users would be unable to challenge it since the operator can withhold data needed to create the fraud-proof. Rollups solve this problem by forcing operators to post transaction data on Ethereum, allowing anyone to verify the chain's state and create fraud proofs if necessary. ZK-rollups and optimistic rollups both solve Plasma's mass exit problem in various ways. For example, a ZK-rollup relies on cryptographic mechanisms that ensure operators cannot steal user funds under any scenario. Similarly, optimistic rollups impose a delay period on withdrawals during which anyone can initiate a challenge and prevent malicious withdrawal requests. While this is similar to Plasma, the difference is that verifiers have access to data needed to create fraud proofs. Thus, there's no need for rollup users to engage in a frenzied, "first-to-get-out" migration to Ethereum Mainnet. Plasma, sidechains, and sharding are fairly similar because they all connect to Ethereum Mainnet in some way. However, the level and strength of these connections vary, which affects the security properties of each scaling solution. A sidechain is an independently operated blockchain connected to Ethereum Mainnet via a two-way bridge. Bridges allow users to exchange tokens between the two blockchains to transact on the sidechain, reducing congestion on Ethereum Mainnet and improving scalability.
Sidechains use a separate consensus mechanism and are typically much smaller than Ethereum Mainnet. As a result, bridging assets to these chains involves increased risk; given the lack of security guarantees inherited from Ethereum Mainnet in the sidechain model, users risk the loss of funds in an attack on the sidechain. Conversely, plasma chains derive their security from Mainnet. This makes them measurably more secure than sidechains. Both sidechains and plasma chains can have different consensus protocols, but the difference is that plasma chains publish Merkle roots for each block on Ethereum Mainnet. Block roots are small pieces of information we can use to verify information about transactions that happen on a plasma chain. If an attack happens on a plasma chain, users can safely withdraw their funds back to Mainnet using the appropriate proofs. Both plasma chains and shard chains periodically publish cryptographic proofs to Ethereum Mainnet. However, both have different security properties. Shard chains commit "collation headers" to Mainnet containing detailed information about each data shard. Nodes on Mainnet verify and enforce the validity of data shards, reducing the possibility of invalid shard transitions and protecting the network against malicious activity. Plasma is different because Mainnet only receives minimal information about the state of child chains. This means Mainnet cannot effectively verify transactions conducted on child chains, making them less secure. Note that sharding the Ethereum blockchain is no longer on the roadmap. It has been superseded by scaling via rollups and Danksharding. Multiple projects provide implementations of Plasma that you can integrate into your dapps: Know of a community resource that helped you? Edit this page and add it! If you're an expert on the topic and want to contribute, edit this page and sprinkle it with your wisdom. You'll be credited and you'll be helping the Ethereum community! Use this flexible documentation template(opens in a new tab) Questions? Ask us in the #content channel on our Discord server(opens in a new tab)  Previous Next Website last updated: October 2, 2024
================================================================================
Title: A Proof of Stake Design Philosophy | by Vitalik Buterin | Medium
Date: Date not available
Content:
Sign up Sign in Sign up Sign in Vitalik Buterin Follow -- 57 Listen Share Systems like Ethereum (and Bitcoin, and NXT, and Bitshares, etc) are a fundamentally new class of cryptoeconomic organisms — decentralized, jurisdictionless entities that exist entirely in cyberspace, maintained by a combination of cryptography, economics and social consensus. They are kind of like BitTorrent, but they are also not like BitTorrent, as BitTorrent has no concept of state — a distinction that turns out to be crucially important. They are sometimes described as decentralized autonomous corporations, but they are also not quite corporations — you can’t hard fork Microsoft. They are kind of like open source software projects, but they are not quite that either — you can fork a blockchain, but not quite as easily as you can fork OpenOffice. These cryptoeconomic networks come in many flavors — ASIC-based PoW, GPU-based PoW, naive PoS, delegated PoS, hopefully soon Casper PoS — and each of these flavors inevitably comes with its own underlying philosophy. One well-known example is the maximalist vision of proof of work, where “the” correct blockchain, singular, is defined as the chain that miners have burned the largest amount of economic capital to create. Originally a mere in-protocol fork choice rule, this mechanism has in many cases been elevated to a sacred tenet — see this Twitter discussion between myself and Chris DeRose for an example of someone seriously trying to defend the idea in a pure form, even in the face of hash-algorithm-changing protocol hard forks. Bitshares’ delegated proof of stake presents another coherent philosophy, where everything once again flows from a single tenet, but one that can be described even more simply: shareholders vote. Each of these philosophies; Nakamoto consensus, social consensus, shareholder voting consensus, leads to its own set of conclusions and leads to a system of values that makes quite a bit of sense when viewed on its own terms — though they can certainly be criticized when compared against each other. Casper consensus has a philosophical underpinning too, though one that has so far not been as succinctly articulated. Myself, Vlad, Dominic, Jae and others all have their own views on why proof of stake protocols exist and how to design them, but here I intend to explain where I personally am coming from. I’ll proceed to listing observations and then conclusions directly. From here, there are of course many details and many ways to diverge on the details, but the above are the core principles that at least my version of Casper is based on. From here, we can certainly debate tradeoffs between competing values . Do we give ETH a 1% annual issuance rate and get an $50 million cost of forcing a remedial hard fork, or a zero annual issuance rate and get a $5 million cost of forcing a remedial hard fork? When do we increase a protocol’s security under the economic model in exchange for decreasing its security under a fault tolerance model? Do we care more about having a predictable level of security or a predictable level of issuance? These are all questions for another post, and the various ways of implementing the different tradeoffs between these values are questions for yet more posts. But we’ll get to it :) -- -- 57 Help Status About Careers Press Blog Privacy Terms Text to speech Teams
================================================================================
Title: scalability_paper/scalability.pdf at master · vbuterin/scalability_paper · GitHub
Date: Date not available
Content:
We read every piece of feedback, and take your input very seriously. 
            To see all available qualifiers, see our documentation.
          
================================================================================
Title: Reddit - Dive into anything
Date: Date not available
Content:




Reddit - Dive into anything












































Skip to main content

























Open menu

Open navigation



































































 
Go to Reddit Home














r/politicalcompassmemes
                

A chip








A close button













Get app



Get the Reddit app



Log In

Log in to Reddit









Expand user menu
Open settings menu











Log In / Sign Up
















Advertise on Reddit
















Shop Collectible Avatars












          Get the Reddit app
        














Scan this QR code to download the app now



          Or check it out in the app stores 
        


























    
 









================================================================================
